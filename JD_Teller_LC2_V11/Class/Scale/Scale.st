//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Scale"
	Revision           = "1.3"
	GUID               = "{73753D61-C9D4-11D4-AB3A-00106092052D}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Scale\scale.ico"
	SharedCommandTable = "true"
	Objectsize         = "(378,120)"
	Comment            = "Scales An Input Signal&#13;&#10;&#13;&#10;operation:&#13;&#10; (Input-Offset)utputScale/InputScale">
	<Channels>
		<Server Name="Signal" GUID="{73753D62-C9D4-11D4-AB3A-00106092052D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="scaled value"/>
		<Client Name="Input" Required="false" Internal="false" Comment="input value: (Input-Offset)*OutputScale/InputScale = Signal"/>
		<Client Name="InputScale" Required="false" Internal="false" Comment="max. value of input scale&#13;&#10;"/>
		<Client Name="Offset" Required="false" Internal="false" Comment="offset is subtracted from the input value&#13;&#10;&#13;&#10;"/>
		<Client Name="OutPutScale" Required="false" Internal="false" Comment="max. value of output scale&#13;&#10;"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HubChr"/>
		<Dokumentation Revision="1.3" Date="2015-01-29" Author="HubChr" Company="Sigmatek" Description="Added Read-Method to work accordingly under ARM architecture."/>
		<Dokumentation Revision="1.2" Date="30.04.09" Author="hötant" Company="Sigmatek" Description="Changed LSL_TARGETARCH_ARM to _LSL_TARGETARCH_ARM"/>
		<Dokumentation Revision="1.1" Date="04.02.09" Author="hötant" Company="Sigmatek" Description="AWL to ST (to guarantee compatibility for other processors) "/>
	</RevDoku>
</Class>
*)
Scale : CLASS
  //Servers:
	Signal 	: SvrChCmd_DINT;
  //Clients:
	Input 	: CltCh_DINT;
	InputScale 	: CltCh_DINT;
	Offset 	: CltCh_DINT;
	OutPutScale 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment=" ******************************************************************&#13;&#10;                           Scalingclass&#13;&#10; ******************************************************************&#13;&#10;     operation:&#13;&#10;          (Input-Offset)*OutputScale/InputScale (64 Bit)&#13;&#10;          InputScale    : is read in the initfuntion&#13;&#10;          Offset        : is read in the initfuntion&#13;&#10;          OutPutScale   : is read in the initfuntion&#13;&#10; ******************************************************************&#13;&#10;        created       :      BS        :          47/01&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                      Scalierungsklasse&#13;&#10; ******************************************************************&#13;&#10;     Funktionalität:&#13;&#10;          (Input-Offset)*OutputScale/InputScale (64 Bit)&#13;&#10;          InputScale    : wird nur im Init gelesen&#13;&#10;          Offset        : wird nur im Init gelesen&#13;&#10;          OutPutScale   : wird nur im Init gelesen&#13;&#10; ******************************************************************&#13;&#10;        created       :      BS        :          47/01&#13;&#10; ******************************************************************&#13;&#10;" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment=" ******************************************************************&#13;&#10;                      Scalierungsklasse&#13;&#10; ******************************************************************&#13;&#10;     Funktionalität:&#13;&#10;          (Input-Offset)*OutputScale/InputScale (64 Bit)&#13;&#10;&#13;&#10;          InputScale    : wird nur im Init gelesen&#13;&#10;          Offset        : wird nur im Init gelesen&#13;&#10;          OutPutScale   : wird nur im Init gelesen&#13;&#10; ******************************************************************&#13;&#10;        created       :      BS        :          47/01&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                           Scalingclass&#13;&#10; ******************************************************************&#13;&#10;     operation:&#13;&#10;          (Input-Offset)*OutputScale/InputScale (64 Bit)&#13;&#10;&#13;&#10;          InputScale    : is read in the initfuntion&#13;&#10;          Offset        : is read in the initfuntion&#13;&#10;          OutPutScale   : is read in the initfuntion&#13;&#10; ******************************************************************&#13;&#10;        created       :      BS        :          47/01&#13;&#10; ******************************************************************&#13;&#10;" Name="Signal.Read"/>
	FUNCTION AWL VIRTUAL GLOBAL Signal::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Scale::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_SCALE
1$UINT, 3$UINT, (SIZEOF(::Scale))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(454223668), "Scale", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Scale.Signal.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2230604403), "Signal", 
//Clients:
(::Scale.Input.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(796717159), "Input", 
(::Scale.InputScale.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4187091863), "InputScale", 
(::Scale.Offset.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2851212630), "Offset", 
(::Scale.OutPutScale.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(810577581), "OutPutScale", 
END_FUNCTION


#define USER_CNT_Scale 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Scale] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Scale::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Scale, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
	Signal.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Signal.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION



//*********************Inserted from .\code\C_Scale.st*********************



 



//[#ENGLISH]
// ******************************************************************
//                           Scalingclass
// ******************************************************************
//     operation:
//          (Input-Offset)*OutputScale/InputScale (64 Bit)
//
//          InputScale    : 
//          Offset        : 
//          OutPutScale   : 
//
// ******************************************************************
//        created       :      BS        :          47/01
// ******************************************************************
//[#DEUTSCH]
// ******************************************************************
//                      Scalierungsklasse
// ******************************************************************
//     Funktionalität:
//          (Input-Offset)*OutputScale/InputScale (64 Bit)
//
//          InputScale    : 
//          Offset        : 
//          OutPutScale   : 
//
// ******************************************************************
//        created       :      BS        :          47/01
// ******************************************************************
FUNCTION VIRTUAL GLOBAL Scale::Init

InputScale	:=	InputScale.Read();
Offset		:=	Offset.Read();
OutPutScale	:=	OutPutScale.Read();

IF OutputScale = 0 THEN
	Outputscale	:=	10000;
END_IF;

IF InputScale = 0 THEN
	InputScale	:=	10000;
END_IF;


END_FUNCTION //VIRTUAL GLOBAL Scale::Init
//[#DEUTSCH]
// ******************************************************************
//                      Scalierungsklasse
// ******************************************************************
//     Funktionalität:
//          (Input-Offset)*OutputScale/InputScale (64 Bit)
//
//          InputScale    : wird nur im Init gelesen
//          Offset        : wird nur im Init gelesen
//          OutPutScale   : wird nur im Init gelesen
//
// ******************************************************************
//        created       :      BS        :          47/01
// ******************************************************************
//[#ENGLISH]
// ******************************************************************
//                           Scalingclass
// ******************************************************************
//     operation:
//          (Input-Offset)*OutputScale/InputScale (64 Bit)
//
//          InputScale    : is read in the initfuntion
//          Offset        : is read in the initfuntion
//          OutPutScale   : is read in the initfuntion
//
// ******************************************************************
//        created       :      BS        :          47/01
// ******************************************************************

#ifdef _LSL_TARGETARCH_ARM 
FUNCTION VIRTUAL GLOBAL Scale::Signal::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

 // HubChr v1.3
 Input := Input.Read();
 // ---

 if InputScale <> 0 then
    output := (Input - Offset) * OutPutScale / InputScale;
    
    if output > OutPutScale then
      output:=OutPutScale;
    elsif output < NOT(OutPutScale) then
      output:=NOT(OutPutScale);
    end_if;  
  else
    output:=OutPutScale;
  end_if;  
  
  Signal:=output;
  

END_FUNCTION //VIRTUAL GLOBAL Scale::Signal::Read

#else

FUNCTION AWL VIRTUAL GLOBAL Scale::Signal::Read
VAR_OUTPUT
	output		: DINT;
END_VAR

// (Input-Offset)*OutputScale/Inputscale

	L.EBX		Scale.Input
	call		Asm_rd_Chnl

	L.ECX 		OutPutScale.dData
	Sub.EAx 	Offset.dData	  
	Imul   		Ecx
	Idiv.D  	InputScale.dData
	Cmp.EAx		ECX
	jl			scok1
	L.eax		ECX
	Jmp 		ScResu
Scok1
	Neg			Ecx
	Cmp.EAx		Ecx
	Jg			ScResu
	L.eax		Ecx
ScResu
	S.EAx		Signal.dData

END_FUNCTION //VIRTUAL GLOBAL Scale::Signal::Read

#endif




