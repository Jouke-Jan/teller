//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_VaranCanLib"
	Revision           = "1.10"
	GUID               = "{52F38A55-474A-4037-AB9F-1BC0769EDBD4}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Tool.ico"
	SharedCommandTable = "true"
	Objectsize         = "(450,120)">
	<Channels>
		<Server
			Name           = "CanBus"
			Initialize     = "false"
			Visualized     = "true"
			WriteProtected = "true"
			Comment        = "which CanbusSystem [1,2,...](as initvalue)">
		</Server>
		<Client Name="To_Varan_Can" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="1.10" Date="12.02.2014" Author="PieSte" Company="Sigmatek" Description="Add read Client in Base to set value with connected server."/>
	</RevDoku>
	<Network Name="_VaranCanLib">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A2761AEB-F572-44B4-9307-45DEC6EDACC0}"
				Class      = "_CanLib"
				Position   = "(270,150)"
				Visualized = "true">
				<Channels>
					<Server Name="CanBus"/>
					<Server Name="Command"/>
					<Client Name="To_Can"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Command" Destination="_base.Command" Vertices="(772,210),(600,240),"/>
			<Connection Source="this.CanBus" Destination="_base.CanBus" Vertices="(772,270),(600,300),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _CanLib

_VaranCanLib : CLASS
: _CanLib
  //Servers:
  //Clients:
	To_Varan_Can 	: CltChCmd_Varan_Can;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL IsInstalled
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = CAN interface is installed, otherwise error code." Name="IsInstalled.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetMyStation
		VAR_INPUT
			Station 	: ^USINT;			//! <Variable Comment="target address to where the station number should be written." Name="GetMyStation.Station"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="GetMyStation.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetMyStation
		VAR_INPUT
			Station 	: USINT;			//! <Variable Comment="Station number." Name="SetMyStation.Station"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="SetMyStation.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetBaudrate
		VAR_INPUT
			Baudrate 	: ^USINT;			//! <Variable Comment="target address to where the baud rate should be written. 0: 615 kBit/s, 1: 500 kBit/s, 2: 250 kBit/s, 3: 125 kBit/s, 4: 100 kBit/s, 5: 50 kBit/s, 6: 20 kBit/s, 7: 1 MBit/s." Name="GetBaudrate.Baudrate"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="GetBaudrate.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetBaudrate
		VAR_INPUT
			Baudrate 	: USINT;			//! <Variable Comment="0: 615 kBit/s, 1: 500 kBit/s, 2: 250 kBit/s, 3: 125 kBit/s, 4: 100 kBit/s, 5: 50 kBit/s, 6: 20 kBit/s, 7: 1 MBit/s." Name="SetBaudrate.Baudrate"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="SetBaudrate.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CanTxObj
		VAR_INPUT
			ObjNr 	: INT;			//! <Variable Comment="Object number (max. 2047)." Name="CanTxObj.ObjNr"/>
			length 	: USINT;			//! <Variable Comment="Data length (max. 8)." Name="CanTxObj.length"/>
			data 	: pVoid;			//! <Variable Comment="Data pointer." Name="CanTxObj.data"/>
		END_VAR
		VAR_OUTPUT
			retval 	: INT;			//! <Variable Comment="0: OK, 1: wrong CAN interface (1 of 2). 2: Data length greater than 8 of ObjNr greater than 2047. 4: Buffer full." Name="CanTxObj.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AddCanObj
		VAR_INPUT
			ObjNr 	: INT;			//! <Variable Comment="Object number (max. 2047)." Name="AddCanObj.ObjNr"/>
			Length 	: USINT;			//! <Variable Comment="Data length (max. 8) ." Name="AddCanObj.Length"/>
			Mode 	: USINT;			//! <Variable Comment="0: RX without Interrupt, 1: RX with Interrupt, 2: Tx (use function CanTxObject!)." Name="AddCanObj.Mode"/>
			ActionPtr 	: pVoid;			//! <Variable Comment="Pointer to the function called by the Interrupt." Name="AddCanObj.ActionPtr"/>
			ThisPointer 	: pVoid;			//! <Variable Comment="Thispointer." Name="AddCanObj.ThisPointer"/>
		END_VAR
		VAR_OUTPUT
			retVal 	: DINT;			//! <Variable Comment="0-11: Nr. CAN-Objects used -2: Length &gt; 8, -3: ObjNr &gt; 2047, -4: Mode &gt; 2, -5: No User CAN-Object available" Name="AddCanObj.retVal"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LoginIntoCanNew
		VAR_INPUT
			CanStation 	: USINT;			//! <Variable Comment="CAN-Station number." Name="LoginIntoCanNew.CanStation"/>
			TxObjNr 	: INT;			//! <Variable Comment="Object number." Name="LoginIntoCanNew.TxObjNr"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="LoginIntoCanNew.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InitBasicCanObject
		VAR_INPUT
			ObjNr 	: INT;			//! <Variable Comment="Object number (max. 2047)." Name="InitBasicCanObject.ObjNr"/>
			mask 	: INT;			//! <Variable Comment="Bitmask filter to select CAN-Objects." Name="InitBasicCanObject.mask"/>
			ActionPointer 	: pVoid;			//! <Variable Comment="Pointer to the function called by the interrupt." Name="InitBasicCanObject.ActionPointer"/>
			ThisPointer 	: pVoid;			//! <Variable Comment="Thispointer." Name="InitBasicCanObject.ThisPointer"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0: Function successful, -1: Wrong CAN interface Number, -2: Object number &gt; 2047" Name="InitBasicCanObject.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Set_RTR_Flag
		VAR_INPUT
			handle 	: DINT;			//! <Variable Comment="Number of the  Can-Object used (return value of the AddCanObj function)" Name="Set_RTR_Flag.handle"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = OK, -1 = wrong handle" Name="Set_RTR_Flag.retval"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CanTxObjHandle
		VAR_INPUT
			handle 	: DINT;
			data 	: pVoid;
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CanRxObjHandle
		VAR_INPUT
			handle 	: DINT;
			pData 	: pVoid;
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RedefCanObj
		VAR_INPUT
			handle 	: DINT;
			ObjNr 	: DINT;
			Length 	: USINT;
			Mode 	: USINT;
			ActionPtr 	: pVoid;
			ThisPtr 	: pVoid;
			mask 	: INT;
		END_VAR
		VAR_OUTPUT
			retVal 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ChkObjExists
		VAR_INPUT
			ObjNr 	: INT;
			Mode 	: USINT;
		END_VAR
		VAR_OUTPUT
			handle 	: DINT;
		END_VAR;
				//! <Function Comment="deletes a can object" Name="DelCanObj"/>
	FUNCTION VIRTUAL GLOBAL DelCanObj
		VAR_INPUT
			Handle 	: DINT;			//! <Variable Comment="the handle of the object which should be deleted" Name="DelCanObj.Handle"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="DelCanObj.retval"/>
		END_VAR;
				//! <Function Comment="deletes the basic can object" Name="DelBasicCanObj"/>
	FUNCTION VIRTUAL GLOBAL DelBasicCanObj
		VAR_INPUT
			Handle 	: DINT;			//! <Variable Comment="This parameter is only used for the CCA021 module" Name="DelBasicCanObj.Handle"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="0 = Function successful, otherwise error code." Name="DelBasicCanObj.retval"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd Varan_Can


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _VaranCanLib::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__VARANCANLIB
1$UINT, 10$UINT, (SIZEOF(::_VaranCanLib))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(781409069), "_VaranCanLib", //Class
TO_UDINT(529317953), "_CanLib", 1$UINT, 10$UINT, //Baseclass
//Servers:
//Clients:
(::_VaranCanLib.To_Varan_Can.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2738984126), "To_Varan_Can", TO_UDINT(206510048), "Varan_Can", 1$UINT, 40$UINT, 
END_FUNCTION


#define USER_CNT__VaranCanLib 16

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__VaranCanLib] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _VaranCanLib::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _CanLib::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _CanLib::Command.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _CanLib::Command.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__VaranCanLib;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #IsInstalled();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetMyStation();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #SetMyStation();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetBaudrate();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #SetBaudrate();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #CanTxObj();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #AddCanObj();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #LoginIntoCanNew();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #InitBasicCanObject();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #Set_RTR_Flag();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #CanTxObjHandle();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #CanRxObjHandle();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #RedefCanObj();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #ChkObjExists();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #DelCanObj();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #DelBasicCanObj();

#pragma warning (default : 74)
	_CanLib::Command.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _CanLib::Command.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

(************************************************************************************
*
*	Class for Varan standard _CanLib interface
*	Created : Sigmatek	/	SR	/	July 2007
*	Changes : 
*   1.3 => 1.4  / 22.01.2009
*     - add the function ChkObjExists(..)
*		1.2 => 1.3	/	26.02.2008
*			- [DB 713]: methode SetMyStation didn't return a valid value
*		1.1 => 1.2	/	03.12.2007
*			- [DB 713]: make compatible to OS (varan can is managed by OS except ISO objects)
*		1.0 => 1.1	/	02.08.2007
*			make return codes compatible to CCA
*
************************************************************************************)


FUNCTION VIRTUAL GLOBAL _VaranCanLib::SetBaudrate
VAR_INPUT
	Baudrate		: USINT;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR
VAR
	ui_Baud		: UINT;
END_VAR

	case ( Baudrate ) of

		0:	ui_Baud := 615;
		1:	ui_Baud := 500;
		2:	ui_Baud := 250;
		3:	ui_Baud	:= 125;
		4:	ui_Baud	:= 100;
		5:	ui_Baud	:= 50;
		6:	ui_Baud := 20;
		7:	ui_Baud := 1000;

		else
			retval := -1;
			return;
	end_case;

	retval := To_Varan_Can.SetBaudrate( ui_baud := ui_Baud );

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::SetBaudrate

FUNCTION VIRTUAL GLOBAL _VaranCanLib::AddCanObj
VAR_INPUT
	ObjNr			: INT;
	Length			: USINT;
	Mode			: USINT;
	ActionPtr		: pVoid;
	ThisPointer		: pVoid;
END_VAR
VAR_OUTPUT
	retVal		: DINT;
END_VAR

	case ( Mode ) of
	
		0:	retval := To_Varan_Can.AddISOCanRxObj	( ud_object_nr	:= ObjNr$UDINT
													, us_length		:= Length
													, us_flags		:= 0
													);

		2:	retval := To_Varan_Can.AddISOCanTxObj	( ud_object_nr			:= ObjNr$UDINT
													, us_length				:= Length
													, us_flags				:= 0
													, ui_time_multiplier	:= 0
													, ui_multiplier_offset	:= 0
													);
		else
			retval := -4;
			return;			

	end_case;

	//convert error code
	case ( retval ) of 

		-1:		retval := -6;
		-2:		retval := -2;
		-3:		retval := -5;

	end_case;

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::AddCanObj

FUNCTION VIRTUAL GLOBAL _VaranCanLib::GetBaudrate
VAR_INPUT
	Baudrate		: ^USINT;
END_VAR
VAR_OUTPUT
	retval			: DINT;
END_VAR

	retval := To_Varan_Can.GetBaudrate(); 

	case ( retval ) of

		615:	Baudrate^ := 0;
		500:	Baudrate^ := 1;
		250:	Baudrate^ := 2;
		125:	Baudrate^ := 3;
		100:	Baudrate^ := 4;
		50:		Baudrate^ := 5;
		20:		Baudrate^ := 6;
		1000:	Baudrate^ := 7;
		
		else
			retval := -1;		//should not come here
			return;
	end_case;

	retval := 0;

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::GetBaudrate

FUNCTION VIRTUAL GLOBAL _VaranCanLib::CanTxObjHandle
VAR_INPUT
	handle		: DINT;
	data		: pvoid;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR

	retval := To_Varan_Can.SetISOData	( sd_handle	:= handle
										, p_data	:= data
										);

	//convert error code
	case ( retval ) of 

		-2:		retval := -5;
		-1:		retval := -3;

	end_case;

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::CanTxObjHandle

FUNCTION VIRTUAL GLOBAL _VaranCanLib::CanRxObjHandle
VAR_INPUT
	handle		: DINT;
	pData		: pVoid;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR

	retval := To_Varan_Can.GetISOData	( sd_handle	:= handle
										, p_data	:= pData
										);

	//convert error code
	case ( retval ) of 

		-2:		retval := -5;
		-1:		retval := -3;
		-4:		retval := -1;
		-3:		retval := -6;

	end_case;

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::CanRxObjHandle

FUNCTION VIRTUAL GLOBAL _VaranCanLib::Set_RTR_Flag
VAR_INPUT
	handle		: DINT;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR

	retval := To_Varan_Can.SetRemoteFlag( sd_handle := handle );

END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::Set_RTR_Flag
//------------------------ not available--------------------------------------------------

#pragma warning(disable:73)
#pragma warning(disable:76)

FUNCTION VIRTUAL GLOBAL _VaranCanLib::IsInstalled
VAR_OUTPUT
	retval		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::IsInstalled

FUNCTION VIRTUAL GLOBAL _VaranCanLib::GetMyStation
VAR_INPUT
	Station		: ^USINT;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::GetMyStation

FUNCTION VIRTUAL GLOBAL _VaranCanLib::SetMyStation
VAR_INPUT
	Station		: USINT;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::SetMyStation

FUNCTION VIRTUAL GLOBAL _VaranCanLib::CanTxObj
VAR_INPUT
	ObjNr		: INT;
	length		: USINT;
	data		: pVoid;
END_VAR
VAR_OUTPUT
	retval		: INT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::CanTxObj

FUNCTION VIRTUAL GLOBAL _VaranCanLib::LoginIntoCanNew
VAR_INPUT
	CanStation		: USINT;
	TxObjNr		: INT;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::LoginIntoCanNew

FUNCTION VIRTUAL GLOBAL _VaranCanLib::InitBasicCanObject
VAR_INPUT
	ObjNr		: INT;
	mask		: INT;
	ActionPointer		: pVoid;
	ThisPointer		: pVoid;
END_VAR
VAR_OUTPUT
	retval		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::InitBasicCanObject

FUNCTION VIRTUAL GLOBAL _VaranCanLib::ChkObjExists
VAR_INPUT
	ObjNr		: INT;
	Mode		: USINT;
END_VAR
VAR_OUTPUT
	handle		: DINT;
END_VAR
	
  handle := To_Varan_Can.ChkObjExists(ObjNr:=TO_UDINT(ObjNr), Mode:=Mode,0);
  
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::ChkObjExists

FUNCTION VIRTUAL GLOBAL _VaranCanLib::RedefCanObj
VAR_INPUT
	handle		: DINT;
	ObjNr		: DINT;
	Length		: USINT;
	Mode		: USINT;
	ActionPtr		: pvoid;
	ThisPtr		: pvoid;
	mask		: INT;
END_VAR
VAR_OUTPUT
	retVal		: DINT;
END_VAR
	retval := -100;
END_FUNCTION //VIRTUAL GLOBAL _VaranCanLib::RedefCanObj




FUNCTION VIRTUAL GLOBAL _VaranCanLib::DelBasicCanObj
	VAR_INPUT
		Handle 	: DINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR
	retval := -100;
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _VaranCanLib::DelCanObj
	VAR_INPUT
		Handle 	: DINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR
	retval := -100;
  
END_FUNCTION
#pragma warning(disable:73)
#pragma warning(disable:76)