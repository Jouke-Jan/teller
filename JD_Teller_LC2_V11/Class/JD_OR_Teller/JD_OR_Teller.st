//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "JD_OR_Teller"
	Revision           = "1.0"
	GUID               = "{C344CF7B-8824-425E-BCAE-CC9767B1D172}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{889333C6-102C-499B-8F02-EF0B5B6A92A6}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="In1" GUID="{DD9DA6C8-3822-4A2F-AB24-B76DBE1DBAE4}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="In2" GUID="{A8F42098-A132-4559-A4C7-A2CC4383155A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Out" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="SV"/>
		<Dokumentation Revision="1.1" Date="2014-09-04" Author="SV" Company="JD" Description="Kopie van JD_OR rev 1.2.  Init toegevoegd die een nul schrijft op server In1"/>
	</RevDoku>
</Class>
*)
JD_OR_Teller : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	In1 	: SvrCh_DINT;
	In2 	: SvrCh_DINT;
  //Clients:
	Out 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL In1::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL In2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB JD_OR_Teller::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_JD_OR_TELLER
1$UINT, 0$UINT, (SIZEOF(::JD_OR_Teller))$UINT, 
3$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3953068548), "JD_OR_Teller", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::JD_OR_Teller.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::JD_OR_Teller.In1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3207466476), "In1", 
(::JD_OR_Teller.In2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(640113750), "In2", 
//Clients:
(::JD_OR_Teller.Out.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(793587475), "Out", 
END_FUNCTION


#define USER_CNT_JD_OR_Teller 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_JD_OR_Teller] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION JD_OR_Teller::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_JD_OR_Teller, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	In1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #In1::Write() );
	IF In1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	In2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #In2::Write() );
	IF In2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL JD_OR_Teller::Init

  if _FirstScan then
    In1.Write(input:=0);
  end_if;



END_FUNCTION





FUNCTION VIRTUAL GLOBAL JD_OR_Teller::In1::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	In1 := input;
  
  if  In1 = 1 | In2 = 1 then
      Out := 0;
      Out.Write(Out);
  else
      Out := 1;
      Out.Write(Out);
  end_if;  
  
 	result := In1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL JD_OR_Teller::In2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	In2 := input;
  
  if  In1 = 1 | In2 = 1 then
      Out := 0;
      Out.Write(Out);
  else
      Out := 1;
      Out.Write(Out);
  end_if;  
  
 	result := In2;

END_FUNCTION







