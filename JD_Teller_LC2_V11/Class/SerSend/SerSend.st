//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SerSend"
	Revision           = "1.0"
	GUID               = "{9E22E20E-DDED-44B7-B4D3-7C95984A7F74}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{5C6C4D23-826C-488D-8720-46545DC13A33}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iCounter" GUID="{E342C2A1-475F-4878-8844-4A767571C3F1}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iCounterPerMin" GUID="{353C6ED7-AA35-4C17-A7C5-C7096C7F9BF5}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iRemaningproduction" GUID="{08EBF68D-0CE9-49D1-A2D3-D655F2663EE6}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iSpeed" GUID="{7F1145FC-3D34-4438-AAB2-87F6BB9C5048}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iTotalproduction" GUID="{B34ACA96-96E3-440E-B75B-4A8FB74A81DE}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Jamdetect" GUID="{91DF8895-FF78-4FE2-A695-C10CE4691F43}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Selector" GUID="{0EA103A0-7D37-4BEC-B935-1EA2B9B647C0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Waardes&#13;&#10;&#13;&#10;0:&#13;&#10;Geen klok&#13;&#10;&#13;&#10;5;&#13;&#10;5 Digits klok&#13;&#10;&#13;&#10;6:&#13;&#10;6 Digit klok&#13;&#10;"/>
		<Client Name="fb" Required="true" Internal="false"/>
		<Client Name="rSelector" Required="true" Internal="true"/>
		<Client Name="Ser" Required="true" Internal="false"/>
		<Client Name="strSend" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="Johannes"/>
		<Dokumentation Revision="1.0" Date="2011-09-20" Author="Johannes" Company="JD" Description="-De string van de Tanabeklok wordt hier samengesteld en verstuurd via RS422"/>
	</RevDoku>
	<Network Name="SerSend">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "rSelector"
				GUID       = "{C5629653-F99A-4AF1-B86C-0E47DBB7EEC7}"
				Class      = "Ram"
				Position   = "(210,150)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.rSelector" Destination="rSelector.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
SerSend : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Selector 	: SvrCh_DINT;
	iTotalproduction 	: SvrCh_DINT;
	iCounter 	: SvrCh_DINT;
	iRemaningproduction 	: SvrCh_DINT;
	iCounterPerMin 	: SvrCh_DINT;
	iSpeed 	: SvrCh_DINT;
	Jamdetect 	: SvrCh_DINT;
  //Clients:
	Ser 	: CltChCmd__SerLib;
	fb 	: CltChCmd_FileBase;
	strSend 	: CltChCmd_String;
	rSelector 	: CltChCmd_Ram;
  //Variables:
		Send 	: DINT;
		udBytesSend 	: UDINT;
		tmpStr : ARRAY [0..28] OF CHAR;

		TotalProd : ARRAY [0..5] OF CHAR;

		TotalProdStr 	: DINT;
		offsetTotalProd 	: DINT;
		Counter : ARRAY [0..5] OF CHAR;

		CounterStr 	: DINT;
		offsetCounter 	: DINT;
		RemainProd : ARRAY [0..5] OF CHAR;

		RemainProdStr 	: DINT;
		offsetRemainProd 	: DINT;
		CounterPerMin : ARRAY [0..3] OF CHAR;

		CounterPerMinStr 	: DINT;
		offsetCounterPerMin 	: DINT;
		Speed : ARRAY [0..1] OF CHAR;

		SpeedStr 	: DINT;
		offsetSpeed 	: DINT;
		ReclameStr : ARRAY [0..23] OF CHAR;

		ForI 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION ZesDigits;
	
	FUNCTION JamZesDigits;
	
	FUNCTION VijfDigits;
	
	FUNCTION JamVijfDigits;
	
	FUNCTION VIRTUAL GLOBAL Selector::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iTotalproduction::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Jamdetect::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram
#pragma usingLtd _SerLib
#pragma usingLtd FileBase
#pragma usingLtd String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SerSend::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SERSEND
1$UINT, 0$UINT, (SIZEOF(::SerSend))$UINT, 
8$UINT, 4$UINT, 0$UINT, 
TO_UDINT(582296389), "SerSend", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SerSend.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::SerSend.Selector.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1352760849), "Selector", 
(::SerSend.iTotalproduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2301204702), "iTotalproduction", 
(::SerSend.iCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(821801907), "iCounter", 
(::SerSend.iRemaningproduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2290546486), "iRemaningproduction", 
(::SerSend.iCounterPerMin.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(989026341), "iCounterPerMin", 
(::SerSend.iSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2814718300), "iSpeed", 
(::SerSend.Jamdetect.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3974662731), "Jamdetect", 
//Clients:
(::SerSend.Ser.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2580595299), "Ser", TO_UDINT(4078275645), "_SerLib", 1$UINT, 31$UINT, 
(::SerSend.fb.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2133383872), "fb", TO_UDINT(1689253198), "FileBase", 1$UINT, 0$UINT, 
(::SerSend.strSend.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3930059387), "strSend", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::SerSend.rSelector.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2402212902), "rSelector", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_SerSend 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SerSend] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SerSend::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_SerSend, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Selector.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Selector::Write() );
	IF Selector.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iTotalproduction.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iTotalproduction::Write() );
	IF iTotalproduction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iRemaningproduction.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iRemaningproduction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iCounterPerMin.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iCounterPerMin.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Jamdetect.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Jamdetect::Write() );
	IF Jamdetect.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION



FUNCTION VIRTUAL GLOBAL SerSend::Init

  if _Firstscan then
    

      Ser.StartUser(Baud:=  SERUSERBAUD_9600 
                  , wordl:= 8
                  , Parity:= SERUSERPARITY_NONE 
                  , StopB:= 2
                  , FifoOnOff:=0); 
  
      ser.SetRSMode(Mode:=422);
  

  
      rSelector := rSelector.Read();
      Selector := rSelector;
  
  end_if;



END_FUNCTION







FUNCTION VIRTUAL GLOBAL SerSend::iTotalproduction::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

    iTotalproduction := input;
    
    If  Jamdetect = 0 & Selector = 5 then
        VijfDigits();
    end_if;     
        
    If  Jamdetect = 0 & Selector = 6 then
        ZesDigits();
    end_if;

    result := iTotalproduction;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL SerSend::Jamdetect::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Jamdetect := input;
  
  if  Selector = 5 then
      JamVijfDigits();
  end_if;

  if  Selector = 6 then
      JamZesDigits();
  
  end_if;
  
    
  
 	
  
  result := Jamdetect;

END_FUNCTION

FUNCTION SerSend::VijfDigits

//Naar de tanabe klok worden bij een 5 digit display 26 ascii karakters in een string verstuurd over RS422
//De string zit er als volgt uit:
// karakter 0         2 (STX)
// karakter 1..5     Geproduceerd geteld
// karakter 6..10    Resterende productie
// karakter 11..14    Stuks per minuut
// karakter 15..18    Snelheid in meter per minuut
// karakter 19        32 (spatie)
// karakter 20        13 (CR) 


          //STX karakter
          tmpStr[0] := 2;

          //Resterende productie 5 karakters
          offsetRemainProd += fb.BuildValue2Ascii(Value:=iRemaningproduction, Dest:=#RemainProd[offsetRemainProd], Offset:=0);
          RemainProdStr := to_dint(_strlen(src:=#RemainProd[0]));           
 
 
          if      RemainProdStr = 5 then
                  _strcpy(dest:=#tmpStr[1], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 4 then 
                  _strcpy(dest:=#tmpStr[1], src:=" ");
                  _strcpy(dest:=#tmpStr[2], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 3 then
                  _strcpy(dest:=#tmpStr[1], src:="  ");
                  _strcpy(dest:=#tmpStr[3], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 2 then
                  _strcpy(dest:=#tmpStr[1], src:="   ");          
                  _strcpy(dest:=#tmpStr[4], src:=#RemainProd[0]);  
          
          elsif   RemainProdStr = 1 then
                  _strcpy(dest:=#tmpStr[1], src:="    ");          
                  _strcpy(dest:=#tmpStr[5], src:=#RemainProd[0]);
                       
          else
                  _strcpy(dest:=#tmpStr[1], src:=#RemainProd[RemainProdStr-5]);
          end_if; 





          //Geproduceerd 5 karakters
          offsetCounter += fb.BuildValue2Ascii(Value:=iCounter, Dest:=#Counter[offsetCounter], Offset:=0);
          CounterStr := to_dint(_strlen(src:=#Counter[0])); 
 
          if      CounterStr = 5 then
                  _strcpy(dest:=#tmpStr[6], src:=#Counter[0]);
          
          elsif   CounterStr = 4 then 
                  _strcpy(dest:=#tmpStr[6], src:=" ");
                  _strcpy(dest:=#tmpStr[7], src:=#Counter[0]);
          
          elsif   CounterStr = 3 then
                  _strcpy(dest:=#tmpStr[6], src:="  ");
                  _strcpy(dest:=#tmpStr[8], src:=#Counter[0]);
          
          elsif   CounterStr = 2 then
                  _strcpy(dest:=#tmpStr[6], src:="   ");          
                  _strcpy(dest:=#tmpStr[9], src:=#Counter[0]);  
          
          elsif   CounterStr = 1 then
                  _strcpy(dest:=#tmpStr[6], src:="    ");          
                  _strcpy(dest:=#tmpStr[10], src:=#Counter[0]);
                       
          else
                  _strcpy(dest:=#tmpStr[6], src:=#Counter[CounterStr-5]);
          end_if;          
          
 

 
 
          //Stuks per uur 4 karakters
          
          offsetCounterPerMin += fb.BuildValue2Ascii(Value:=iCounterPerMin, Dest:=#CounterPerMin[offsetCounterPerMin], Offset:=0);
          CounterPerMinStr := to_dint(_strlen(src:=#CounterPerMin[0]));            
 
          if      CounterPerMinStr = 4 then
                  _strcpy(dest:=#tmpStr[11], src:=#CounterPerMin[0]);
          
          elsif   CounterPerMinStr = 3 then
                  _strcpy(dest:=#tmpStr[11], src:=" ");          
                  _strcpy(dest:=#tmpStr[12], src:=#CounterPerMin[0]);  
          
          elsif   CounterPerMinStr = 2 then
                  _strcpy(dest:=#tmpStr[11], src:="  ");          
                  _strcpy(dest:=#tmpStr[13], src:=#CounterPerMin[0]);
                  
          elsif   CounterPerMinStr = 1 then
                  _strcpy(dest:=#tmpStr[11], src:="   ");          
                  _strcpy(dest:=#tmpStr[14], src:=#CounterPerMin[0]);      
          else
                  _strcpy(dest:=#tmpStr[11], src:=#CounterPerMin[CounterPerMinStr-4]);
          end_if;  
 
          //Snelheid m/min 4 karakters
          
          offsetSpeed += fb.BuildValue2Ascii(Value:=iSpeed, Dest:=#Speed[offsetSpeed], Offset:=0);
          SpeedStr := to_dint(_strlen(src:=#Speed[0]));            
 
          if      SpeedStr = 4 then
                  _strcpy(dest:=#tmpStr[15], src:=#Speed[0]);
          
          elsif   SpeedStr = 3 then
                  _strcpy(dest:=#tmpStr[15], src:=" ");          
                  _strcpy(dest:=#tmpStr[16], src:=#Speed[0]);  
          
          elsif   SpeedStr = 2 then
                  _strcpy(dest:=#tmpStr[15], src:="  ");          
                  _strcpy(dest:=#tmpStr[17], src:=#Speed[0]);
                  
          elsif   SpeedStr = 1 then
                  _strcpy(dest:=#tmpStr[15], src:="   ");          
                  _strcpy(dest:=#tmpStr[18], src:=#Speed[0]);      
          else
                  _strcpy(dest:=#tmpStr[15], src:=#Speed[SpeedStr-4]);          
          end_if;
      
          tmpStr[19] := 32;
 
          //CR karakter
          tmpStr[20] := 13;
          
          
          strSend.WriteDataOff(udLen:=_strlen(src:=#tmpstr[0]), udOff:=0, pData:=#tmpStr[0]);
          Ser.SerSend(Buffer:=#tmpStr[0], Bufferlength:=_strlen(src:=#tmpstr[0]), WrLen:=#udBytesSend);

    


          offsetTotalProd := 0;
          offsetCounter   := 0;
          offsetRemainProd :=0;
          offsetCounterPerMin :=0;
          offsetSpeed :=0;



END_FUNCTION


FUNCTION SerSend::JamVijfDigits
          
          
          //STX karakter
          tmpStr[0] := 2;

            for     ForI := 1 to 18 do
                    tmpStr[ForI] := 45;    //ascii 45 is "-"
            
            end_for;

          tmpStr[19] := 32;                //ascii 32 is "spatie"
 
          //CR karakter
          tmpStr[20] := 13;


          strSend.WriteDataOff(udLen:=_strlen(src:=#tmpstr[0]), udOff:=0, pData:=#tmpStr[0]);
          Ser.SerSend(Buffer:=#tmpStr[0], Bufferlength:=_strlen(src:=#tmpstr[0]), WrLen:=#udBytesSend);


END_FUNCTION



FUNCTION SerSend::ZesDigits


//Naar de tanabe klok worden bij een 6 digit display 29 ascii karakters in een string verstuurd over RS422
//De string zit er als volgt uit:
// karakter 0         2 (STX)
// karakter 1..6      Totale productie
// karakter 7..12     Geproduceerd geteld
// karakter 13..18    Resterende productie
// karakter 19..22    Stuks per minuut
// karakter 23..26    Snelheid in meter per minuut
// karakter 27        32 (spatie)
// karakter 28        13 (CR) 


          //STX karakter
          tmpStr[0] := 2;

          //Totale productie 6 karakters
          offsetTotalProd += fb.BuildValue2Ascii(Value:=iTotalproduction, Dest:=#TotalProd[offsetTotalProd], Offset:=0);
          TotalProdStr := to_dint(_strlen(src:=#TotalProd[0])); 

 
          if      TotalProdStr = 6 then
                  _strcpy(dest:=#tmpStr[1], src:=#TotalProd[0]);
          
          elsif   TotalProdStr = 5 then 
                  _strcpy(dest:=#tmpStr[1], src:=" ");
                  _strcpy(dest:=#tmpStr[2], src:=#TotalProd[0]);
          
          elsif   TotalProdStr = 4 then
                  _strcpy(dest:=#tmpStr[1], src:="  ");
                  _strcpy(dest:=#tmpStr[3], src:=#TotalProd[0]);
          
          elsif   TotalProdStr = 3 then
                  _strcpy(dest:=#tmpStr[1], src:="   ");          
                  _strcpy(dest:=#tmpStr[4], src:=#TotalProd[0]);  
          
          elsif   TotalProdStr = 2 then
                  _strcpy(dest:=#tmpStr[1], src:="    ");          
                  _strcpy(dest:=#tmpStr[5], src:=#TotalProd[0]);
                  
          elsif   TotalProdStr = 1 then
                  _strcpy(dest:=#tmpStr[1], src:="     ");          
                  _strcpy(dest:=#tmpStr[6], src:=#TotalProd[0]);      
          else
                  _strcpy(dest:=#tmpStr[1], src:=#TotalProd[TotalProdStr-6]);
          end_if;



          //Geproduceerd 6 karakters
          offsetCounter += fb.BuildValue2Ascii(Value:=iCounter, Dest:=#Counter[offsetCounter], Offset:=0);
          CounterStr := to_dint(_strlen(src:=#Counter[0])); 
 
          if      CounterStr = 6 then
                  _strcpy(dest:=#tmpStr[7], src:=#Counter[0]);
          
          elsif   CounterStr = 5 then 
                  _strcpy(dest:=#tmpStr[7], src:=" ");
                  _strcpy(dest:=#tmpStr[8], src:=#Counter[0]);
          
          elsif   CounterStr = 4 then
                  _strcpy(dest:=#tmpStr[7], src:="  ");
                  _strcpy(dest:=#tmpStr[9], src:=#Counter[0]);
          
          elsif   CounterStr = 3 then
                  _strcpy(dest:=#tmpStr[7], src:="   ");          
                  _strcpy(dest:=#tmpStr[10], src:=#Counter[0]);  
          
          elsif   CounterStr = 2 then
                  _strcpy(dest:=#tmpStr[7], src:="    ");          
                  _strcpy(dest:=#tmpStr[11], src:=#Counter[0]);
                  
          elsif   CounterStr = 1 then
                  _strcpy(dest:=#tmpStr[7], src:="     ");          
                  _strcpy(dest:=#tmpStr[12], src:=#Counter[0]);      
          else
                  _strcpy(dest:=#tmpStr[7], src:=#Counter[CounterStr-6]);
          end_if;          
          
 
          //Resterende productie 6 karakters
          offsetRemainProd += fb.BuildValue2Ascii(Value:=iRemaningproduction, Dest:=#RemainProd[offsetRemainProd], Offset:=0);
          RemainProdStr := to_dint(_strlen(src:=#RemainProd[0]));           
 
 
          if      RemainProdStr = 6 then
                  _strcpy(dest:=#tmpStr[13], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 5 then 
                  _strcpy(dest:=#tmpStr[13], src:=" ");
                  _strcpy(dest:=#tmpStr[14], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 4 then
                  _strcpy(dest:=#tmpStr[13], src:="  ");
                  _strcpy(dest:=#tmpStr[15], src:=#RemainProd[0]);
          
          elsif   RemainProdStr = 3 then
                  _strcpy(dest:=#tmpStr[13], src:="   ");          
                  _strcpy(dest:=#tmpStr[16], src:=#RemainProd[0]);  
          
          elsif   RemainProdStr = 2 then
                  _strcpy(dest:=#tmpStr[13], src:="    ");          
                  _strcpy(dest:=#tmpStr[17], src:=#RemainProd[0]);
                  
          elsif   RemainProdStr = 1 then
                  _strcpy(dest:=#tmpStr[13], src:="     ");          
                  _strcpy(dest:=#tmpStr[18], src:=#RemainProd[0]);      
          else
                  _strcpy(dest:=#tmpStr[13], src:=#RemainProd[RemainProdStr-6]);
          end_if; 
 
 
          //Stuks per uur 4 karakters
          
          offsetCounterPerMin += fb.BuildValue2Ascii(Value:=iCounterPerMin, Dest:=#CounterPerMin[offsetCounterPerMin], Offset:=0);
          CounterPerMinStr := to_dint(_strlen(src:=#CounterPerMin[0]));            
 
          if      CounterPerMinStr = 4 then
                  _strcpy(dest:=#tmpStr[19], src:=#CounterPerMin[0]);
          
          elsif   CounterPerMinStr = 3 then
                  _strcpy(dest:=#tmpStr[19], src:=" ");          
                  _strcpy(dest:=#tmpStr[20], src:=#CounterPerMin[0]);  
          
          elsif   CounterPerMinStr = 2 then
                  _strcpy(dest:=#tmpStr[19], src:="  ");          
                  _strcpy(dest:=#tmpStr[21], src:=#CounterPerMin[0]);
                  
          elsif   CounterPerMinStr = 1 then
                  _strcpy(dest:=#tmpStr[19], src:="   ");          
                  _strcpy(dest:=#tmpStr[22], src:=#CounterPerMin[0]);      
          else
                  _strcpy(dest:=#tmpStr[19], src:=#CounterPerMin[CounterPerMinStr-4]);
          end_if;  
 
          //Snelheid m/min 4 karakters
          
          offsetSpeed += fb.BuildValue2Ascii(Value:=iSpeed, Dest:=#Speed[offsetSpeed], Offset:=0);
          SpeedStr := to_dint(_strlen(src:=#Speed[0]));            
 
          if      SpeedStr = 4 then
                  _strcpy(dest:=#tmpStr[23], src:=#Speed[0]);
          
          elsif   SpeedStr = 3 then
                  _strcpy(dest:=#tmpStr[23], src:=" ");          
                  _strcpy(dest:=#tmpStr[24], src:=#Speed[0]);  
          
          elsif   SpeedStr = 2 then
                  _strcpy(dest:=#tmpStr[23], src:="  ");          
                  _strcpy(dest:=#tmpStr[25], src:=#Speed[0]);
                  
          elsif   SpeedStr = 1 then
                  _strcpy(dest:=#tmpStr[23], src:="   ");          
                  _strcpy(dest:=#tmpStr[26], src:=#Speed[0]);      
          else
                  _strcpy(dest:=#tmpStr[23], src:=#Speed[SpeedStr-4]);          
          end_if;
      
          tmpStr[27] := 32;
 
          //CR karakter
          tmpStr[28] := 13;
          
          
          strSend.WriteDataOff(udLen:=_strlen(src:=#tmpstr[0]), udOff:=0, pData:=#tmpStr[0]);
          Ser.SerSend(Buffer:=#tmpStr[0], Bufferlength:=_strlen(src:=#tmpstr[0]), WrLen:=#udBytesSend);

    


          offsetTotalProd := 0;
          offsetCounter   := 0;
          offsetRemainProd :=0;
          offsetCounterPerMin :=0;
          offsetSpeed :=0;




END_FUNCTION





FUNCTION SerSend::JamZesDigits


          //STX karakter
          tmpStr[0] := 2;

            for     ForI := 1 to 26 do
                    tmpStr[ForI] := 45;
            
            end_for;

          tmpStr[27] := 32;
 
          //CR karakter
          tmpStr[28] := 13;


          strSend.WriteDataOff(udLen:=_strlen(src:=#tmpstr[0]), udOff:=0, pData:=#tmpStr[0]);
          Ser.SerSend(Buffer:=#tmpStr[0], Bufferlength:=_strlen(src:=#tmpstr[0]), WrLen:=#udBytesSend);

END_FUNCTION





FUNCTION VIRTUAL GLOBAL SerSend::Selector::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Selector := input;
 	result := Selector;
  
  rSelector.Write(Selector);

END_FUNCTION
