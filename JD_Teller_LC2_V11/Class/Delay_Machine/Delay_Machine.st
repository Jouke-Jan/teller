//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Delay_Machine"
	Revision           = "1.3"
	GUID               = "{7B94FFEA-7A25-4B6E-9442-681CEBCB94C0}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,300)">
	<Channels>
		<Server Name="ClassSvr" GUID="{EE1CF98C-307C-430D-ADA4-0A1F24B25F9B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="IN" Required="true" Internal="false"/>
		<Client Name="Noodstop" Required="false" Internal="false"/>
		<Client Name="Noodstop_Kast" Required="false" Internal="false"/>
		<Client Name="OUT" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="JVD"/>
		<Dokumentation Revision="1.3" Date="2013-10-25" Author="JVD" Company="JD" Description="init timer ingevoerd van &gt;10s"/>
		<Dokumentation Revision="1.2" Date="2013-07-12" Author="JVD" Company="JD" Description="First scan in init toegevoegd"/>
		<Dokumentation Revision="1.1" Date="2012-11-07" Author="JVD" Company="JD" Description="Verbeterde versie"/>
		<Dokumentation Revision="1.0&#13;&#10;" Date="2012-05-30" Author="JVD" Company="JD" Description="Verbeterde versie"/>
	</RevDoku>
</Class>
*)
Delay_Machine : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	Noodstop 	: CltCh_DINT;
	Noodstop_Kast 	: CltCh_DINT;
	IN 	: CltCh_DINT;
	OUT 	: CltCh_DINT;
  //Variables:
		Timer1 	: UDINT;
		CaseDelayMachine 	: DINT;
		CaseStopMachine 	: DINT;
		Timer2 	: UDINT;
		Timer3 	: UDINT;
		OutOld 	: DINT;
		Opstart 	: DINT;
		initial 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Delay_Machine::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DELAY_MACHINE
1$UINT, 3$UINT, (SIZEOF(::Delay_Machine))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(2456908366), "Delay_Machine", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Delay_Machine.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::Delay_Machine.Noodstop.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(378300424), "Noodstop", 
(::Delay_Machine.Noodstop_Kast.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2263469992), "Noodstop_Kast", 
(::Delay_Machine.IN.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4043737636), "IN", 
(::Delay_Machine.OUT.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(793587475), "OUT", 
END_FUNCTION


#define USER_CNT_Delay_Machine 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Delay_Machine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Delay_Machine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Delay_Machine, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Delay_Machine::Init

  if    _FirstScan then
        OUT := 0;
        Opstart := 0;
        initial := 1;
        Timer1 := ops.tAbsolute;  
  end_if;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL Delay_Machine::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR


    in:= in.Read();
    Noodstop:=Noodstop.Read();
    Noodstop_Kast := Noodstop_Kast.Read();



    if    (ops.tAbsolute - Timer1 > 10500) & Opstart = 0 then
          OutOld := -1;
          Opstart := 1; 
    end_if;
    
    if    Opstart then

          if  Noodstop_Kast = 1 then
              OUT := 1;
              initial := 0;
          else
          
              case  CaseStopMachine of
              0:
                  OUT := 0;
                  if      Noodstop = 1 | initial = 1 then
                          initial := 0;
                          CaseStopMachine := 1;
                  end_if;
              1:  
                  OUT := 0;
                  if      Noodstop = 0 then
                          Timer3 := ops.tAbsolute;  
                          CaseStopMachine := 2;
                  end_if;               
              2:
                  OUT := 0;
                  if      Noodstop = 0 & ops.tAbsolute - Timer3 > 100 then
                          CaseStopMachine := 3;                
                          OUT := 1;
                          Timer2 := ops.tAbsolute;
                  elsif   Noodstop = 1 then
                          CaseStopMachine := 0;    
                  end_if; 
              3:
             
                  if      ops.tAbsolute - Timer2 > 1000 then    //Deze waarde (4000) aanpassen aan gewenste tijd wanneer de machine na een noodstop weer mag draaien.      
                          OUT := 0;
                          CasestopMachine := 0;
                  end_if;
              end_case;

          end_if;
    end_if;          

    if    OutOld <> OUT then
          OutOld := OUT;
          out.Write(input:=out);
    end_if;


	state := READY;

END_FUNCTION



