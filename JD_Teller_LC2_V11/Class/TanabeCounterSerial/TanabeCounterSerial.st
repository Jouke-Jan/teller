//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TanabeCounterSerial"
	Revision           = "1.0"
	GUID               = "{FB1FBC21-1958-418D-B74C-2A084030B26E}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "1 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(872,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{BD5B1ACC-FBEE-4F2D-B1FF-12021BD97F35}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iActualProduction" GUID="{BA0D9BDB-D81A-4080-8BE3-3C3C04620D14}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iBalanceOfProduction" GUID="{2B9506F8-6B7D-4975-8BDE-33297EDDC3B1}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iConveyorSpeed" GUID="{E0751D25-AEA2-4273-B5B5-26CFA12D6269}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iPlannedProduction" GUID="{9CD95D72-509B-4913-A116-057330881D3A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iProductionSpeed" GUID="{4C2441C2-9B31-4C96-B8E2-DABDC9168ACC}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sAangepasteWaarde" GUID="{3EFE9509-9C18-4D58-8B7B-BB4ADB423269}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sBatch" GUID="{870023D8-69FA-40C3-96B8-9A9CFB453126}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sBattingDistance" GUID="{F6535407-CDA2-492A-BD5A-D935898C5F78}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sBattingStart" GUID="{65DE359E-7848-4840-B0AC-98275825D271}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sBoxLength" GUID="{45C3650C-F143-4D35-95A6-9D5E74A3D1EF}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sChangeOfActualQuantity" GUID="{8EA00B0D-FDA1-42EC-AEDA-26082736B9D4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sCheckWrittenData" GUID="{6604E739-7CF2-4002-BC42-0A8919E86D5F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sClearProdData" GUID="{2A54FB1C-EC29-4D75-8747-D528CABA7730}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sDateInput" GUID="{BEC06FE0-F51B-4CD4-8C1A-17DB1EBC2901}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sLotNo" GUID="{012D7094-54AF-4CBF-8610-7A2C94EB3656}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sOperatorName" GUID="{E3AE37B8-99F0-4C0D-9DA1-A8C51F1A0BB1}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sProductionQuantity" GUID="{9E0C8EDF-A955-424A-98F7-7C5A4AE14D06}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sReadAConditionInProgress" GUID="{9466FD35-A8F7-4F3B-8255-4A351EFB9BE0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sReturnNak" GUID="{A0CFE87B-7702-460B-A1DA-40BC51A44F88}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sStartingDistanceToConveyor" GUID="{28DF7B08-9BCB-44C2-A461-A387ACFDB8BF}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sTimeInput" GUID="{2815EBEB-1C50-49CF-9C56-834AE688CD9A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sWriteProductionData" GUID="{65358E30-4C55-4627-A4A9-6676025CE237}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="verklikker" GUID="{818F2DFB-1013-4628-A89D-37F97B43FECD}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Verzenden" GUID="{3207FCEF-A2EB-4157-9023-D52F2E4E4627}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="cBatch1" Required="true" Internal="false"/>
		<Client Name="cBatch2" Required="true" Internal="false"/>
		<Client Name="cBattingDistance" Required="true" Internal="false"/>
		<Client Name="cBattingStart" Required="true" Internal="false"/>
		<Client Name="cBoxLength" Required="true" Internal="false"/>
		<Client Name="cCountedBoxes" Required="true" Internal="false"/>
		<Client Name="cPlannedProduction" Required="true" Internal="false"/>
		<Client Name="cStartingDistanceToConveyorRun" Required="true" Internal="false"/>
		<Client Name="FileBase" Required="true" Internal="false"/>
		<Client Name="GetInfo" Required="true" Internal="false"/>
		<Client Name="RxTx" Required="true" Internal="false"/>
		<Client Name="String" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="SV"/>
		<Dokumentation Revision="1" Date="2014-10-13" Author="SV" Company="JD" Description="Class om serieel (RS232) te communiceren met de hoofdcomputer van Tanabe."/>
	</RevDoku>
</Class>
*)
TanabeCounterSerial : CLASS
	TYPE
#pragma pack(push, 1)
	  TypeW : STRUCT  //! <Type Public="true" Name="TypeW"/>
	    Header : ARRAY [0..3] OF CHAR;
	    DateInput : ARRAY [0..6] OF CHAR;
	    TimeInPut : ARRAY [0..6] OF CHAR;
	    ProductionQuantity : ARRAY [0..6] OF CHAR;
	    BoxLength : ARRAY [0..4] OF CHAR;
	    BattingStart : ARRAY [0..3] OF CHAR;
	    BattingDistance : ARRAY [0..3] OF CHAR;
	    Batch : ARRAY [0..2] OF CHAR;
	    LotNo : ARRAY [0..17] OF CHAR;
	    OperatorName : ARRAY [0..8] OF CHAR;
	    StartingDistanceConveyor : ARRAY [0..4] OF CHAR;
	    AlterationOfActualProduction : ARRAY [0..6] OF CHAR;
	    Terminator : CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	verklikker 	: SvrCh_DINT;
	sReadAConditionInProgress 	: SvrCh_UDINT;
	sWriteProductionData 	: SvrCh_UDINT;
	sCheckWrittenData 	: SvrCh_UDINT;
	sClearProdData 	: SvrCh_UDINT;
	sChangeOfActualQuantity 	: SvrCh_UDINT;
	sReturnNak 	: SvrCh_UDINT;
	iPlannedProduction 	: SvrCh_DINT;
	iBalanceOfProduction 	: SvrCh_DINT;
	iActualProduction 	: SvrCh_DINT;
	iProductionSpeed 	: SvrCh_DINT;
	iConveyorSpeed 	: SvrCh_DINT;
	sDateInput 	: SvrCh_DINT;
	sTimeInput 	: SvrCh_DINT;
	sProductionQuantity 	: SvrCh_DINT;
	sBoxLength 	: SvrCh_DINT;
	sBattingStart 	: SvrCh_DINT;
	sBattingDistance 	: SvrCh_DINT;
	sBatch 	: SvrCh_DINT;
	sLotNo 	: SvrCh_DINT;
	sOperatorName 	: SvrCh_DINT;
	sStartingDistanceToConveyor 	: SvrCh_DINT;
	sAangepasteWaarde 	: SvrCh_DINT;
	Verzenden 	: SvrCh_DINT;
  //Clients:
	GetInfo 	: CltChCmd_TellerClass_Teller;
	RxTx 	: CltChCmd__SerLib;
	String 	: CltChCmd_String;
	FileBase 	: CltChCmd_FileBase;
	cPlannedProduction 	: CltCh_DINT;
	cBoxLength 	: CltCh_DINT;
	cBattingStart 	: CltCh_DINT;
	cBattingDistance 	: CltCh_DINT;
	cBatch1 	: CltCh_DINT;
	cBatch2 	: CltCh_DINT;
	cStartingDistanceToConveyorRun 	: CltCh_DINT;
	cCountedBoxes 	: CltCh_DINT;
  //Variables:
		ReadString1 : ARRAY [0..1] OF CHAR;

		ReadString2 : ARRAY [0..70] OF CHAR;

		SendStringToHost : ARRAY [0..70] OF CHAR;

		In1 : ARRAY [0..70] OF CHAR;

		VerifyData : ARRAY [0..4] OF CHAR;

		ConversieString : ARRAY [0..20] OF CHAR;

		VulString : ARRAY [0..20] OF CHAR;

		ReadAConditionInProgress : ARRAY [0..4] OF CHAR;
			//! <Variable Comment="Read a condition in progress." Name="ReadAConditionInProgress"/>
		ReturnReadAConditionInProgress : ARRAY [0..35] OF CHAR;

		WriteProductionData 	: TypeW;
		ClearProdData : ARRAY [0..4] OF CHAR;

		ChangeOfActualProducedQuantity : ARRAY [0..4] OF CHAR;

		S_ : ARRAY [0..4] OF CHAR;

		ReturnS_ : ARRAY [0..4] OF CHAR;

		rdlenVar 	: UDINT;
		receivedLen 	: UDINT;
		ReadIndex 	: UDINT;
		ClearIndex 	: DINT;
		Index 	: UDINT;
		index2 	: UDINT;
		Poll 	: CHAR;
		TimeMark 	: UDINT;
		Delaytime 	: UDINT;
		Stringlengte 	: UDINT;
		udByteSend 	: UDINT;
		KnopOud 	: DINT;
		In2 	: DINT;
		In3 	: DINT;
		InIndex 	: DINT;
		S_2 : ARRAY [0..3] OF CHAR;

		Timemark2 	: UDINT;
		DelayTime2 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION ClrReadString1_2;
	
	FUNCTION ClrSendStringToHost;
	
	FUNCTION ClrConversie_Vulstring;
	
	FUNCTION ClrIn1;
	
	FUNCTION WriteDataToCounter;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _SerLib
#pragma usingLtd FileBase
#pragma usingLtd String
#pragma usingLtd TellerClass_Teller


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TanabeCounterSerial::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TANABECOUNTERSERIAL
1$UINT, 0$UINT, (SIZEOF(::TanabeCounterSerial))$UINT, 
25$UINT, 12$UINT, 0$UINT, 
TO_UDINT(2685101138), "TanabeCounterSerial", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TanabeCounterSerial.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TanabeCounterSerial.verklikker.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2269301667), "verklikker", 
(::TanabeCounterSerial.sReadAConditionInProgress.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2231500563), "sReadAConditionInProgress", 
(::TanabeCounterSerial.sWriteProductionData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1486966163), "sWriteProductionData", 
(::TanabeCounterSerial.sCheckWrittenData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3437065071), "sCheckWrittenData", 
(::TanabeCounterSerial.sClearProdData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1024437493), "sClearProdData", 
(::TanabeCounterSerial.sChangeOfActualQuantity.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2394281649), "sChangeOfActualQuantity", 
(::TanabeCounterSerial.sReturnNak.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1289310615), "sReturnNak", 
(::TanabeCounterSerial.iPlannedProduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2906558368), "iPlannedProduction", 
(::TanabeCounterSerial.iBalanceOfProduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(465190119), "iBalanceOfProduction", 
(::TanabeCounterSerial.iActualProduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3370193409), "iActualProduction", 
(::TanabeCounterSerial.iProductionSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(580071884), "iProductionSpeed", 
(::TanabeCounterSerial.iConveyorSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1609148902), "iConveyorSpeed", 
(::TanabeCounterSerial.sDateInput.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3065091140), "sDateInput", 
(::TanabeCounterSerial.sTimeInput.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1003623581), "sTimeInput", 
(::TanabeCounterSerial.sProductionQuantity.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3113654315), "sProductionQuantity", 
(::TanabeCounterSerial.sBoxLength.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3775787450), "sBoxLength", 
(::TanabeCounterSerial.sBattingStart.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1902070049), "sBattingStart", 
(::TanabeCounterSerial.sBattingDistance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1839820847), "sBattingDistance", 
(::TanabeCounterSerial.sBatch.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4070947971), "sBatch", 
(::TanabeCounterSerial.sLotNo.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2256576063), "sLotNo", 
(::TanabeCounterSerial.sOperatorName.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1657285351), "sOperatorName", 
(::TanabeCounterSerial.sStartingDistanceToConveyor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3446177763), "sStartingDistanceToConveyor", 
(::TanabeCounterSerial.sAangepasteWaarde.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3993353449), "sAangepasteWaarde", 
(::TanabeCounterSerial.Verzenden.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(524433704), "Verzenden", 
//Clients:
(::TanabeCounterSerial.GetInfo.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1386112418), "GetInfo", TO_UDINT(4092741209), "TellerClass_Teller", 1$UINT, 3$UINT, 
(::TanabeCounterSerial.RxTx.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2575836843), "RxTx", TO_UDINT(4078275645), "_SerLib", 1$UINT, 31$UINT, 
(::TanabeCounterSerial.String.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1850111279), "String", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::TanabeCounterSerial.FileBase.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1689253198), "FileBase", TO_UDINT(1689253198), "FileBase", 1$UINT, 0$UINT, 
(::TanabeCounterSerial.cPlannedProduction.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3216722479), "cPlannedProduction", 
(::TanabeCounterSerial.cBoxLength.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3332599890), "cBoxLength", 
(::TanabeCounterSerial.cBattingStart.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3310940155), "cBattingStart", 
(::TanabeCounterSerial.cBattingDistance.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2341359281), "cBattingDistance", 
(::TanabeCounterSerial.cBatch1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2420180063), "cBatch1", 
(::TanabeCounterSerial.cBatch2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(155735525), "cBatch2", 
(::TanabeCounterSerial.cStartingDistanceToConveyorRun.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4132911151), "cStartingDistanceToConveyorRun", 
(::TanabeCounterSerial.cCountedBoxes.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3942829707), "cCountedBoxes", 
END_FUNCTION


#define USER_CNT_TanabeCounterSerial 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TanabeCounterSerial] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TanabeCounterSerial::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TanabeCounterSerial, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iPlannedProduction.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iPlannedProduction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iBalanceOfProduction.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iBalanceOfProduction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iActualProduction.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iActualProduction.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iProductionSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iProductionSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iConveyorSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iConveyorSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sDateInput.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sDateInput.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTimeInput.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sTimeInput.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sProductionQuantity.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sProductionQuantity.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sBoxLength.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sBoxLength.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sBattingStart.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sBattingStart.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sBattingDistance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sBattingDistance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sBatch.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sBatch.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sLotNo.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sLotNo.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOperatorName.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sOperatorName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sStartingDistanceToConveyor.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sStartingDistanceToConveyor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sAangepasteWaarde.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sAangepasteWaarde.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Verzenden.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Verzenden.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL TanabeCounterSerial::Init
VAR
	i : UDINT;

END_VAR


if _FirstScan then

RxTx.StartUser(Baud:= SERUSERBAUD_9600, wordl:= 8, Parity:= SERUSERPARITY_NONE, StopB:= 1, FifoOnOff:= 0);
RxTx.SetRSMode(Mode:=232);

//Header data van teller opvragen
ReadAConditionInProgress[0] := 2;
ReadAConditionInProgress[1] := 'D';
ReadAConditionInProgress[2] := 'C';
ReadAConditionInProgress[3] := 'R';
ReadAConditionInProgress[4] := 13;

//Header data vanaf hoofdcomputer
WriteProductionData.Header[0] := 2;
WriteProductionData.Header[1] := 'D';
WriteProductionData.Header[2] := 'C';
WriteProductionData.Header[3] := 'W';
WriteProductionData.Terminator:= 13;

//Header aanvraag voor verificatie
VerifyData[0] := 2;
VerifyData[1] := 'D';
VerifyData[2] := 'C';
VerifyData[3] := 'V';
VerifyData[4] := 13;

//Data nullen commando
ClearProdData[0] := 2;
ClearProdData[1] := 'D';
ClearProdData[2] := 'C';
ClearProdData[3] := 'C';
ClearProdData[4] := 13;

//Header change of actul produced quantity
ChangeOfActualProducedQuantity[0] := 2;
ChangeOfActualProducedQuantity[1] := 'D';
ChangeOfActualProducedQuantity[2] := 'C';
ChangeOfActualProducedQuantity[3] := 'A';
ChangeOfActualProducedQuantity[4] := 13;

//Vraag voor NAK 
S_[0] := 2;
S_[1] := 'D';
S_[2] := 'C';
S_[3] := 'S';
S_[4] := 13;

S_2[0] := 2;
S_2[1] := 'D';
S_2[2] := 'C';
S_2[3] := 13;
//S_[4] := 13;


//Antwoord op S_(NAK, ascii 21).
ReturnS_[0] := 2;
ReturnS_[1] := 'D';
ReturnS_[2] := 'C';
ReturnS_[3] := 21;
ReturnS_[4] := 13;


for i := 0 to 20 do 
 VulString[i] := '0';
end_for;

Delaytime := 500; //verklikker
TimeMark := 0;
Delaytime2 := 150; 
TimeMark2 := 0;
end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL TanabeCounterSerial::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

//waarden uit de tellerClass_teller halen die nodig zijn voor DCR
iPlannedProduction := GetInfo.sTotalProduction;
iBalanceOfProduction := GetInfo.sRemainingProduction;
iActualProduction := GetInfo.sCounter;
iProductionSpeed := GetInfo.sCounterPerMin;
iConveyorSpeed := 1;//


//kijken of er data beschikbaar is.
receivedLen := RxTx.GetRecvState();

//als er data is dan:
if receivedLen > 0 then
  //data naar buffer
  RxTx.RecvBlock(Buffer:=#ReadString1[0], rdlength:= receivedLen, rdlen:=#rdlenVar); 
  //copieer data naar string  
  _memcpy(ptr1:=#ReadString2[ReadIndex], ptr2:=#ReadString1[0], cntr:=receivedLen);

  //ReadIndex ophogen
  ReadIndex += receivedLen ;

end_if;


//RETURN READ A CONDITION IN PROGRESS
sReadAConditionInProgress := _memcmp(ptr1:=#ReadString2, ptr2:=#ReadAConditionInProgress, cntr:= _strlen(src:=#ReadAConditionInProgress[0]));

if sReadAConditionInProgress = 0 then

if ops.tAbsolute - Timemark2 > DelayTime2 then
Timemark2 := ops.tAbsolute;
ClrSendStringToHost();

SendStringToHost[0] := 2;
SendStringToHost[1] := 'D';
SendStringToHost[2] := 'C';

FileBase.BuildValue2Ascii(Value:=iPlannedProduction, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[3], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=iBalanceOfProduction, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[9], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=iActualProduction, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[15], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=iProductionSpeed, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[21], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=iConveyorSpeed, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[27], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

SendStringToHost[33] := 13;
Verzenden := 1;

end_if;
end_if;

//WRITE DATA VANAF TANABE
sWriteProductionData := _memcmp(ptr1:=#ReadString2[0], ptr2:=#WriteProductionData.Header, cntr:= 4 );
if sWriteProductionData = 0 then


//sProductionQuantity := 0;
//sBoxLength := 0;
//sBattingStart := 0;
//sBattingDistance := 0;
//sBatch:= 0;
//sLotNo := 0;
//sOperatorName := 0;
//sStartingDistanceToConveyor:= 0;
//sAangepasteWaarde := 0;



_memcpy(ptr1:=#WriteProductionData.DateInput[0], ptr2:=#ReadString2[4], cntr:=6);_memcpy(ptr1:=#WriteProductionData.TimeInPut[0], ptr2:=#ReadString2[10], cntr:=6);
_memcpy(ptr1:=#WriteProductionData.ProductionQuantity[0], ptr2:=#ReadString2[16], cntr:=6);
_memcpy(ptr1:=#WriteProductionData.BoxLength[0], ptr2:=#ReadString2[22], cntr:=4);
_memcpy(ptr1:=#WriteProductionData.BattingStart[0], ptr2:=#ReadString2[26], cntr:=3);
_memcpy(ptr1:=#WriteProductionData.BattingDistance[0], ptr2:=#ReadString2[29], cntr:=3);
_memcpy(ptr1:=#WriteProductionData.Batch[0], ptr2:=#ReadString2[32], cntr:=2);
_memcpy(ptr1:=#WriteProductionData.LotNo[0], ptr2:=#ReadString2[34], cntr:=17);
_memcpy(ptr1:=#WriteProductionData.OperatorName[0], ptr2:=#ReadString2[51], cntr:=8);
_memcpy(ptr1:=#WriteProductionData.StartingDistanceConveyor[0], ptr2:=#ReadString2[59], cntr:=4);

sDateInput :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.DateInput[0]);
sTimeInput :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.TimeInPut[0]);
sProductionQuantity :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.ProductionQuantity[0]);
sBoxLength :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.BoxLength[0]);
sBattingStart := FileBase.ConvAscii2Value(Source:=#WriteProductionData.BattingStart[0]);
sBattingDistance :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.BattingDistance[0]);
sBatch := FileBase.ConvAscii2Value(Source:=#WriteProductionData.Batch[0]);
sLotNo := filebase.ConvAscii2Value(Source:=#WriteProductionData.LotNo[0]);
sOperatorName :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.OperatorName[0]);
sStartingDistanceToConveyor :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.StartingDistanceConveyor[0]);



cPlannedProduction := sProductionQuantity;
cBoxLength := sBoxLength;
cBattingStart := sBattingStart;
cBattingDistance := sBattingDistance;
cBatch1 := sBatch;
cBatch2 := 0;
cStartingDistanceToConveyorRun := sStartingDistanceToConveyor;
cCountedBoxes := 0;

WriteDataToCounter();

end_if;



//VERIFY WRITTEN DATA
sCheckWrittenData := _memcmp(ptr1:=#ReadString2, ptr2:=#VerifyData[0], cntr:=4);
if sCheckWrittenData = 0 then

ClrSendStringToHost();

//ClrOperatorLorNo();

SendStringToHost[0] := 2;
SendStringToHost[1] := 'D';
SendStringToHost[2] := 'C';

FileBase.BuildValue2Ascii(Value:=sDateInput, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[3], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=sTimeInput, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[9], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=sProductionQuantity, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[15], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=sBoxLength, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[21], ptr2:=#VulString[17], cntr:=4);
ClrConversie_Vulstring();

//FileBase.BuildValue2Ascii(Value:=sBattingStart, Dest:=#ConversieString[0], Offset:=0);
//_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
//_memcpy(ptr1:=#SendStringToHost[25], ptr2:=#VulString[18], cntr:=3);
//ClrConversie_Vulstring();

FileBase.BuildValue2Ascii(Value:=sBattingDistance, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[25], ptr2:=#VulString[19], cntr:=2);
ClrConversie_Vulstring();

//FileBase.BuildValue2Ascii(Value:=sBatch, Dest:=#ConversieString[0], Offset:=0);
//_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
//_memcpy(ptr1:=#SendStringToHost[31], ptr2:=#VulString[19], cntr:=2);
//ClrConversie_Vulstring();


FileBase.BuildValue2Ascii(Value:=sLotNo, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[27], ptr2:=#VulString[4], cntr:=17);
ClrConversie_Vulstring();


FileBase.BuildValue2Ascii(Value:=sOperatorName, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[44], ptr2:=#VulString[13], cntr:=8);
ClrConversie_Vulstring();


FileBase.BuildValue2Ascii(Value:=sStartingDistanceToConveyor, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[52], ptr2:=#VulString[17], cntr:=4);
ClrConversie_Vulstring();

//  CHANGE OF ACTUAL VALUE???????
FileBase.BuildValue2Ascii(Value:=sAangepasteWaarde, Dest:=#ConversieString[0], Offset:=0);
_memcpy(ptr1:=#VulString[_strlen(src:=#VulString[0]) - _strlen(src:=#ConversieString[0])], ptr2:=#ConversieString[0], cntr:= _strlen(src:=#ConversieString[0]));
_memcpy(ptr1:=#SendStringToHost[56], ptr2:=#VulString[15], cntr:=6);
ClrConversie_Vulstring();

SendStringToHost[62] := 13;
Verzenden := 1;
end_if;



//CLEAR DATA (DCC)
sClearProdData := _memcmp(ptr1:=#ReadString2, ptr2:=#ClearProdData[0], cntr:= 4 );
if sClearProdData = 0 then
  
  sProductionQuantity := 0;
  sBoxLength := 0;
  sBattingStart := 0;
  sBattingDistance := 0;
  sBatch:= 0;
  sLotNo := 0;
  sOperatorName := 0;
  sStartingDistanceToConveyor:= 0;
  sAangepasteWaarde := 0;
  
cPlannedProduction := sProductionQuantity;
cBoxLength := sBoxLength;
cBattingStart := sBattingStart;
cBattingDistance := sBattingDistance;
cBatch1 := sBatch;
cBatch2 := 0;
cStartingDistanceToConveyorRun := sStartingDistanceToConveyor;
cCountedBoxes := 0;

WriteDataToCounter();





end_if;


//CHANGE OF ACTUAL PRODUCED QUANTITY (DCA)
sChangeOfActualQuantity := _memcmp(ptr1:=#ReadString2[0], ptr2:=#ChangeOfActualProducedQuantity, cntr:= 4 );
if sChangeOfActualQuantity = 0 then
  _memcpy(ptr1:=#WriteProductionData.AlterationOfActualProduction[0], ptr2:=#ReadString2[4], cntr:=6);
  sAangepasteWaarde :=  filebase.ConvAscii2Value(Source:=#WriteProductionData.AlterationOfActualProduction[0]);
end_if;


//RETURN A NEGATIVE ACKNOWLEDGEMENT (NAK)
sReturnNak := _memcmp(ptr1:=#ReadString2[0], ptr2:=#S_, cntr:= _strlen(src:=#S_[0]))| _memcmp(ptr1:=#ReadString2[0], ptr2:=#S_2, cntr:= 3);
if sReturnNak = 0 then
  ClrSendStringToHost();
  _memcpy(ptr1:=#SendStringToHost[0], ptr2:=#ReturnS_[0], cntr:= 5);
  Verzenden := 1;
  // RxTx.SerSend(Buffer:=#SendStringToHost[0], Bufferlength:= _strlen(src:=#ReturnS_[0]), WrLen:=#udByteSend);
end_if;



//kijken of er een 13 (CR) is
Poll := ReadString2[Index];
Index += 1;
  if index >=  _strlen(src:=#ReadString2[0]) then
   Index := 0;
 end_if;

//zo ja, stringen leegmaken.
if Poll = 13 then
ClrIn1();
_memcpy(ptr1:=#In1[0], ptr2:=#ReadString2, cntr:=70);
ClrReadString1_2();
end_if;


//verklikker of er een commando string binnenkomt.
if sReadAConditionInProgress = 0 |    
        sWriteProductionData = 0 |
              sClearProdData = 0 |
                  sReturnNak = 0 |
     sChangeOfActualQuantity = 0 |
           sCheckWrittenData = 0
  
then
  verklikker := 1;
  TimeMark := ops.tAbsolute;
end_if;

if ops.tAbsolute - TimeMark > Delaytime then
  verklikker := 0;
end_if;

if Verzenden = 1 then
  RxTx.SerSend(Buffer:=#SendStringToHost[0], Bufferlength:=_strlen(src:=#SendStringToHost[0]), WrLen:=#udByteSend);
  Verzenden := 0;
end_if;

state := READY;

END_FUNCTION

FUNCTION TanabeCounterSerial::ClrReadString1_2

VAR
	i : UDINT;
  ii : int;
END_VAR

for i := 0 to 65 do
  ReadString2[i] := 0;
end_for;

for ii := 0 to 1 do
  ReadString1[ii] := 0;
end_for;

ReadIndex := 0;

END_FUNCTION

FUNCTION TanabeCounterSerial::ClrSendStringToHost

VAR
	i : int;
END_VAR

for i := 0 to 70 do
  SendStringToHost[i] := 0;
end_for;

END_FUNCTION

FUNCTION TanabeCounterSerial::ClrConversie_Vulstring
VAR
	i : int;
END_VAR

for i := 0 to 20 do
  ConversieString[i] := 0;
  VulString[i]       := '0';
end_for;

END_FUNCTION


FUNCTION TanabeCounterSerial::ClrIn1
VAR
	i : int;
END_VAR

for i := 0 to 65 do
  In1[i] := 0;

end_for;

END_FUNCTION





FUNCTION TanabeCounterSerial::WriteDataToCounter

cPlannedProduction.Write (cPlannedProduction);
cBoxLength.Write (cBoxLength);
cBattingStart.Write (cBattingStart);
cBattingDistance.Write (cBattingDistance);
cBatch1.Write (cBatch1);
cBatch2.Write (cBatch2);
cStartingDistanceToConveyorRun.Write (cStartingDistanceToConveyorRun);
cCountedBoxes.Write (cCountedBoxes);

END_FUNCTION
