//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CIO011_IM"
	Revision           = "2.50"
	GUID               = "{4E0527AF-B0EC-4B55-A338-613973F9710A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\C-DIAS_16x16.ico"
	SharedCommandTable = "true"
	Objectsize         = "(540,2100)"
	Comment            = "class for CIO011 hardwaremodule ( 8 x digital inputs, 8 x digital outputs, 2 x  analog inputs (0-10V), 1 x analog output (+/-10V) ) ">
	<Channels>
		<Server Name="AI1" GUID="{990174D9-B51D-4AB6-AFBB-E73465C9455C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Analog input - input read over the read() function."/>
		<Server Name="AI2" GUID="{26A41C4F-136D-487C-BED4-06609C7BAF46}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Analog input - input read over the read() function."/>
		<Server Name="AO" GUID="{E1DC3B3C-201F-4E56-914A-7E5522E4FC84}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Analog output. Output set over write()."/>
		<Server Name="InputByte" GUID="{CAF8058F-9260-42F0-9FAA-C09CCF21D06C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="The digital inputs are shown in an 8-bit field on this server. "/>
		<Server Name="OutputByte" GUID="{1D6E1329-9C7D-4F54-9FDE-C0B251C02CC8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="In this server the digital outputs are shown in an 8-bit field.&#13;&#10;Set over write()."/>
		<Client Name="AI1_CBias" Required="false" Internal="false" Comment="Negative offset value in one thousandths of the maximum value"/>
		<Client Name="AI1_CInvert" Required="false" Internal="false" Comment="Inverts the corresponding analog input (0: normal, 1: inverted) as initial value."/>
		<Client Name="AI1_CScale" Required="true" Internal="false" Comment="The range of displayed values is set using this client. "/>
		<Client Name="AI1_TypeofChannel" Required="false" Internal="false" Comment="0 = Pot, 1 = Volt (as initvalue)"/>
		<Client Name="AI2_CBias" Required="false" Internal="false" Comment="Negative offset value in one thousandths of the maximum value"/>
		<Client Name="AI2_CInvert" Required="false" Internal="false" Comment="Inverts the corresponding analog input (0: normal, 1: inverted) as initial value."/>
		<Client Name="AI2_CScale" Required="true" Internal="false" Comment="The range of displayed values is set using this client. "/>
		<Client Name="AI2_TypeofChannel" Required="false" Internal="false" Comment="0 = Pot, 1 = Volt (as initvalue)"/>
		<Client Name="AI_RtCy" Required="false" Internal="false" DefValue="1" Comment="0 = cyclic | 1 = realtime updating (as initvalue)"/>
		<Client Name="AO_CBias" Required="false" Internal="false" Comment="Negative offset value in one thousandths of the maximum value"/>
		<Client Name="AO_CInvert" Required="false" Internal="false" Comment="Inverts the analog output(0: normal, 1: inverted) as initvalue"/>
		<Client Name="AO_CScale" Required="true" Internal="false" Comment="The range of output voltage is set using this client."/>
		<Client Name="AO_RtCy" Required="false" Internal="false" DefValue="1" Comment="0 = cyclic | 1 = realtime updating (as initvalue)"/>
		<Client Name="CAICIOAInputChannel0" Required="true" Internal="true"/>
		<Client Name="CAICIOAInputChannel1" Required="true" Internal="true"/>
		<Client Name="CIOOutputChannel0" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="wocpet"/>
		<Dokumentation Revision="2.50" Date="05.12.2013" Author="FucHer&#13;&#10;LanSte" Company="Sigmatek" Description="Changed AWL to Structured Text&#13;&#10;Required and RtCy Clients default Value = 1&#13;&#10;Added payload support"/>
		<Dokumentation Revision="2.40" Date="30.08.2013" Author="EisMic" Company="Sigmatek" Description="Added serial number display"/>
		<Dokumentation Revision="2.30" Date="06.03.2013" Author="BeiWol" Company="Sigmatek" Description="Added functionality to use module optional via define DEACTIVATED_LSL as Place value."/>
		<Dokumentation Revision="2.24" Date="10.09.2012" Author="SeiJan" Company="Sigmatek" Description="Connect the Analog Server with their Input Channels, to see the value on the HW Class without using a Read Methode"/>
		<Dokumentation Revision="2.23" Date="17.07.2012" Author="ObeChr" Company="Sigmatek" Description="Added special Mode for CDIAS: Both analog Inputs can be converted in one Cycle&#13;&#10;Implemented time measurement for internal tests in methods UpdateRt, UpdateRtPostScan and UpdateCy"/>
		<Dokumentation Revision="2.22" Date="22.07.2010" Author="WocPet / RamAnd" Company="Sigmatek" Description="Changes in base class: new client &quot;Required&quot; added.&#13;&#10;Corrected that OutputByte couldn&apos;t be read back."/>
		<Dokumentation Revision="2.21" Date="08.07.2010" Author="wocpet" Company="Sigmatek" Description="Change in base class: Write protection from server &quot;Counter1&quot; , &quot;Counter2&quot; and &quot;Encoder&quot; removed&#13;&#10;Change in network structure, AI2 could have displayed the value from AI1"/>
		<Dokumentation Revision="2.20" Date="15.06.2010" Author="wocpet" Company="Sigmatek" Description="Class was re-created by derivation of the new base class: CIO0xx,&#13;&#10;changes in direct access handling for CIO016"/>
	</RevDoku>
	<Network Name="CIO011_IM">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{209B1D3F-4271-418A-B08F-5032E8A4DCD1}"
				Class      = "CIO0xx"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Counter1"/>
					<Server Name="Counter2"/>
					<Server Name="Encoder"/>
					<Server Name="Input1"/>
					<Server Name="Input2"/>
					<Server Name="Input3"/>
					<Server Name="Input4"/>
					<Server Name="Input5"/>
					<Server Name="Input6"/>
					<Server Name="Input7"/>
					<Server Name="Input8"/>
					<Server Name="Input_Byte"/>
					<Server Name="Output1"/>
					<Server Name="Output2"/>
					<Server Name="Output3"/>
					<Server Name="Output4"/>
					<Server Name="Output5"/>
					<Server Name="Output6"/>
					<Server Name="Output7"/>
					<Server Name="Output8"/>
					<Server Name="Output_Byte"/>
					<Server Name="SerialNo"/>
					<Server Name="State"/>
					<Server Name="VoltageOkV1"/>
					<Server Name="VoltageOkV2"/>
					<Client Name="AIx_RtCy"/>
					<Client Name="AnalogMode"/>
					<Client Name="AOx_RtCy"/>
					<Client Name="CounterMode1and2"/>
					<Client Name="Input3IRQMode" Value="0"/>
					<Client Name="InvertInput1"/>
					<Client Name="InvertInput2"/>
					<Client Name="InvertInput3"/>
					<Client Name="InvertInput4"/>
					<Client Name="InvertInput5"/>
					<Client Name="InvertInput6"/>
					<Client Name="InvertInput7"/>
					<Client Name="InvertInput8"/>
					<Client Name="InvertOutput1"/>
					<Client Name="InvertOutput2"/>
					<Client Name="InvertOutput3"/>
					<Client Name="InvertOutput4"/>
					<Client Name="InvertOutput5"/>
					<Client Name="InvertOutput6"/>
					<Client Name="InvertOutput7"/>
					<Client Name="InvertOutput8"/>
					<Client Name="IRQWrite"/>
					<Client Name="MasterConnect"/>
					<Client Name="Place"/>
					<Client Name="Required"/>
					<Client Name="RtCyInputs"/>
					<Client Name="RtCyOutputs"/>
				</Channels>
			</Object>
			<Object
				Name       = "CAICIOAInputChannel0"
				GUID       = "{3273B16B-FE0C-4215-A11E-27DB996EAD2F}"
				Class      = "CAICIOAInputChannel"
				Position   = "(360,1740)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Server Name="State"/>
					<Client Name="CBias"/>
					<Client Name="channel" Value="0"/>
					<Client Name="CInvert"/>
					<Client Name="connectc"/>
					<Client Name="CScale" Value="10000"/>
					<Client Name="CyRt" Value="1"/>
					<Client Name="Neg"/>
					<Client Name="TypeofChannel"/>
				</Channels>
			</Object>
			<Object
				Name       = "CAICIOAInputChannel1"
				GUID       = "{593D814F-51BB-4E6C-9698-F3A78A85C87B}"
				Class      = "CAICIOAInputChannel"
				Position   = "(360,2340)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Server Name="State"/>
					<Client Name="CBias"/>
					<Client Name="channel" Value="1"/>
					<Client Name="CInvert"/>
					<Client Name="connectc"/>
					<Client Name="CScale" Value="10000"/>
					<Client Name="CyRt" Value="1"/>
					<Client Name="Neg"/>
					<Client Name="TypeofChannel"/>
				</Channels>
			</Object>
			<Object
				Name       = "CIOOutputChannel0"
				GUID       = "{D916B65F-E459-456F-A3E4-57C87F3269F3}"
				Class      = "CIOOutputChannel"
				Position   = "(360,2970)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Server Name="State"/>
					<Client Name="CBias"/>
					<Client Name="CInvert"/>
					<Client Name="Connect"/>
					<Client Name="CScale" Value="10000"/>
					<Client Name="TypeOfChannel"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(976,210),(804,210),"/>
			<Connection Source="this.Input1" Destination="_base.Input1" Vertices="(976,330),(804,330),"/>
			<Connection Source="this.Input2" Destination="_base.Input2" Vertices="(976,390),(804,390),"/>
			<Connection Source="this.Input3" Destination="_base.Input3" Vertices="(976,450),(804,450),"/>
			<Connection Source="this.Input4" Destination="_base.Input4" Vertices="(976,510),(804,510),"/>
			<Connection Source="this.Input5" Destination="_base.Input5" Vertices="(976,570),(804,570),"/>
			<Connection Source="this.Input6" Destination="_base.Input6" Vertices="(976,630),(804,630),"/>
			<Connection Source="this.Input7" Destination="_base.Input7" Vertices="(976,690),(804,690),"/>
			<Connection Source="this.Input8" Destination="_base.Input8" Vertices="(976,750),(804,750),"/>
			<Connection Source="this.Output1" Destination="_base.Output1" Vertices="(976,810),(804,810),"/>
			<Connection Source="this.Output2" Destination="_base.Output2" Vertices="(976,870),(804,870),"/>
			<Connection Source="this.Output3" Destination="_base.Output3" Vertices="(976,930),(804,930),"/>
			<Connection Source="this.Output4" Destination="_base.Output4" Vertices="(976,990),(804,990),"/>
			<Connection Source="this.Output5" Destination="_base.Output5" Vertices="(976,1050),(804,1050),"/>
			<Connection Source="this.Output6" Destination="_base.Output6" Vertices="(976,1110),(804,1110),"/>
			<Connection Source="this.Output7" Destination="_base.Output7" Vertices="(976,1170),(804,1170),"/>
			<Connection Source="this.Output8" Destination="_base.Output8" Vertices="(976,1230),(804,1230),"/>
			<Connection Source="this.VoltageOkV1" Destination="_base.VoltageOkV1" Vertices="(976,1290),(804,1290),"/>
			<Connection Source="this.VoltageOkV2" Destination="_base.VoltageOkV2" Vertices="(976,1350),(804,1350),"/>
			<Connection Source="this.Counter1" Destination="_base.Counter1" Vertices="(976,1410),(804,1410),"/>
			<Connection Source="this.Counter2" Destination="_base.Counter2" Vertices="(976,1470),(804,1470),"/>
			<Connection Source="this.Encoder" Destination="_base.Encoder" Vertices="(976,1530),(804,1530),"/>
			<Connection Source="this.CAICIOAInputChannel0" Destination="CAICIOAInputChannel0.Data"/>
			<Connection Source="this.CAICIOAInputChannel1" Destination="CAICIOAInputChannel1.Data"/>
			<Connection Source="_base.MasterConnect" Destination="this.MasterConnect" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.RtCyInputs" Destination="this.RtCyInputs" Vertices="(218,390),(38,390),"/>
			<Connection Source="_base.InvertInput1" Destination="this.InvertInput1" Vertices="(218,450),(38,450),"/>
			<Connection Source="_base.InvertInput2" Destination="this.InvertInput2" Vertices="(218,510),(38,510),"/>
			<Connection Source="_base.InvertInput3" Destination="this.InvertInput3" Vertices="(218,570),(38,570),"/>
			<Connection Source="_base.InvertInput4" Destination="this.InvertInput4" Vertices="(218,630),(38,630),"/>
			<Connection Source="_base.InvertInput5" Destination="this.InvertInput5" Vertices="(218,690),(38,690),"/>
			<Connection Source="_base.InvertInput6" Destination="this.InvertInput6" Vertices="(218,750),(38,750),"/>
			<Connection Source="_base.InvertInput7" Destination="this.InvertInput7" Vertices="(218,810),(38,810),"/>
			<Connection Source="_base.InvertInput8" Destination="this.InvertInput8" Vertices="(218,870),(38,870),"/>
			<Connection Source="_base.RtCyOutputs" Destination="this.RtCyOutputs" Vertices="(218,930),(38,930),"/>
			<Connection Source="_base.InvertOutput1" Destination="this.InvertOutput1" Vertices="(218,990),(38,990),"/>
			<Connection Source="_base.InvertOutput2" Destination="this.InvertOutput2" Vertices="(218,1050),(38,1050),"/>
			<Connection Source="_base.InvertOutput3" Destination="this.InvertOutput3" Vertices="(218,1110),(38,1110),"/>
			<Connection Source="_base.InvertOutput4" Destination="this.InvertOutput4" Vertices="(218,1170),(38,1170),"/>
			<Connection Source="_base.InvertOutput5" Destination="this.InvertOutput5" Vertices="(218,1230),(38,1230),"/>
			<Connection Source="_base.InvertOutput6" Destination="this.InvertOutput6" Vertices="(218,1290),(38,1290),"/>
			<Connection Source="_base.InvertOutput7" Destination="this.InvertOutput7" Vertices="(218,1350),(38,1350),"/>
			<Connection Source="_base.InvertOutput8" Destination="this.InvertOutput8" Vertices="(218,1410),(38,1410),"/>
			<Connection Source="_base.Input3IRQMode" Destination="this.Input3IRQMode" Vertices="(218,1470),(38,1470),"/>
			<Connection Source="_base.IRQWrite" Destination="this.IRQWrite" Vertices="(218,1530),(38,1530),"/>
			<Connection Source="_base.CounterMode1and2" Destination="this.CounterMode1and2" Vertices="(218,1590),(38,1590),"/>
			<Connection Source="this.CIOOutputChannel0" Destination="CIOOutputChannel0.Data"/>
			<Connection Source="CAICIOAInputChannel0.connectc" Destination="_base.State" Vertices="(360,2190),(300,2190),(300,1710),(810,1710),(804,210),"/>
			<Connection Source="CAICIOAInputChannel1.connectc" Destination="_base.State" Vertices="(360,2790),(330,2790),(300,2790),(300,1710),(810,1710),(804,210),"/>
			<Connection Source="CIOOutputChannel0.Connect" Destination="_base.State" Vertices="(360,3060),(300,3060),(300,1710),(810,1710),(804,210),"/>
			<Connection Source="CAICIOAInputChannel0.CyRt" Destination="this.AI_RtCy" Vertices="(360,1950),(38,1710),"/>
			<Connection Source="CAICIOAInputChannel1.CyRt" Destination="this.AI_RtCy" Vertices="(360,2550),(38,1710),"/>
			<Connection Source="CAICIOAInputChannel0.TypeofChannel" Destination="this.AI1_TypeofChannel" Vertices="(360,1890),(38,1770),"/>
			<Connection Source="CAICIOAInputChannel0.CScale" Destination="this.AI1_CScale" Vertices="(360,2010),(38,1830),"/>
			<Connection Source="CAICIOAInputChannel0.CInvert" Destination="this.AI1_CInvert" Vertices="(360,2130),(38,1950),"/>
			<Connection Source="CAICIOAInputChannel1.TypeofChannel" Destination="this.AI2_TypeofChannel" Vertices="(360,2490),(38,2010),"/>
			<Connection Source="CAICIOAInputChannel1.CScale" Destination="this.AI2_CScale" Vertices="(360,2610),(38,2070),"/>
			<Connection Source="CAICIOAInputChannel1.CBias" Destination="this.AI2_CBias" Vertices="(360,2670),(38,2130),"/>
			<Connection Source="CIOOutputChannel0.CScale" Destination="this.AO_CScale" Vertices="(360,3120),(38,2310),"/>
			<Connection Source="CIOOutputChannel0.CBias" Destination="this.AO_CBias" Vertices="(360,3180),(38,2370),"/>
			<Connection Source="CIOOutputChannel0.CInvert" Destination="this.AO_CInvert" Vertices="(360,3240),(38,2430),"/>
			<Connection Source="CAICIOAInputChannel1.CInvert" Destination="this.AI2_CInvert" Vertices="(360,2730),(38,2190),"/>
			<Connection Source="CAICIOAInputChannel0.CBias" Destination="this.AI1_CBias" Vertices="(360,2070),(38,1890),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,330),(38,330),"/>
			<Connection Source="_base.AnalogMode" Destination="this.AnalogMode" Vertices="(218,1770),(38,1650),"/>
			<Connection Source="this.AI1" Destination="CAICIOAInputChannel0.Data" Vertices="(976,1710),(660,1830),"/>
			<Connection Source="this.AI2" Destination="CAICIOAInputChannel1.Data" Vertices="(976,1770),(660,2430),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(976,270),(804,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using CIO0xx

CIO011_IM : CLASS
: CIO0xx
  //Servers:
	AI1 	: SvrChCmd_DINT;
	AI2 	: SvrChCmd_DINT;
	AO 	: SvrChCmd_DINT;
	InputByte 	: SvrCh_HDINT;
	OutputByte 	: SvrCh_HDINT;
  //Clients:
	CAICIOAInputChannel0 	: CltChCmd_CAICIOAInputChannel;
	CAICIOAInputChannel1 	: CltChCmd_CAICIOAInputChannel;
	CIOOutputChannel0 	: CltChCmd_CIOOutputChannel;
	AI_RtCy 	: CltCh_DINT;
	AI1_TypeofChannel 	: CltCh_DINT;
	AI1_CScale 	: CltCh_DINT;
	AI1_CBias 	: CltCh_DINT;
	AI1_CInvert 	: CltCh_DINT;
	AI2_TypeofChannel 	: CltCh_DINT;
	AI2_CScale 	: CltCh_DINT;
	AI2_CBias 	: CltCh_DINT;
	AI2_CInvert 	: CltCh_DINT;
	AO_RtCy 	: CltCh_DINT;
	AO_CScale 	: CltCh_DINT;
	AO_CBias 	: CltCh_DINT;
	AO_CInvert 	: CltCh_DINT;
  //Variables:
		NotReadyCounter 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL UpDataCY
		VAR_INPUT
			Handle 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UpDateRT
		VAR_INPUT
			Handle 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CheckVariante
		VAR_OUTPUT
			ok 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UpdateAIs;
	
	FUNCTION VIRTUAL GLOBAL UpdateAOs;
	
	FUNCTION VIRTUAL GLOBAL ReCallFactory;
	
	FUNCTION VIRTUAL GLOBAL AI1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AI2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AO::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InputByte::Read
		VAR_OUTPUT
			output (EAX) 	: HDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL OutputByte::Read
		VAR_OUTPUT
			output (EAX) 	: HDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL OutputByte::Write
		VAR_INPUT
			input (EAX) 	: HDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: HDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using CAICIOAInputChannel
#pragma using CIOOutputChannel


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CIO011_IM::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_CIO011_IM
2$UINT, 50$UINT, (SIZEOF(::CIO011_IM))$UINT, 
5$UINT, 16$UINT, 0$UINT, 
TO_UDINT(454909577), "CIO011_IM", //Class
TO_UDINT(2636333112), "CIO0xx", 2$UINT, 40$UINT, //Baseclass
//Servers:
(::CIO011_IM.AI1.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(4269591187), "AI1", 
(::CIO011_IM.AI2.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1735760681), "AI2", 
(::CIO011_IM.AO.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1322791098), "AO", 
(::CIO011_IM.InputByte.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2419834899), "InputByte", 
(::CIO011_IM.OutputByte.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1569094752), "OutputByte", 
//Clients:
(::CIO011_IM.CAICIOAInputChannel0.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2637558801), "CAICIOAInputChannel0", TO_UDINT(3907636883), "CAICIOAInputChannel", 2$UINT, 20$UINT, 
(::CIO011_IM.CAICIOAInputChannel1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3929195655), "CAICIOAInputChannel1", TO_UDINT(3907636883), "CAICIOAInputChannel", 2$UINT, 20$UINT, 
(::CIO011_IM.CIOOutputChannel0.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(439564348), "CIOOutputChannel0", TO_UDINT(3867554050), "CIOOutputChannel", 2$UINT, 20$UINT, 
(::CIO011_IM.AI_RtCy.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(777393886), "AI_RtCy", 
(::CIO011_IM.AI1_TypeofChannel.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(1644963417), "AI1_TypeofChannel", 
(::CIO011_IM.AI1_CScale.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(684004322), "AI1_CScale", 
(::CIO011_IM.AI1_CBias.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2700850306), "AI1_CBias", 
(::CIO011_IM.AI1_CInvert.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(1835600212), "AI1_CInvert", 
(::CIO011_IM.AI2_TypeofChannel.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(1936804896), "AI2_TypeofChannel", 
(::CIO011_IM.AI2_CScale.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(2789872641), "AI2_CScale", 
(::CIO011_IM.AI2_CBias.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2433986079), "AI2_CBias", 
(::CIO011_IM.AI2_CInvert.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(1424242065), "AI2_CInvert", 
(::CIO011_IM.AO_RtCy.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4161795523), "AO_RtCy", 
(::CIO011_IM.AO_CScale.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(1580999198), "AO_CScale", 
(::CIO011_IM.AO_CBias.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2240534722), "AO_CBias", 
(::CIO011_IM.AO_CInvert.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(3641986642), "AO_CInvert", 
END_FUNCTION


#define USER_CNT_CIO011_IM 30

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CIO011_IM] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CIO011_IM::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= CIO0xx::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HwBaseCDIAS::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HwBaseCDIAS::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_CIO011_IM;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #UpDataCY();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #UpDateRT();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[24]		:= #CheckVariante();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[27]		:= #UpdateAIs();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[28]		:= #UpdateAOs();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[29]		:= #ReCallFactory();

#pragma warning (default : 74)
	HwBaseCDIAS::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HwBaseCDIAS::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, AI1.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #AI1::Read();
	AI1.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF AI1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, AI2.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #AI2::Read();
	AI2.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF AI2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, AO.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #AO::Write();
	AO.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF AO.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InputByte.pMeth			:= StoreMethod( #InputByte::Read(), #M_NO_F() );
	IF InputByte.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OutputByte.pMeth			:= StoreMethod( #OutputByte::Read(), #OutputByte::Write() );
	IF OutputByte.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#define CIO_DA_WAITTIME 20  //wait time for ai after DA - because of mux


FUNCTION VIRTUAL GLOBAL CIO011_IM::Init

//============================ Profiler start======================================================
#ifdef DM_Profiler 
  InitTimeMeasurement(usMode := DMTIME_RT);
  InitTimeMeasurement(usMode := DMTIME_CY);
#endif
//============================ Profiler end========================================================

#ifdef DEACTIVATED_LSL
  IF Place.Read() = DEACTIVATED_LSL THEN
		State.uiIO_Flags := 0;
    State.uiIO_Flags.NoHW := 1;
		State.uiIO_Flags.PhysicAccessOff := 1;
    return;
  END_IF;
#endif
 
 if FirstScan = 0 then
  
    //readout scanmode for analog channels
    if AI_RtCy.Read() then
      AI_RtCy := AIx_RtCy := true;
    end_if;
    if AO_RtCy.Read() then
      AO_RtCy := AOx_RtCy := true;
    end_if;
    
    NotReadyCounter := CIO_DA_WAITTIME;
    
  end_if; 
  
  //Read Settings for analoge Mode
  AnalogMode := AnalogMode.Read();
  
  //call init from base class
  CIO0xx::Init();

  //correct clients in case of base class
  AI_RtCy := AIx_RtCy;
  AO_RtCy := AOx_RtCy;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::UpDataCY
	VAR_INPUT
		Handle 	: UDINT;
	END_VAR

//============================ Profiler start======================================================
#ifdef  DM_Profiler								
  StartTimeMeasurement(usMode := DMTIME_CY);
#endif	
//============================ Profiler end========================================================

  if ( State.uiIO_Flags and CIO0xx_Errormask ) = 0 then
  
    //update server
     InputByte := Input_Byte;
    
    //call methode from base class
     CIO0xx::UpDataCY(Handle);
    
    //update AI Server
    if NotReadyCounter < CIO_DA_WAITTIME then
      NotReadyCounter += 1;
    else
      AI2 := CAICIOAInputChannel1.Data;
      AI1 := CAICIOAInputChannel0.Data;
    end_if; 
    

  else  
    CIOOutputChannel0.SetStateOff();
  end_if;

//============================ Profiler start======================================================
#ifdef  DM_Profiler								
  StopTimeMeasurement(usMode := DMTIME_CY);
#endif	
//============================ Profiler end========================================================

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::UpDateRT
	VAR_INPUT
		Handle 	: UDINT;
	END_VAR

//============================ Profiler start======================================================
#ifdef  DM_Profiler								
  StartTimeMeasurement(usMode := DMTIME_RT);
#endif	
//============================ Profiler end========================================================

  if ( State.uiIO_Flags and CIO0xx_Errormask ) = 0 then
  
    //update server
    InputByte := Input_Byte;

    //call methode from base class
    CIO0xx::UpDateRT(Handle);
    
    //update AI Server
    if NotReadyCounter < CIO_DA_WAITTIME then
      NotReadyCounter += 1;
    else
      AI2 := CAICIOAInputChannel1.Data;
      AI1 := CAICIOAInputChannel0.Data;
    end_if;
    
    
  else  
    CIOOutputChannel0.SetStateOff();
  end_if;  

//============================ Profiler start======================================================
#ifdef  DM_Profiler								
  StopTimeMeasurement(usMode := DMTIME_RT);
#endif	
//============================ Profiler end========================================================

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::CheckVariante
	VAR_OUTPUT
		ok 	: BOOL;
	END_VAR

  if GetVariante() = ID_CIO011 then
    ok := true;
  else
    ok := false;
  end_if;  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::UpdateAIs

  if AnalogMode then
    CAICIOAInputChannel0.UpdateRt(0);
    CAICIOAInputChannel1.UpdateRt(0);
  else
   if AIChannel = 0 then
      CAICIOAInputChannel0.UpdateRt(0);
    else  
      CAICIOAInputChannel1.UpdateRt(0);
    end_if;  
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::UpdateAOs
 
 CIOOutputChannel0.UpdateCy(0);

END_FUNCTION



FUNCTION VIRTUAL GLOBAL CIO011_IM::AI1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  if NotReadyCounter = CIO_DA_WAITTIME then
    AI1 := CAICIOAInputChannel0.Data.Read();
  end_if;
  
	output := AI1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::AI2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  if NotReadyCounter = CIO_DA_WAITTIME then
    AI2 := CAICIOAInputChannel1.Data.Read();
  end_if;  
	output := AI2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::AO::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	AO := input;
 	result := (CIOOutputChannel0.Data.Write(AO))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::OutputByte::Write
	VAR_INPUT
		input (EAX) 	: HDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: HDINT;
	END_VAR

  result := OutputByte := Output_Byte.Write(input);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::InputByte::Read
	VAR_OUTPUT
		output (EAX) 	: HDINT;
	END_VAR

	output := InputByte := Input_Byte;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::ReCallFactory

  CAICIOAInputChannel0.ReCallFactory();
  CAICIOAInputChannel1.ReCallFactory();
  CIOOutputChannel0.ReCallFactory();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL CIO011_IM::OutputByte::Read
	VAR_OUTPUT
		output (EAX) 	: HDINT;
	END_VAR

	output := OutputByte := Output_Byte.Read();

END_FUNCTION
