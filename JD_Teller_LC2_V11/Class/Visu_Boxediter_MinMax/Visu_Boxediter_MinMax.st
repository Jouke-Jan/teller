//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Visu_Boxediter_MinMax"
	Revision           = "1.2"
	GUID               = "{B47B2DAD-0666-4CA0-ABC5-19E3322D2FC0}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(750,1320)">
	<Channels>
		<Server Name="ClassSvr" GUID="{0ED51CAF-2BF1-43BA-B20C-2C9D1249EED0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_BoxMogelijkopMachine" GUID="{8A4008E8-331D-40A8-9839-0CB5591A78B7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_BoxType" GUID="{F15B397D-D5FC-4D07-B2FA-1D3A283B72F2}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Doosnaam" GUID="{F4ECFA24-EA4B-45FE-A6E0-214FA9DD3989}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_MaxLength" GUID="{6D2BBFAF-EE78-4F8E-995E-67AC1D0E06F6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MaxWidth" GUID="{2AD21F1C-EF07-4CD0-ADD8-2B0FE713A4EE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Offset_Max" GUID="{7CD63271-02DA-4AD7-9471-A0F7E533FB47}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Offset_Min" GUID="{AAEE9A94-FD61-4275-A288-F31015E348EF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Refresh_Values" GUID="{BB0DBFBC-78F7-4137-B4A3-8B0CBC1344F5}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_T_Max" GUID="{5DB3E192-334C-4764-8391-9A1FEF8A78E0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_T_Min" GUID="{9FDF62FB-BD54-4B38-978A-E8D5237606BA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_U_Max" GUID="{AF425DD5-7152-4E08-BEE7-BF795BE41EA8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_U_Min" GUID="{0694DB5B-4A61-4DF0-AA75-728BCF80B5AD}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_V_Max" GUID="{EB8BB34B-2AFB-43C6-B90B-F2FAA1A2455D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_V_Min" GUID="{838699D5-B58B-47C9-A731-A7EE48748574}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_W_Max" GUID="{4D41F80A-7F5A-4E25-8F40-7A2ABC6C224B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_W_Min" GUID="{91175F88-29BD-4CF8-AA29-F8C410252354}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_X_Max" GUID="{6133F171-E9C3-4A80-B207-0F0B5A45BAF6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_X_Min" GUID="{544AF9B5-7DD6-4991-B29F-18808C4281E0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Y_Max" GUID="{4DAC1813-E5E7-4769-AD47-58A3CFC95425}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Y_Min" GUID="{DC4B2427-AFD0-462C-BC89-2D1AA381F96F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Z_Max" GUID="{64BC3A35-B066-4683-A8F7-91047D141FD3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Z_Min" GUID="{23D21767-9B85-4148-AAA2-05ACF5F43398}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="c_Boxtype" Required="false" Internal="false"/>
		<Client Name="c_DoosData" Required="true" Internal="false"/>
		<Client Name="c_Refresh_Values" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="J van Diggelen"/>
		<Dokumentation Revision="1.2" Date="2014-04-29" Author="J van Diggelen" Company="JD" Description="doos 14 toegevoegd"/>
		<Dokumentation Revision="1.1" Date="2013-09-21" Author="J van Diggelen" Company="JD" Description="input warning opgelost"/>
		<Dokumentation Revision="1.0" Date="2011-12-06" Author="J van Diggelen" Company="JD" Description="De Visuwaarde van de Service settings van de boxeditor"/>
	</RevDoku>
</Class>
*)
Visu_Boxediter_MinMax : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	s_Doosnaam 	: SvrCh_tDoosnaam;
	s_BoxType 	: SvrCh_DINT;
	s_BoxMogelijkopMachine 	: SvrCh_DINT;
	s_MaxLength 	: SvrCh_DINT;
	s_MaxWidth 	: SvrCh_DINT;
	s_T_Max 	: SvrCh_DINT;
	s_T_Min 	: SvrCh_DINT;
	s_U_Max 	: SvrCh_DINT;
	s_U_Min 	: SvrCh_DINT;
	s_V_Max 	: SvrCh_DINT;
	s_V_Min 	: SvrCh_DINT;
	s_W_Max 	: SvrCh_DINT;
	s_W_Min 	: SvrCh_DINT;
	s_X_Max 	: SvrCh_DINT;
	s_X_Min 	: SvrCh_DINT;
	s_Y_Max 	: SvrCh_DINT;
	s_Y_Min 	: SvrCh_DINT;
	s_Z_Max 	: SvrCh_DINT;
	s_Z_Min 	: SvrCh_DINT;
	s_Offset_Max 	: SvrCh_DINT;
	s_Offset_Min 	: SvrCh_DINT;
	s_Refresh_Values 	: SvrCh_DINT;
  //Clients:
	c_DoosData 	: CltChCmd_RAMex;
	c_Boxtype 	: CltCh_DINT;
	c_Refresh_Values 	: CltCh_DINT;
  //Variables:
		DoosData 	: ^tDoosParameters;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_BoxType::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_BoxMogelijkopMachine::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_MaxLength::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_MaxWidth::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_T_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_T_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_U_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_U_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_V_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_V_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_W_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_W_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_X_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_X_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Y_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Y_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Z_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Z_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Offset_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Offset_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Refresh_Values::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RAMex


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Visu_Boxediter_MinMax::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_VISU_BOXEDITER_MINMAX
1$UINT, 2$UINT, (SIZEOF(::Visu_Boxediter_MinMax))$UINT, 
23$UINT, 3$UINT, 0$UINT, 
TO_UDINT(1443008127), "Visu_Boxediter_MinMax", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Visu_Boxediter_MinMax.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Visu_Boxediter_MinMax.s_Doosnaam.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1777833007), "s_Doosnaam", 
(::Visu_Boxediter_MinMax.s_BoxType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2670114069), "s_BoxType", 
(::Visu_Boxediter_MinMax.s_BoxMogelijkopMachine.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(869001277), "s_BoxMogelijkopMachine", 
(::Visu_Boxediter_MinMax.s_MaxLength.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1481879144), "s_MaxLength", 
(::Visu_Boxediter_MinMax.s_MaxWidth.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(286754931), "s_MaxWidth", 
(::Visu_Boxediter_MinMax.s_T_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3638843800), "s_T_Max", 
(::Visu_Boxediter_MinMax.s_T_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3840501441), "s_T_Min", 
(::Visu_Boxediter_MinMax.s_U_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3850661928), "s_U_Max", 
(::Visu_Boxediter_MinMax.s_U_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3649654641), "s_U_Min", 
(::Visu_Boxediter_MinMax.s_V_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2720271096), "s_V_Max", 
(::Visu_Boxediter_MinMax.s_V_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2653500833), "s_V_Min", 
(::Visu_Boxediter_MinMax.s_W_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2672042824), "s_W_Max", 
(::Visu_Boxediter_MinMax.s_W_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2739477521), "s_W_Min", 
(::Visu_Boxediter_MinMax.s_X_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(487896217), "s_X_Max", 
(::Visu_Boxediter_MinMax.s_X_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(555322304), "s_X_Min", 
(::Visu_Boxediter_MinMax.s_Y_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(544513321), "s_Y_Max", 
(::Visu_Boxediter_MinMax.s_Y_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(477733488), "s_Y_Min", 
(::Visu_Boxediter_MinMax.s_Z_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1742006265), "s_Z_Max", 
(::Visu_Boxediter_MinMax.s_Z_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1541003424), "s_Z_Min", 
(::Visu_Boxediter_MinMax.s_Offset_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(293088672), "s_Offset_Max", 
(::Visu_Boxediter_MinMax.s_Offset_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(762647289), "s_Offset_Min", 
(::Visu_Boxediter_MinMax.s_Refresh_Values.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(692359299), "s_Refresh_Values", 
//Clients:
(::Visu_Boxediter_MinMax.c_DoosData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(535256988), "c_DoosData", TO_UDINT(933570811), "RAMex", 1$UINT, 16$UINT, 
(::Visu_Boxediter_MinMax.c_Boxtype.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(870774628), "c_Boxtype", 
(::Visu_Boxediter_MinMax.c_Refresh_Values.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3479416349), "c_Refresh_Values", 
END_FUNCTION


#define USER_CNT_Visu_Boxediter_MinMax 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Visu_Boxediter_MinMax] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Visu_Boxediter_MinMax::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Visu_Boxediter_MinMax, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_BoxType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_BoxType::Write() );
	IF s_BoxType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_BoxMogelijkopMachine.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_BoxMogelijkopMachine::Write() );
	IF s_BoxMogelijkopMachine.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MaxLength.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_MaxLength::Write() );
	IF s_MaxLength.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MaxWidth.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_MaxWidth::Write() );
	IF s_MaxWidth.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_T_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_T_Max::Write() );
	IF s_T_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_T_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_T_Min::Write() );
	IF s_T_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_U_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_U_Max::Write() );
	IF s_U_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_U_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_U_Min::Write() );
	IF s_U_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_V_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_V_Max::Write() );
	IF s_V_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_V_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_V_Min::Write() );
	IF s_V_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_W_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_W_Max::Write() );
	IF s_W_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_W_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_W_Min::Write() );
	IF s_W_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_X_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_X_Max::Write() );
	IF s_X_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_X_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_X_Min::Write() );
	IF s_X_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Y_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Y_Max::Write() );
	IF s_Y_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Y_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Y_Min::Write() );
	IF s_Y_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Z_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Z_Max::Write() );
	IF s_Z_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Z_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Z_Min::Write() );
	IF s_Z_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Offset_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Offset_Max::Write() );
	IF s_Offset_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Offset_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Offset_Min::Write() );
	IF s_Offset_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Refresh_Values.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Refresh_Values::Write() );
	IF s_Refresh_Values.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//Er is in de pointer variabele doosdata een array structuur gemaakt om bij elk type doos de minimale en maximale
//waardes in een service scherm te veranderen. 







FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::Init

  if c_DoosData.GetSize() <> sizeof(tDoosParameters) then
     c_DoosData.SetSize(udSize:=sizeof(tDoosParameters));
  end_if;
          
  if _FirstScan = 1 then
            
     DoosData := (c_DoosData.GetDataPtr())$^tDoosParameters;
     s_BoxType := c_Boxtype;
     s_BoxType.Write(s_BoxType);

  end_if;
 

END_FUNCTION



FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR



	state := READY;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_BoxType::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_BoxType := input;
  
  // doostype moet tussen 1 en 14 liggen
  if    s_BoxType <1 then
        s_BoxType :=1;
  elsif s_BoxType >14 then
        s_BoxType :=14;
  end_if;

 	result := s_BoxType;

  
  //Doostype
  if     s_BoxType = 1 then
         s_Doosnaam := Langsnaad;
  elsif  s_BoxType = 2 then 
         s_Doosnaam := Driepunt;  
  elsif  s_BoxType = 3 then 
         s_Doosnaam := Driepunt_Vakverdeling;  
  elsif  s_BoxType = 4 then 
         s_Doosnaam := Vierpunt_Infold;  
  elsif  s_BoxType = 5 then 
         s_Doosnaam := Vierpunt_Outfold;  
  elsif  s_BoxType = 6 then 
         s_Doosnaam := Vierpunt_Deksel;        
  elsif  s_BoxType = 7 then 
         s_Doosnaam := Vierpunt_Dubbele_Wand;  
  elsif  s_BoxType = 8 then 
         s_Doosnaam := Zespunt_In_In;  
  elsif  s_BoxType = 9 then 
         s_Doosnaam := Zespunt_In_Out;           
  elsif  s_BoxType = 10 then 
         s_Doosnaam := Zespunt_In_In_Gespiegeld;  
  elsif  s_BoxType = 11 then 
         s_Doosnaam := Driepunt_Gespiegeld;
  elsif  s_BoxType = 12 then 
         s_Doosnaam := Driepunt;         
  elsif  s_BoxType = 13 then 
         s_Doosnaam := Langsnaad2;    
  elsif  s_BoxType = 14 then 
         s_Doosnaam := Driepunt2;               
  end_if;
  
  //Serverwaardes schrijven met variabelen voor type doos 
  
  s_MaxLength := DoosData^.MinMax[s_BoxType].Max_Invoer_Lengte;
  s_MaxWidth  := DoosData^.MinMax[s_BoxType].Max_Invoer_Breedte;
  s_BoxMogelijkopMachine := DoosData^.MinMax[s_BoxType].BoxMogelijk; 
  s_T_Max     := DoosData^.MinMax[s_BoxType].T_Max;
  s_T_Min     := DoosData^.MinMax[s_BoxType].T_Min;
  s_U_Max     := DoosData^.MinMax[s_BoxType].U_Max;
  s_U_Min     := DoosData^.MinMax[s_BoxType].U_Min;
  s_V_Min     := DoosData^.MinMax[s_BoxType].V_Min;
  s_V_Max     := DoosData^.MinMax[s_BoxType].V_Max;
  s_W_Max     := DoosData^.MinMax[s_BoxType].W_Max;
  s_W_Min     := DoosData^.MinMax[s_BoxType].W_Min;
  s_X_Max     := DoosData^.MinMax[s_BoxType].X_Max;
  s_X_Min     := DoosData^.MinMax[s_BoxType].X_Min;
  s_Y_Max     := DoosData^.MinMax[s_BoxType].Y_Max;
  s_Y_Min     := DoosData^.MinMax[s_BoxType].Y_Min;
  s_Z_Max     := DoosData^.MinMax[s_BoxType].Z_Max;
  s_Z_Min     := DoosData^.MinMax[s_BoxType].Z_Min;
  s_Offset_Max:= DoosData^.MinMax[s_BoxType].Offset_Max;
  s_Offset_Min:= DoosData^.MinMax[s_BoxType].Offset_Min;




END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_BoxMogelijkopMachine::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR


  s_BoxMogelijkopMachine := input;
  DoosData^.MinMax[s_BoxType].BoxMogelijk := to_bool(s_BoxMogelijkopMachine);
  c_Refresh_Values.Write(input:=1);
  result := s_BoxMogelijkopMachine;


END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_MaxLength::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_MaxLength := input;
  DoosData^.MinMax[s_BoxType].Max_Invoer_Lengte := s_MaxLength;
  c_Refresh_Values.Write(input:=1);
 	result := s_MaxLength;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_MaxWidth::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_MaxWidth := input; 
  DoosData^.MinMax[s_BoxType].Max_Invoer_Breedte := s_MaxWidth;
  c_Refresh_Values.Write(input:=1);
 	result := s_MaxWidth;

END_FUNCTION







FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_T_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_T_Max := input;
  DoosData^.MinMax[s_BoxType].T_Max:= s_T_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_T_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_T_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_T_Min := input;
  DoosData^.MinMax[s_BoxType].T_Min:= s_T_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_T_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_U_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_U_Max := input;
  DoosData^.MinMax[s_BoxType].U_Max:=s_U_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_U_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_U_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_U_Min := input;
  DoosData^.MinMax[s_BoxType].U_Min:= s_U_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_U_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_V_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_V_Max := input;
  DoosData^.MinMax[s_BoxType].V_Max:=s_V_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_V_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_V_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_V_Min := input;
  DoosData^.MinMax[s_BoxType].V_Min:=s_V_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_V_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_W_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_W_Max := input;
  DoosData^.MinMax[s_BoxType].W_Max:=s_W_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_W_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_W_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_W_Min := input;
  DoosData^.MinMax[s_BoxType].W_Min:=s_W_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_W_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_X_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_X_Max := input;
  DoosData^.MinMax[s_BoxType].X_Max:=s_X_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_X_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_X_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_X_Min := input;
  DoosData^.MinMax[s_BoxType].X_Min:=s_X_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_X_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Y_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Y_Max := input;
  DoosData^.MinMax[s_BoxType].Y_Max:=s_Y_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_Y_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Y_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Y_Min := input;
  DoosData^.MinMax[s_BoxType].Y_Min:= s_Y_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_Y_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Z_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Z_Max := input;
  DoosData^.MinMax[s_BoxType].Z_Max:= s_Z_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_Z_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Z_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Z_Min := input;
  DoosData^.MinMax[s_BoxType].Z_Min:= s_Z_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_Z_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Offset_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Offset_Max := input;
  DoosData^.MinMax[s_BoxType].Offset_Max:= s_Offset_Max;
  c_Refresh_Values.Write(input:=1);
 	result := s_Offset_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Offset_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Offset_Min := input;
  DoosData^.MinMax[s_BoxType].Offset_Min:= s_Offset_Min;
  c_Refresh_Values.Write(input:=1);
 	result := s_Offset_Min;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL Visu_Boxediter_MinMax::s_Refresh_Values::Write

	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Refresh_Values := input;
  s_Refresh_Values := 0;
  s_BoxType.Write(s_BoxType);
 	result := s_Refresh_Values;


END_FUNCTION
