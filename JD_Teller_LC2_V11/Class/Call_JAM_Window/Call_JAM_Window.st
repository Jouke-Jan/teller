//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Call_JAM_Window"
	Revision           = "1.0"
	GUID               = "{45CB54F5-852D-40C9-85D3-EE1F7B67D42A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(630,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{B8F16E78-0E3E-472E-AC02-E089F8157A85}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD"/>
		<Dokumentation Revision="1.0" Date="2014-10-29" Author="SV" Company="JD" Description=" SV client cJamLSE voor het tonen van het reset window in lse"/>
	</RevDoku>
</Class>
*)
Call_JAM_Window : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Call_JAM_Window::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CALL_JAM_WINDOW
1$UINT, 0$UINT, (SIZEOF(::Call_JAM_Window))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3293687312), "Call_JAM_Window", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Call_JAM_Window.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_Call_JAM_Window 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Call_JAM_Window] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Call_JAM_Window::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Call_JAM_Window, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Call_JAM_Window::ClassSvr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  VAR
  	tmpno : udint;
    myList : _ANYLST;
  END_VAR

	ClassSvr := input;
  myList := FUNCTIONLST;
   
  case ClassSvr of
  
    // 0 : tmpno := get_no_by_label(p0:="Functienaam_in_LSE", x1:=myList, x2:=0);
    0 : tmpno := get_no_by_label(p0:="scr_Back", x1:=myList, x2:=0);

    1 : tmpno := get_no_by_label(p0:="wnd_JAMRESET", x1:=myList, x2:=0);
 
  end_case;
  
  if tmpno <> DEFSCOPE then
    InsertCmd(x0:=CMD_FUNCTIONBLOCK, x1:=tmpno$dint, x2:=0);
  end_if;
 	result := ClassSvr;

END_FUNCTION
