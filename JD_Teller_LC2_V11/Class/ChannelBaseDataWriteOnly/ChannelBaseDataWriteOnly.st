//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ChannelBaseDataWriteOnly"
	Revision           = "1.0"
	GUID               = "{60CAC449-C887-4856-AA4B-B427C805E2DB}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Tool.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="BleErn"/>
		<Dokumentation Revision="1.0" Date="04.03.2010" Author="BleErn" Company="Sigmatek" Description="New Base Class for Input/Output-Channel-Classes"/>
	</RevDoku>
	<Network Name="ChannelBaseDataWriteOnly">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{D8BDD77A-705D-43B9-8134-75F0FB948104}"
				Class      = "ChannelBaseData"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Data" Destination="_base.Data" Vertices="(690,210),(518,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using ChannelBaseData

ChannelBaseDataWriteOnly : CLASS
: ChannelBaseData
  //Servers:
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL UpDateRt
		VAR_INPUT
			Handle 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ChannelBaseDataWriteOnly::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_CHANNELBASEDATAWRITEONLY
1$UINT, 0$UINT, (SIZEOF(::ChannelBaseDataWriteOnly))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3340137983), "ChannelBaseDataWriteOnly", //Class
TO_UDINT(706219532), "ChannelBaseData", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_ChannelBaseDataWriteOnly 3

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ChannelBaseDataWriteOnly] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ChannelBaseDataWriteOnly::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= ChannelBaseData::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= ChannelBaseData::Data.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, ChannelBaseData::Data.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ChannelBaseDataWriteOnly;
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #UpDateRt();

#pragma warning (default : 74)
	ChannelBaseData::Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ChannelBaseData::Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

#pragma warning(disable: 73 )
FUNCTION VIRTUAL GLOBAL ChannelBaseDataWriteOnly::UpDateRt
	VAR_INPUT
		Handle 	: DINT;
	END_VAR

END_FUNCTION
#pragma warning(default: 73 )