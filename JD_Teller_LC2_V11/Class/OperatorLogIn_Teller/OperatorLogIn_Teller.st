//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "OperatorLogIn_Teller"
	Revision           = "1.0"
	GUID               = "{B81460FB-1355-4AA1-9AD4-C397E303E6D6}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,120)">
	<Channels>
		<Server Name="Aktie" GUID="{509ABE32-455C-4F10-B5FC-3AF39EC1A169}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="1 //File creeren&#13;&#10;2 //File overschrijven&#13;&#10;3 //File deleten"/>
		<Server Name="ClassSvr" GUID="{F4034914-AE2D-46F9-957D-1F8E3FAF7449}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogInOK" GUID="{8241A362-E835-485E-A93A-BF4198C12E50}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogOut" GUID="{AE1C6E9E-0FBB-43A5-8578-DA028E7F2AB9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Operator_Select" GUID="{FD9BE972-261B-414F-A906-E6CD5915DA97}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Keuze tussen operator 1..10"/>
		<Server Name="SaveData" GUID="{31419786-213D-4B24-AFDD-CEE9807BE050}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Mocht de operatornaam + wachtwoorden gewijzigd worden,&#13;&#10;kan met deze knop de data worden opgeslagen in een file.&#13;&#10;&#13;&#10;Bij de init wordt deze file geladen"/>
		<Server Name="sOp01_Name" GUID="{AFCC9AC7-F9A0-411D-8EE8-BFB9065B2A21}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp01_WW" GUID="{8019432B-CD6C-4CE4-B589-DE255E9681EC}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp02_Name" GUID="{A1BD98E7-7D28-44F6-99A0-7964DA7D11D7}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp02_WW" GUID="{B6C14E49-AD08-45E1-8AE9-0F191428B3F9}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp03_Name" GUID="{5BA756F3-DD37-4FE0-9BB9-6C482D91835E}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp03_WW" GUID="{D12DF53D-8DC2-4229-AD9B-20462C392BF8}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp04_Name" GUID="{E0503427-09C0-42FB-9515-22268840270D}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp04_WW" GUID="{20B8A33E-3C2D-4D88-BEA6-58FCECFF1230}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp05_Name" GUID="{8A4D4DC5-B3E3-48F6-88AF-69C11DF6D439}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp05_WW" GUID="{AC4E3EA1-0EDC-4246-9259-46CDD99B20F0}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp06_Name" GUID="{7D09C2CD-EAD2-4E6E-9BB4-D37A73AC6107}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp06_WW" GUID="{94C98F6A-2AC3-4405-8EA6-D3812AA29995}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp07_Name" GUID="{69980BDA-BABF-4EAE-BCB9-B8BC165BA86C}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp07_WW" GUID="{C3D700F8-398D-41B2-BD6B-62F1065FA8CA}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp08_Name" GUID="{EAFC4C77-6394-4D55-ADCA-DFBAA6F46405}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp08_WW" GUID="{90305404-9AF5-463B-A689-EDCCFEF8396F}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp09_Name" GUID="{92CDEC8B-DBD2-4DB8-8437-DF3DE2D4845A}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp09_WW" GUID="{8781AA91-2FAD-4D26-97C4-1A0B1BAFEB65}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp10_Name" GUID="{42706C34-4FE0-4309-BBB3-27755B29E4C8}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOp10_WW" GUID="{98B9F06E-5CA6-41E3-A5ED-15364B71B52A}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sOperator_Selected" GUID="{5F492E95-2207-4278-9411-DEB54D1EEC28}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sWW_Invoer" GUID="{D8335697-04B5-44D6-B335-380B6300BEDA}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="TaskOnOff" GUID="{937DBF3C-6019-4A01-830A-A8BFC2FF7ACD}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Client Name="ASCII_BIN1" Required="true" Internal="true"/>
		<Client Name="c_NewFileString" Required="true" Internal="false"/>
		<Client Name="c_SelectedFileString" Required="true" Internal="false"/>
		<Client Name="c_StringPath" Required="true" Internal="false"/>
		<Client Name="c_SysDateTime" Required="true" Internal="false"/>
		<Client Name="inlogNiveau" Required="true" Internal="false"/>
		<Client Name="objLoadSaveData" Required="true" Internal="false"/>
		<Client Name="Op01_Name" Required="true" Internal="true"/>
		<Client Name="Op01_WW" Required="true" Internal="true"/>
		<Client Name="Op02_Name" Required="true" Internal="true"/>
		<Client Name="Op02_WW" Required="true" Internal="true"/>
		<Client Name="Op03_Name" Required="true" Internal="true"/>
		<Client Name="Op03_WW" Required="true" Internal="true"/>
		<Client Name="Op04_Name" Required="true" Internal="true"/>
		<Client Name="Op04_WW" Required="true" Internal="true"/>
		<Client Name="Op05_Name" Required="true" Internal="true"/>
		<Client Name="Op05_WW" Required="true" Internal="true"/>
		<Client Name="Op06_Name" Required="true" Internal="true"/>
		<Client Name="Op06_WW" Required="true" Internal="true"/>
		<Client Name="Op07_Name" Required="true" Internal="true"/>
		<Client Name="Op07_WW" Required="true" Internal="true"/>
		<Client Name="Op08_Name" Required="true" Internal="true"/>
		<Client Name="Op08_WW" Required="true" Internal="true"/>
		<Client Name="Op09_Name" Required="true" Internal="true"/>
		<Client Name="Op09_WW" Required="true" Internal="true"/>
		<Client Name="Op10_Name" Required="true" Internal="true"/>
		<Client Name="Op10_WW" Required="true" Internal="true"/>
		<Client Name="Operator_Selected" Required="true" Internal="true"/>
		<Client Name="WW_Invoer" Required="true" Internal="true"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\OperatorLogIn_Teller\OPLogin_edit.vov"/>
			<File Path=".\Class\OperatorLogIn_Teller\OPLogin_select.vov"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="JD" Author="SV"/>
		<Dokumentation Revision="1.0" Date="2014-09-24" Description="Kopie van OperatorLogin. TaskOnOff server is gevisualiseert. Server TaskOnOff retentive gemaakt."/>
	</RevDoku>
	<Network Name="OperatorLogIn_Teller">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "ASCII_BIN1"
				GUID       = "{2251DDE6-7F49-4227-9B1E-9B1EBE0E83E4}"
				Class      = "ASCII_BIN"
				Position   = "(210,660)"
				Visualized = "true">
				<Channels>
					<Server Name="Obj_channel"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op01_Name"
				GUID       = "{73570E97-80A2-443D-94B0-87AEAF051441}"
				Class      = "String"
				Position   = "(300,840)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op01_WW"
				GUID       = "{B20BDC21-B8AC-4D6A-B36E-CD1AA9ABA646}"
				Class      = "String"
				Position   = "(300,1020)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op02_Name"
				GUID       = "{4A278B75-1C42-40C6-9FCA-925FA4BB2F22}"
				Class      = "String"
				Position   = "(300,1230)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op02_WW"
				GUID       = "{84B6DD85-445E-48D9-A57B-AFC04C863C08}"
				Class      = "String"
				Position   = "(300,1410)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op03_Name"
				GUID       = "{62A2D8C5-C9D9-4DB5-899E-D63C266923B9}"
				Class      = "String"
				Position   = "(300,1590)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op03_WW"
				GUID       = "{05D8C40A-7BE5-4E23-94FC-A869269C593A}"
				Class      = "String"
				Position   = "(300,1770)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op04_Name"
				GUID       = "{4B537F23-BF55-4942-94B9-5F96DA637AB4}"
				Class      = "String"
				Position   = "(300,1980)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op04_WW"
				GUID       = "{131620E3-E9A2-4E34-95C9-F0F43FFEC6C2}"
				Class      = "String"
				Position   = "(300,2160)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op05_Name"
				GUID       = "{90822863-763B-49B1-9024-E88C98074652}"
				Class      = "String"
				Position   = "(300,2340)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op05_WW"
				GUID       = "{8FCA2F3E-E520-4A36-B4BB-84C269A78D67}"
				Class      = "String"
				Position   = "(300,2520)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op06_Name"
				GUID       = "{79A044AE-D88F-4DF3-BD8C-E8A67D29376A}"
				Class      = "String"
				Position   = "(300,2730)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op06_WW"
				GUID       = "{3EE1223D-C5AF-4992-8C35-2B35E5EB10DC}"
				Class      = "String"
				Position   = "(300,2910)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op07_Name"
				GUID       = "{2ECF7311-DF43-44B7-A384-3DACA3C9F9D5}"
				Class      = "String"
				Position   = "(300,3090)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op07_WW"
				GUID       = "{FB5B7D12-FF0C-44AA-A884-37E1F5C1E1FA}"
				Class      = "String"
				Position   = "(300,3270)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op08_Name"
				GUID       = "{CEF0193D-4FDD-48B4-8F84-74056F942F40}"
				Class      = "String"
				Position   = "(300,3480)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op08_WW"
				GUID       = "{F6E6E617-1ED2-4382-ADBF-EFCF788CEE86}"
				Class      = "String"
				Position   = "(300,3660)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op09_Name"
				GUID       = "{13F04DF7-3979-4653-88A1-9DC433F11699}"
				Class      = "String"
				Position   = "(300,3840)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op09_WW"
				GUID       = "{54045246-FE93-4125-A24B-0E3996E0041D}"
				Class      = "String"
				Position   = "(300,4020)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op10_Name"
				GUID       = "{D1A5A68C-4FA4-4822-8C93-9AF48C849F38}"
				Class      = "String"
				Position   = "(300,4230)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Op10_WW"
				GUID       = "{735476A2-36FF-4B56-B343-70105FBE60AD}"
				Class      = "String"
				Position   = "(300,4410)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "Operator_Selected"
				GUID       = "{C600FBEB-4EC6-4F92-B649-98C76320163B}"
				Class      = "String"
				Position   = "(300,270)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "WW_Invoer"
				GUID       = "{F3919FB3-87C9-4378-B70A-55C1E2C79BC5}"
				Class      = "String"
				Position   = "(300,450)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Op01_Name" Destination="Op01_Name.Data"/>
			<Connection Source="this.Op01_WW" Destination="Op01_WW.Data"/>
			<Connection Source="this.sOp01_Name" Destination="Op01_Name.Data" Vertices="(788,750),(616,930),"/>
			<Connection Source="this.sOp01_WW" Destination="Op01_WW.Data" Vertices="(788,810),(616,1110),"/>
			<Connection Source="this.Op02_Name" Destination="Op02_Name.Data"/>
			<Connection Source="this.Op02_WW" Destination="Op02_WW.Data"/>
			<Connection Source="this.Op04_WW" Destination="Op04_WW.Data"/>
			<Connection Source="this.Op04_Name" Destination="Op04_Name.Data"/>
			<Connection Source="this.Op03_Name" Destination="Op03_Name.Data"/>
			<Connection Source="this.Op03_WW" Destination="Op03_WW.Data"/>
			<Connection Source="this.sOp02_Name" Destination="Op02_Name.Data" Vertices="(788,870),(616,1320),"/>
			<Connection Source="this.sOp02_WW" Destination="Op02_WW.Data" Vertices="(788,930),(616,1500),"/>
			<Connection Source="this.sOp03_Name" Destination="Op03_Name.Data" Vertices="(788,990),(616,1680),"/>
			<Connection Source="this.sOp03_WW" Destination="Op03_WW.Data" Vertices="(788,1050),(616,1860),"/>
			<Connection Source="this.sOp04_Name" Destination="Op04_Name.Data" Vertices="(788,1110),(616,2070),"/>
			<Connection Source="this.sOp04_WW" Destination="Op04_WW.Data" Vertices="(788,1170),(616,2250),"/>
			<Connection Source="this.Op06_Name" Destination="Op06_Name.Data"/>
			<Connection Source="this.Op07_Name" Destination="Op07_Name.Data"/>
			<Connection Source="this.Op05_Name" Destination="Op05_Name.Data"/>
			<Connection Source="this.Op07_WW" Destination="Op07_WW.Data"/>
			<Connection Source="this.Op06_WW" Destination="Op06_WW.Data"/>
			<Connection Source="this.Op08_Name" Destination="Op08_Name.Data"/>
			<Connection Source="this.Op08_WW" Destination="Op08_WW.Data"/>
			<Connection Source="this.Op05_WW" Destination="Op05_WW.Data"/>
			<Connection Source="this.Op09_Name" Destination="Op09_Name.Data"/>
			<Connection Source="this.Op10_WW" Destination="Op10_WW.Data"/>
			<Connection Source="this.Op09_WW" Destination="Op09_WW.Data"/>
			<Connection Source="this.Op10_Name" Destination="Op10_Name.Data"/>
			<Connection Source="this.sOp05_Name" Destination="Op05_Name.Data" Vertices="(788,1230),(616,2430),"/>
			<Connection Source="this.sOp05_WW" Destination="Op05_WW.Data" Vertices="(788,1290),(616,2610),"/>
			<Connection Source="this.sOp06_Name" Destination="Op06_Name.Data" Vertices="(788,1350),(616,2820),"/>
			<Connection Source="this.sOp06_WW" Destination="Op06_WW.Data" Vertices="(788,1410),(616,3000),"/>
			<Connection Source="this.sOp07_Name" Destination="Op07_Name.Data" Vertices="(788,1470),(616,3180),"/>
			<Connection Source="this.sOp07_WW" Destination="Op07_WW.Data" Vertices="(788,1530),(616,3360),"/>
			<Connection Source="this.sOp08_Name" Destination="Op08_Name.Data" Vertices="(788,1590),(616,3570),"/>
			<Connection Source="this.sOp08_WW" Destination="Op08_WW.Data" Vertices="(788,1650),(616,3750),"/>
			<Connection Source="this.sOp09_Name" Destination="Op09_Name.Data" Vertices="(788,1710),(616,3930),"/>
			<Connection Source="this.sOp09_WW" Destination="Op09_WW.Data" Vertices="(788,1770),(616,4110),"/>
			<Connection Source="this.sOp10_Name" Destination="Op10_Name.Data" Vertices="(788,1830),(616,4320),"/>
			<Connection Source="this.sOp10_WW" Destination="Op10_WW.Data" Vertices="(788,1890),(616,4500),"/>
			<Connection Source="this.WW_Invoer" Destination="WW_Invoer.Data"/>
			<Connection Source="this.Operator_Selected" Destination="Operator_Selected.Data"/>
			<Connection Source="this.sOperator_Selected" Destination="Operator_Selected.Data" Vertices="(788,390),(616,360),"/>
			<Connection Source="this.sWW_Invoer" Destination="WW_Invoer.Data" Vertices="(788,450),(616,540),"/>
			<Connection Source="this.ASCII_BIN1" Destination="ASCII_BIN1.Obj_channel"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
OperatorLogIn_Teller : CLASS
	TYPE
	  tString : ARRAY [0..255] OF CHAR;
#pragma pack(push, 1)
	  tOperator : STRUCT
	    OpName : tString;
	    OpWW : tString;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tOperatorLogin : STRUCT
	    OpData : ARRAY [0..9] OF tOperator;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	TaskOnOff 	: SvrCh_DINT;
	Operator_Select 	: SvrCh_DINT;
	sOperator_Selected 	: SvrCh_UDINT;
	sWW_Invoer 	: SvrCh_UDINT;
	LogInOK 	: SvrCh_DINT;
	LogOut 	: SvrCh_DINT;
	Aktie 	: SvrCh_DINT;
	SaveData 	: SvrCh_DINT;
	sOp01_Name 	: SvrCh_UDINT;
	sOp01_WW 	: SvrCh_UDINT;
	sOp02_Name 	: SvrCh_UDINT;
	sOp02_WW 	: SvrCh_UDINT;
	sOp03_Name 	: SvrCh_UDINT;
	sOp03_WW 	: SvrCh_UDINT;
	sOp04_Name 	: SvrCh_UDINT;
	sOp04_WW 	: SvrCh_UDINT;
	sOp05_Name 	: SvrCh_UDINT;
	sOp05_WW 	: SvrCh_UDINT;
	sOp06_Name 	: SvrCh_UDINT;
	sOp06_WW 	: SvrCh_UDINT;
	sOp07_Name 	: SvrCh_UDINT;
	sOp07_WW 	: SvrCh_UDINT;
	sOp08_Name 	: SvrCh_UDINT;
	sOp08_WW 	: SvrCh_UDINT;
	sOp09_Name 	: SvrCh_UDINT;
	sOp09_WW 	: SvrCh_UDINT;
	sOp10_Name 	: SvrCh_UDINT;
	sOp10_WW 	: SvrCh_UDINT;
  //Clients:
	inlogNiveau 	: CltCh_DINT;
	c_SysDateTime 	: CltChCmd__SysDateTime;
	objLoadSaveData 	: CltChCmd_LoadSaveData;
	Op10_Name 	: CltChCmd_String;
	Op10_WW 	: CltChCmd_String;
	Op01_Name 	: CltChCmd_String;
	Op01_WW 	: CltChCmd_String;
	Op02_Name 	: CltChCmd_String;
	Op02_WW 	: CltChCmd_String;
	Op03_Name 	: CltChCmd_String;
	Op03_WW 	: CltChCmd_String;
	Op04_Name 	: CltChCmd_String;
	Op04_WW 	: CltChCmd_String;
	Op05_Name 	: CltChCmd_String;
	Op05_WW 	: CltChCmd_String;
	Op06_Name 	: CltChCmd_String;
	Op06_WW 	: CltChCmd_String;
	Op07_Name 	: CltChCmd_String;
	Op07_WW 	: CltChCmd_String;
	Op08_Name 	: CltChCmd_String;
	Op08_WW 	: CltChCmd_String;
	Op09_Name 	: CltChCmd_String;
	Op09_WW 	: CltChCmd_String;
	WW_Invoer 	: CltChCmd_String;
	Operator_Selected 	: CltChCmd_String;
	ASCII_BIN1 	: CltChCmd_ASCII_BIN;
	c_NewFileString 	: CltChCmd_String;
	c_SelectedFileString 	: CltChCmd_String;
	c_StringPath 	: CltChCmd_String;
  //Variables:
		OpData 	: tOperatorLogin;
		CaseData 	: DINT;
		Test 	: DINT;
		TestString 	: tString;
		Helptext1 	: tString;
		Helptext2 	: tString;
		FileState 	: DINT;
		SaveOpData 	: DINT;
		FileID 	: DINT;
		testChar 	: CHAR;
		PosCounter1 	: DINT;
		LineCount 	: DINT;
		LogBuffer : ARRAY [0..AantalLogRegels] OF tString;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION TAB OperatorInit;
	
	FUNCTION OpInitWaardes;
	
	FUNCTION ShowValues;
	
	FUNCTION Users2File;
	
	FUNCTION File2Users;
	
	FUNCTION MirrorCharValue
		VAR_INPUT
			InputChar 	: CHAR;
		END_VAR
		VAR_OUTPUT
			OutputChar 	: CHAR;
		END_VAR;
	
	FUNCTION GetTijd
		VAR_INPUT
			SysDate 	: HDINT;
			SysTime 	: HDINT;
			pResult 	: ^CHAR;
		END_VAR;
	
	FUNCTION ReadLogLines;
	
	FUNCTION VIRTUAL GLOBAL TaskOnOff::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Operator_Select::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOperator_Selected::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOperator_Selected::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sWW_Invoer::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sWW_Invoer::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LogOut::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Aktie::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SaveData::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp01_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp01_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp01_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp01_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp02_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp02_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp02_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp02_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp03_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp03_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp03_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp03_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp04_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp04_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp04_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp04_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp05_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp05_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp05_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp05_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp06_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp06_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp06_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp06_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp07_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp07_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp07_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp07_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp08_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp08_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp08_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp08_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp09_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp09_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp09_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp09_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp10_Name::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp10_Name::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp10_WW::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sOp10_WW::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using ASCII_BIN
#pragma using String
#pragma usingLtd _SysDateTime
#pragma usingLtd LoadSaveData


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB OperatorLogIn_Teller::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_OPERATORLOGIN_TELLER
1$UINT, 0$UINT, (SIZEOF(::OperatorLogIn_Teller))$UINT, 
29$UINT, 29$UINT, 0$UINT, 
TO_UDINT(311276651), "OperatorLogIn_Teller", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::OperatorLogIn_Teller.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::OperatorLogIn_Teller.TaskOnOff.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3088116079), "TaskOnOff", 
(::OperatorLogIn_Teller.Operator_Select.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1879923578), "Operator_Select", 
(::OperatorLogIn_Teller.sOperator_Selected.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1146325713), "sOperator_Selected", 
(::OperatorLogIn_Teller.sWW_Invoer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2143008404), "sWW_Invoer", 
(::OperatorLogIn_Teller.LogInOK.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(15564860), "LogInOK", 
(::OperatorLogIn_Teller.LogOut.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3308532393), "LogOut", 
(::OperatorLogIn_Teller.Aktie.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2736561895), "Aktie", 
(::OperatorLogIn_Teller.SaveData.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2886838425), "SaveData", 
(::OperatorLogIn_Teller.sOp01_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1901072323), "sOp01_Name", 
(::OperatorLogIn_Teller.sOp01_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2397398816), "sOp01_WW", 
(::OperatorLogIn_Teller.sOp02_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(4156849517), "sOp02_Name", 
(::OperatorLogIn_Teller.sOp02_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2622539982), "sOp02_WW", 
(::OperatorLogIn_Teller.sOp03_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1016639176), "sOp03_Name", 
(::OperatorLogIn_Teller.sOp03_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(619491243), "sOp03_WW", 
(::OperatorLogIn_Teller.sOp04_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(563977840), "sOp04_Name", 
(::OperatorLogIn_Teller.sOp04_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(3107690258), "sOp04_WW", 
(::OperatorLogIn_Teller.sOp05_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(3938536917), "sOp05_Name", 
(::OperatorLogIn_Teller.sOp05_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(25686135), "sOp05_WW", 
(::OperatorLogIn_Teller.sOp06_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1817526139), "sOp06_Name", 
(::OperatorLogIn_Teller.sOp06_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(322068377), "sOp06_WW", 
(::OperatorLogIn_Teller.sOp07_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2802445534), "sOp07_Name", 
(::OperatorLogIn_Teller.sOp07_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2878224636), "sOp07_WW", 
(::OperatorLogIn_Teller.sOp08_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1449090571), "sOp08_Name", 
(::OperatorLogIn_Teller.sOp08_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(4092405930), "sOp08_WW", 
(::OperatorLogIn_Teller.sOp09_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(2634255790), "sOp09_Name", 
(::OperatorLogIn_Teller.sOp09_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(1263620047), "sOp09_WW", 
(::OperatorLogIn_Teller.sOp10_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(477878226), "sOp10_Name", 
(::OperatorLogIn_Teller.sOp10_WW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000001000000$UINT, TO_UDINT(188295669), "sOp10_WW", 
//Clients:
(::OperatorLogIn_Teller.inlogNiveau.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(94592894), "inlogNiveau", 
(::OperatorLogIn_Teller.c_SysDateTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2663157857), "c_SysDateTime", TO_UDINT(3931827689), "_SysDateTime", 0$UINT, 5$UINT, 
(::OperatorLogIn_Teller.objLoadSaveData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(625549803), "objLoadSaveData", TO_UDINT(809080914), "LoadSaveData", 1$UINT, 0$UINT, 
(::OperatorLogIn_Teller.Op10_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1272682049), "Op10_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op10_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(685694407), "Op10_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op01_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(653282896), "Op01_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op01_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2902627090), "Op01_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op02_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2690923774), "Op02_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op02_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3216456956), "Op02_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op03_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1798893403), "Op03_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op03_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(118184857), "Op03_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op04_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1983766499), "Op04_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op04_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2598134560), "Op04_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op05_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3177253958), "Op05_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op05_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(576717893), "Op05_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op06_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1005944552), "Op06_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op06_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(819309483), "Op06_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op07_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4037651789), "Op07_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op07_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2288635086), "Op07_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op08_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(33496984), "Op08_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op08_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3490372760), "Op08_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op09_Name.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3399732285), "Op09_Name", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Op09_WW.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1756806141), "Op09_WW", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.WW_Invoer.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(672921351), "WW_Invoer", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.Operator_Selected.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2484028731), "Operator_Selected", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.ASCII_BIN1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1288358665), "ASCII_BIN1", TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 20$UINT, 
(::OperatorLogIn_Teller.c_NewFileString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2515821471), "c_NewFileString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.c_SelectedFileString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1134235920), "c_SelectedFileString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::OperatorLogIn_Teller.c_StringPath.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2942776655), "c_StringPath", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_OperatorLogIn_Teller 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_OperatorLogIn_Teller] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION OperatorLogIn_Teller::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_OperatorLogIn_Teller, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TaskOnOff.pMeth			:= StoreMethod( #M_RD_DIRECT(), #TaskOnOff::Write() );
	IF TaskOnOff.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Operator_Select.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Operator_Select::Write() );
	IF Operator_Select.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOperator_Selected.pMeth			:= StoreMethod( #sOperator_Selected::Read(), #sOperator_Selected::Write() );
	IF sOperator_Selected.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sWW_Invoer.pMeth			:= StoreMethod( #sWW_Invoer::Read(), #sWW_Invoer::Write() );
	IF sWW_Invoer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LogOut.pMeth			:= StoreMethod( #M_RD_DIRECT(), #LogOut::Write() );
	IF LogOut.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Aktie.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Aktie::Write() );
	IF Aktie.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaveData.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SaveData::Write() );
	IF SaveData.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp01_Name.pMeth			:= StoreMethod( #sOp01_Name::Read(), #sOp01_Name::Write() );
	IF sOp01_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp01_WW.pMeth			:= StoreMethod( #sOp01_WW::Read(), #sOp01_WW::Write() );
	IF sOp01_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp02_Name.pMeth			:= StoreMethod( #sOp02_Name::Read(), #sOp02_Name::Write() );
	IF sOp02_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp02_WW.pMeth			:= StoreMethod( #sOp02_WW::Read(), #sOp02_WW::Write() );
	IF sOp02_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp03_Name.pMeth			:= StoreMethod( #sOp03_Name::Read(), #sOp03_Name::Write() );
	IF sOp03_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp03_WW.pMeth			:= StoreMethod( #sOp03_WW::Read(), #sOp03_WW::Write() );
	IF sOp03_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp04_Name.pMeth			:= StoreMethod( #sOp04_Name::Read(), #sOp04_Name::Write() );
	IF sOp04_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp04_WW.pMeth			:= StoreMethod( #sOp04_WW::Read(), #sOp04_WW::Write() );
	IF sOp04_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp05_Name.pMeth			:= StoreMethod( #sOp05_Name::Read(), #sOp05_Name::Write() );
	IF sOp05_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp05_WW.pMeth			:= StoreMethod( #sOp05_WW::Read(), #sOp05_WW::Write() );
	IF sOp05_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp06_Name.pMeth			:= StoreMethod( #sOp06_Name::Read(), #sOp06_Name::Write() );
	IF sOp06_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp06_WW.pMeth			:= StoreMethod( #sOp06_WW::Read(), #sOp06_WW::Write() );
	IF sOp06_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp07_Name.pMeth			:= StoreMethod( #sOp07_Name::Read(), #sOp07_Name::Write() );
	IF sOp07_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp07_WW.pMeth			:= StoreMethod( #sOp07_WW::Read(), #sOp07_WW::Write() );
	IF sOp07_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp08_Name.pMeth			:= StoreMethod( #sOp08_Name::Read(), #sOp08_Name::Write() );
	IF sOp08_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp08_WW.pMeth			:= StoreMethod( #sOp08_WW::Read(), #sOp08_WW::Write() );
	IF sOp08_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp09_Name.pMeth			:= StoreMethod( #sOp09_Name::Read(), #sOp09_Name::Write() );
	IF sOp09_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp09_WW.pMeth			:= StoreMethod( #sOp09_WW::Read(), #sOp09_WW::Write() );
	IF sOp09_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp10_Name.pMeth			:= StoreMethod( #sOp10_Name::Read(), #sOp10_Name::Write() );
	IF sOp10_Name.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sOp10_WW.pMeth			:= StoreMethod( #sOp10_WW::Read(), #sOp10_WW::Write() );
	IF sOp10_WW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	i : dint;
  END_VAR
  
  inlogNiveau := inlogNiveau.Read();

  if    TaskOnOff & inlogNiveau <> 3 then
  
        case CaseData of
        
        0:
            if    objLoadSaveData.OpenFile(FileName:="C:\REC\MADA\USERS.MD", Attribute:=ATTR_READ_ONLY) <= 0 then
                  //File bestaat niet dus laad de operatornamen met -wachtwoorden uit de presettabel
                  OpInitWaardes();
                  ShowValues();
                  CaseData :=1;
            else
                  //File laden
                  File2Users();
                  objLoadSaveData.CloseFile();
                  ShowValues();
                  CaseData :=1;
            end_if;
                  
        1:

            //idle

        end_case;

        //controle of wachtwoord klopt
        if    Operator_Select >= 1 & Operator_Select <= 10 then
              _memset(dest:=#testString[0], usByte:=0, cntr:=sizeof(tString));
              WW_Invoer.ReadDataOff(udOff:=0, pData:=#testString[0], udMax:=sizeof(tString));
              if    _strlen(src:=#testString[0]) > 0 then
              
                    if    _strcmp(str1:=#OpData.OpData[Operator_Select-1].OpWW[0], str2:=#testString[0]) = 0 then
                          //gelijk 
                          LogInOK := 1;
                    else
                          LogInOK := 0;
                    end_if; 
                    WW_Invoer.Clear();
                    sWW_Invoer.Read();             
              end_if;
        else
              LogInOK := 0;
              WW_Invoer.Clear();
              sWW_Invoer.Read();
        end_if;  
        

        
        //Save operator Data
        if    SaveOpData then

              //controleren of de invoer is veranderd
              _memset(dest:=#OpData.OpData[0].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op01_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[0].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[1].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op02_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[1].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[2].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op03_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[2].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[3].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op04_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[3].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[4].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op05_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[4].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[5].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op06_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[5].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[6].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op07_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[6].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[7].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op08_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[7].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[8].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op09_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[8].OpName[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[9].OpName[0], usByte:=0, cntr:=sizeof(tString));
              Op10_Name.ReadDataOff(udOff:=0, pData:=#OpData.OpData[9].OpName[0], udMax:=sizeof(tString));
              
              _memset(dest:=#OpData.OpData[0].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op01_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[0].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[1].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op02_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[1].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[2].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op03_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[2].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[3].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op04_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[3].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[4].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op05_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[4].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[5].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op06_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[5].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[6].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op07_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[6].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[7].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op08_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[7].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[8].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op09_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[8].OpWW[0], udMax:=sizeof(tString));
              _memset(dest:=#OpData.OpData[9].OpWW[0], usByte:=0, cntr:=sizeof(tString));
              Op10_WW.ReadDataOff(udOff:=0, pData:=#OpData.OpData[9].OpWW[0], udMax:=sizeof(tString));  
              
              
              //bestaande file wissen
              if    objLoadSaveData.OpenFile(FileName:="C:\REC\MADA\USERS.MD", Attribute:=ATTR_READ_ONLY) > 0 then
                    objLoadSaveData.CloseFile();
                    objLoadSaveData.FileDelete(FileName:="C:\REC\MADA\USERS.MD");
              end_if;
              
              
              FileID := objLoadSaveData.OpenFile("C:\REC\MADA\USERS.MD", ATT_CREATE_ALWAYS);
              if    FileID <= 0 then
                    TRACE0 ("File {0} niet aangemaakt op schijf","C:\REC\MADA\USERS.MD");
                    TRACE ("Header kan niet geschreven worden...");  
              else
                    // data schrijven
                    TRACE ("Data schrijven...");              
                    Users2File();
                    
                    // Bestand terug sluiten.
                    objLoadSaveData.CloseFile();
                    TRACE0 ("Bestand {0} sluiten.","C:\REC\MADA\USERS.MD");              
                    
              end_if;
              
              SaveOpData := 0;
              SaveData := 0;
        end_if;

        //toolcat logging
        if    Aktie then
        
              //bestaat file al?
              if    objLoadSaveData.OpenFile(FileName:="C:\REC\MADA\OPERATOR_LOGGING.MD", Attribute:=ATTR_READ_ONLY) <= 0 then
                    //nee dus reset databuffer
                    _memset(dest:=#LogBuffer[0][0], usByte:=0, cntr:=(sizeof(LogBuffer))); 
              else
                    ReadLogLines();  
                    objLoadSaveData.CloseFile();
                    objLoadSaveData.FileDelete(FileName:="C:\REC\MADA\OPERATOR_LOGGING.MD");
              end_if;
              

              _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
              
            //string bestaat uit:
            //Datum, tijd, operator Nr, opereratornaam, aktie, doosnaam
              
              //Datum, tijd
              GetTijd(SysDate:=c_SysDateTime.SysDate, SysTime:=c_SysDateTime.SysTime, pResult:=#Helptext1[0]);
              
              //Operator Nr
              _strcat(dest:=#Helptext1[0], src:="OperatorNr:, ");
              _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));
              objLoadSaveData.BuildValue2Ascii(Value:=Operator_Select, Dest:=#Helptext2[0], Offset:=0);
              _strcat(dest:=#Helptext1[0], src:=#Helptext2[0]);
              _strcat(dest:=#Helptext1[0], src:=", Operator Naam:, ");
              
              //Operator Naam,
              _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));
              Operator_Selected.ReadDataOff(udOff:=0, pData:=#Helptext2[0], udMax:=sizeof(tString));
              _strcat(dest:=#Helptext1[0], src:=#Helptext2[0]);
              _strcat(dest:=#Helptext1[0], src:=", Aktie:, ");
              
              _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));

              if    Aktie = 1 then //File creeren
                    _strcat(dest:=#Helptext1[0], src:="heeft nieuwe file in geheugen toegevoegd, Filenaam:, ");
                    c_NewFileString.ReadDataOff(udOff:=0, pData:=#Helptext2[0], udMax:=sizeof(tString));
              elsif Aktie = 2 then //File overschrijven
                    _strcat(dest:=#Helptext1[0], src:="heeft bestaande file overschreven, Filenaam:, ");
                    c_SelectedFileString.ReadDataOff(udOff:=c_StringPath.GetLength(), pData:=#Helptext2[0], udMax:=sizeof(tString));
              elsif Aktie = 3 then //File deleten
                    _strcat(dest:=#Helptext1[0], src:="heeft bestaande file gewist, Filenaam:, ");
                    c_SelectedFileString.ReadDataOff(udOff:=c_StringPath.GetLength(), pData:=#Helptext2[0], udMax:=sizeof(tString));
              end_if;
              
              _strcat(dest:=#Helptext1[0], src:=#Helptext2[0]);        

              
              _strcpy(dest:=#LogBuffer[0][0], src:=#Helptext1[0]);
              
              //array of char groter maken (256 tekens ipv 80
              //Operator + aktie binnenhalen
              //Geselecteerde doos binnenhalen
              
              

              FileID := objLoadSaveData.OpenFile("C:\REC\MADA\OPERATOR_LOGGING.MD", ATT_CREATE_ALWAYS); 
              if    FileID <= 0 then
                    TRACE0 ("File {0} niet aangemaakt op schijf","C:\REC\MADA\OPERATOR_LOGGING.MD");
                    TRACE ("Header kan niet geschreven worden...");  
              else
                    // data schrijven
                    TRACE ("Data schrijven...");             
                    
                    for  i:= 0 to AantalLogRegels do
                    
                         if     LogBuffer[i][0] = 0 then
                                exit;
                         else
                                
                                objLoadSaveData.BuildEOL(Dest:=#LogBuffer[i][0], Offset:=to_dint(_strlen(#LogBuffer[i][0])));                          
                                FileState := objLoadSaveData.WriteFile(Source:=#LogBuffer[i][0], Length:=to_dint(_strlen(#LogBuffer[i][0])));    
                         end_if;
                    end_for;
                    // Bestand terug sluiten.
                    objLoadSaveData.CloseFile();
                    TRACE0 ("Bestand {0} sluiten.","C:\REC\MADA\OPERATOR_LOGGING.MD");              
                    
              end_if;  
        
              //operator uitloggen na het schrijven van de log
              LogOut.Write(input:=1);
        
        
              Aktie := 0;
        end_if;
  else      
        LogInOK := 1;  

  end_if;
  
	state := READY;

END_FUNCTION






FUNCTION TAB OperatorLogIn_Teller::OperatorInit


//initial inlog gegevens
"Operator1","5478",
"Operator2","2709",
"Operator3","2644",
"Operator4","9087",
"Operator5","7656",
"Operator6","2767",
"Operator7","3433",
"Operator8","8717",
"Operator9","5302",
"Operator10","0021",


END_FUNCTION





FUNCTION OperatorLogIn_Teller::OpInitWaardes

  VAR
  	i:udint;
    ii:udint;
    pChar:^char;
  END_VAR
 
  //tabel laden
  pChar := #OperatorInit() + sizeof(UDINT);      
  for   i:= 0 to 9 do
        for   ii:=0 to sizeof(tString) do
              if    pChar^ <> 0 then
                    OpData.OpData[i].OpName[ii] := pChar^;
                    pChar += 1;
              else
                    pChar += 1;
                    exit;
              end_if;
        end_for;
        for   ii:=0 to sizeof(tString) do
              if    pChar^ <> 0 then
                    OpData.OpData[i].OpWW[ii] := pChar^;
                    pChar += 1;
              else
                    pChar += 1;
                    exit;
              end_if;
        end_for;              
  end_for;



END_FUNCTION




FUNCTION OperatorLogIn_Teller::ShowValues

//Vanuit structuur naar servers

  Op01_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[0].OpName[0]);
  Op02_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[1].OpName[0]);
  Op03_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[2].OpName[0]);
  Op04_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[3].OpName[0]);
  Op05_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[4].OpName[0]);
  Op06_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[5].OpName[0]);
  Op07_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[6].OpName[0]);
  Op08_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[7].OpName[0]);
  Op09_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[8].OpName[0]);
  Op10_Name.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[9].OpName[0]);

  Op01_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[0].OpWW[0]);
  Op02_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[1].OpWW[0]);
  Op03_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[2].OpWW[0]);
  Op04_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[3].OpWW[0]);
  Op05_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[4].OpWW[0]);
  Op06_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[5].OpWW[0]);
  Op07_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[6].OpWW[0]);
  Op08_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[7].OpWW[0]);
  Op09_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[8].OpWW[0]);
  Op10_WW.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[9].OpWW[0]);


  sOp01_Name.Read();
  sOp02_Name.Read();
  sOp03_Name.Read();
  sOp04_Name.Read();
  sOp05_Name.Read();
  sOp06_Name.Read();
  sOp07_Name.Read();
  sOp08_Name.Read();
  sOp09_Name.Read();
  sOp10_Name.Read();
  
  sOp01_WW.Read();
  sOp02_WW.Read();
  sOp03_WW.Read();
  sOp04_WW.Read();
  sOp05_WW.Read();
  sOp06_WW.Read();
  sOp07_WW.Read();
  sOp08_WW.Read();
  sOp09_WW.Read();
  sOp10_WW.Read();


END_FUNCTION





FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp01_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp01_Name := Op01_Name.Data.Read();
	output := sOp01_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp01_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp01_Name := input;
	result := (Op01_Name.Data.Write(sOp01_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp01_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp01_WW := Op01_WW.Data.Read();
	output := sOp01_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp01_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp01_WW := input;
	result := (Op01_WW.Data.Write(sOp01_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp02_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp02_Name := Op02_Name.Data.Read();
	output := sOp02_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp02_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp02_Name := input;
	result := (Op02_Name.Data.Write(sOp02_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp02_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp02_WW := Op02_WW.Data.Read();
	output := sOp02_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp02_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp02_WW := input;
	result := (Op02_WW.Data.Write(sOp02_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp03_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp03_Name := Op03_Name.Data.Read();
	output := sOp03_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp03_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp03_Name := input;
	result := (Op03_Name.Data.Write(sOp03_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp03_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp03_WW := Op03_WW.Data.Read();
	output := sOp03_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp03_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp03_WW := input;
	result := (Op03_WW.Data.Write(sOp03_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp04_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp04_Name := Op04_Name.Data.Read();
	output := sOp04_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp04_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp04_Name := input;
	result := (Op04_Name.Data.Write(sOp04_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp04_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp04_WW := Op04_WW.Data.Read();
	output := sOp04_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp04_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp04_WW := input;
	result := (Op04_WW.Data.Write(sOp04_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp05_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp05_Name := Op05_Name.Data.Read();
	output := sOp05_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp05_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp05_Name := input;
	result := (Op05_Name.Data.Write(sOp05_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp05_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp05_WW := Op05_WW.Data.Read();
	output := sOp05_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp05_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp05_WW := input;
	result := (Op05_WW.Data.Write(sOp05_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp06_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp06_Name := Op06_Name.Data.Read();
	output := sOp06_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp06_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp06_Name := input;
	result := (Op06_Name.Data.Write(sOp06_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp06_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp06_WW := Op06_WW.Data.Read();
	output := sOp06_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp06_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp06_WW := input;
	result := (Op06_WW.Data.Write(sOp06_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp07_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp07_Name := Op07_Name.Data.Read();
	output := sOp07_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp07_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp07_Name := input;
	result := (Op07_Name.Data.Write(sOp07_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp07_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp07_WW := Op07_WW.Data.Read();
	output := sOp07_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp07_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp07_WW := input;
	result := (Op07_WW.Data.Write(sOp07_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp08_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp08_Name := Op08_Name.Data.Read();
	output := sOp08_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp08_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp08_Name := input;
	result := (Op08_Name.Data.Write(sOp08_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp08_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp08_WW := Op08_WW.Data.Read();
	output := sOp08_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp08_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp08_WW := input;
	result := (Op08_WW.Data.Write(sOp08_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp09_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp09_Name := Op09_Name.Data.Read();
	output := sOp09_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp09_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp09_Name := input;
	result := (Op09_Name.Data.Write(sOp09_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp09_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp09_WW := Op09_WW.Data.Read();
	output := sOp09_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp09_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp09_WW := input;
	result := (Op09_WW.Data.Write(sOp09_WW))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp10_Name::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp10_Name := Op10_Name.Data.Read();
	output := sOp10_Name;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp10_Name::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp10_Name := input;
	result := (Op10_Name.Data.Write(sOp10_Name))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp10_WW::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOp10_WW := Op10_WW.Data.Read();
	output := sOp10_WW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOp10_WW::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOp10_WW := input;
	result := (Op10_WW.Data.Write(sOp10_WW))$UDINT;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOperator_Selected::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sOperator_Selected := Operator_Selected.Data.Read();
	output := sOperator_Selected;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sOperator_Selected::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sOperator_Selected := input;
	result := (Operator_Selected.Data.Write(sOperator_Selected))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sWW_Invoer::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sWW_Invoer := WW_Invoer.Data.Read();
	output := sWW_Invoer;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::sWW_Invoer::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR



	sWW_Invoer := input;
	result := (WW_Invoer.Data.Write(sWW_Invoer))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::Operator_Select::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Operator_Select := input;
  
  if    input >= 1 & input <= 10  then
        Operator_Selected.WriteDataOff(udLen:=sizeof(tString), udOff:=0, pData:=#OpData.OpData[input-1].OpName[0]);
        sOperator_Selected.Read();
  end_if;

  
	result := Operator_Select;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::LogOut::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	LogOut := input;
  LogOut := 0;
  //invoer resetten
  Operator_Selected.Clear();
  sOperator_Selected.Read();
  
  //wachtwoord resetten
  WW_Invoer.Clear();
  sWW_Invoer.Read();
  
  //logok resetten
  LogInOK := 0;
  Operator_Select := 0;
  
	result := LogOut;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::Aktie::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if    input >= 1 & input <= 3 & LogInOK then
        //1 File creeren
        //2 File overschrijven
        //3 File deleten  
        Aktie := input;
  else
        Aktie := 0;
  end_if;
  
	result := Aktie;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::SaveData::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
	
  if    input = 1 then
        SaveOpData := 1;
        SaveData := input; 
  else      
        SaveData := 0;  
  end_if;

	result := SaveData;

END_FUNCTION


FUNCTION OperatorLogIn_Teller::Users2File

VAR
	i : int;
  ii : int;
  //waarde : USINT;
END_VAR
  
    for   i:= 0 to 9 do
          
          //Helptext            
          _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));

          //het onleesbaar maken van data
          //ascii tekens 32..126 worden gespiegeld
          for   ii:= 0 to sizeof(tString) do
                if   OpData.OpData[i].OpName[ii] = 0 then
                     exit; 
                else
                     Helptext1[ii] := MirrorCharValue(InputChar:=OpData.OpData[i].OpName[ii]);    
                end_if;          
          end_for;
          
          objLoadSaveData.BuildEOL(Dest:=#Helptext1[0], Offset:=to_dint(_strlen(#Helptext1[0])));
          FileState := objLoadSaveData.WriteFile(Source:=#Helptext1[0], Length:=to_dint(_strlen(#Helptext1[0])));   
            
            
          _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
          
          //het onleesbaar maken van data
          //ascii tekens 32..126 worden gespiegeld
          for   ii:= 0 to sizeof(tString) do
                if   OpData.OpData[i].OpWW[ii] = 0 then
                     exit; 
                else
                     Helptext1[ii] := MirrorCharValue(InputChar:=OpData.OpData[i].OpWW[ii]);    
                end_if;          
          end_for;

          objLoadSaveData.BuildEOL(Dest:=#Helptext1[0], Offset:=to_dint(_strlen(#Helptext1[0])));
          FileState := objLoadSaveData.WriteFile(Source:=#Helptext1[0], Length:=to_dint(_strlen(#Helptext1[0])));     
    end_for;



END_FUNCTION





FUNCTION OperatorLogIn_Teller::File2Users


VAR
	i : int;
  ii : int;
  iii : int;
END_VAR
    
    _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
    _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));
  
    objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
    PosCounter1 := objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#Helptext2[0], Offset:=0);
    LineCount := 0;
    
    while PosCounter1 >1 do
          objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
          PosCounter1 := objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#Helptext2[0], Offset:=0);
          LineCount +=1;  
          _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
          _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));          
    end_while; 
    
    
 
    if    LineCount > 0 then
          //file sluiten en opnieuw openen
          objLoadSaveData.CloseFile();
          objLoadSaveData.OpenFile(FileName:="C:\REC\MADA\USERS.MD", Attribute:=ATTR_READ_ONLY);     
          iii:= 1;  
          for   i := 1 to LineCount do
                if    iii = 1 then
                      iii := 0;
                else
                      iii := 1;
                end_if;
                
                if    i <> LineCount then
                      _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
                      _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));                 
                end_if;
   
                objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
                objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#Helptext2[0], Offset:=0); // totale lengte tekstlijn  

                for   ii:= 0 to sizeof(tString) do
                      if   Helptext2[ii] = 0 then
                           exit; 
                      else
                           if     iii = 0 then
                                  OpData.OpData[((i-1)/2)].OpName[ii] := MirrorCharValue(InputChar:=Helptext2[ii]);
                           else
                                  OpData.OpData[((i/2)-1)].OpWW[ii] := MirrorCharValue(InputChar:=Helptext2[ii]);
                           end_if;
                      end_if;                
                end_for;   
          end_for;      

    end_if;
    




END_FUNCTION


FUNCTION OperatorLogIn_Teller::MirrorCharValue
	VAR_INPUT
		InputChar 	: CHAR;
	END_VAR
	VAR_OUTPUT
		OutputChar 	: CHAR;
	END_VAR
  VAR
  	Char2Usint : usint;
  END_VAR

  Char2Usint := InputChar;
  if    Char2Usint >= 32 & Char2Usint < 79 then
        Char2Usint := 79 + (79 - Char2Usint);
  elsif Char2Usint > 79 & Char2Usint <= 126 then
        Char2Usint := 79 - (Char2Usint - 79);
  end_if;

  OutputChar := Char2Usint;
  

END_FUNCTION


FUNCTION OperatorLogIn_Teller::GetTijd
	VAR_INPUT
		SysDate 	: HDINT;
		SysTime 	: HDINT;
		pResult 	: ^CHAR;
	END_VAR

  VAR
  	temp      : dint;
    mHelptext : Array[0..255] of CHAR;
  END_VAR

  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));
  _strcpy(dest:=pResult, src:="0000-00-00-00:45");

  
  //YYYYYYYYYYYYYYYYMMMMDDDDDDDDWWWW   
  //jaar
  temp :=  to_dint((SysDate and 16#FFFF0000) shr 16);  
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  _strcpy(dest:=pResult, src:=#mHelptext[0]);
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));
  
  //streepje
  _strcpy(dest:=pResult+4, src:="-");
  
  //maand
  temp :=  to_dint((SysDate and 16#0000F000) shr 12);  
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  if    _strlen(#mHelptext[0]) > 1 then
        _strcpy(dest:=pResult+5, src:=#mHelptext[0]);
  else  
        //extra 0
        _strcpy(dest:=pResult+5, src:="0");  
        _strcpy(dest:=pResult+6, src:=#mHelptext[0]);
  end_if;

  //streepje
  _strcpy(dest:=pResult+7, src:="-");
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));
  
  //dag
  temp :=  to_dint((SysDate and 16#00000FF0) shr 4);  
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  if    _strlen(#mHelptext[0]) > 1 then
        _strcpy(dest:=pResult+8, src:=#mHelptext[0]);
  else  
        //extra 0
        _strcpy(dest:=pResult+8, src:="0");  
        _strcpy(dest:=pResult+9, src:=#mHelptext[0]);
  end_if;


  //spatie
  _strcpy(dest:=pResult+10, src:=", ");  
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));  

  
  //HHHHHHHHMMMMMMMMSSSSSSSS00000000

  //uur
  temp :=  to_dint((SysTime and 16#FF000000) shr 24); 
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  if    _strlen(#mHelptext[0]) > 1 then
        _strcpy(dest:=pResult+12, src:=#mHelptext[0]);
  else  
        //extra 0
        _strcpy(dest:=pResult+12, src:="0");  
        _strcpy(dest:=pResult+13, src:=#mHelptext[0]);
  end_if;  
  
  
  //dubbele punt
  _strcpy(dest:=pResult+14, src:=":");  
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));    

  //minuut
  temp :=  to_dint((SysTime and 16#00FF0000) shr 16); 
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  if    _strlen(#mHelptext[0]) > 1 then
        _strcpy(dest:=pResult+15, src:=#mHelptext[0]);
  else  
        //extra 0
        _strcpy(dest:=pResult+15, src:="0");  
        _strcpy(dest:=pResult+16, src:=#mHelptext[0]);
  end_if;
  
  //dubbele punt
  _strcpy(dest:=pResult+17, src:=":");  
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString));    

  //seconde
  temp :=  to_dint((SysTime and 16#0000FF00) shr 8); 
  objLoadSaveData.BuildValue2Ascii(Value:=temp, #mHelptext[0], Offset:=0);
  if    _strlen(#mHelptext[0]) > 1 then
        _strcpy(dest:=pResult+18, src:=#mHelptext[0]);
  else  
        //extra 0
        _strcpy(dest:=pResult+18, src:="0");  
        _strcpy(dest:=pResult+19, src:=#mHelptext[0]);
  end_if;  
  
    //dubbele punt
  _strcpy(dest:=pResult+20, src:=", ");  
  _memset(dest:=#mHelptext[0], usByte:=0, cntr:=sizeof(tString)); 
  

END_FUNCTION


FUNCTION OperatorLogIn_Teller::ReadLogLines

VAR
	i : int;

END_VAR
    
    _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
    _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));
  
    objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
    PosCounter1 := objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#Helptext2[0], Offset:=0);
    LineCount := 0;
    while PosCounter1 >1 do
          objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
          PosCounter1 := objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#Helptext2[0], Offset:=0);
          LineCount +=1;  
          _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
          _memset(dest:=#Helptext2[0], usByte:=0, cntr:=sizeof(tString));          
    end_while; 
    
    _memset(dest:=#LogBuffer[0][0], usByte:=0, cntr:=(sizeof(LogBuffer)));  
 
    //maximaal 200 lines in log file
    if    LineCount > AantalLogRegels then
          LineCount := AantalLogRegels;
    end_if;

    if    LineCount > 0 then
          //file sluiten en opnieuw openen
          objLoadSaveData.CloseFile();
          objLoadSaveData.OpenFile(FileName:="C:\REC\MADA\OPERATOR_LOGGING.MD", Attribute:=ATTR_READ_ONLY);      
          for   i := 1 to LineCount do
                _memset(dest:=#Helptext1[0], usByte:=0, cntr:=sizeof(tString));
                objLoadSaveData.ReadFile(Dest:=#Helptext1[0], Offset:=0);
                objLoadSaveData.Read2CR(Source_:=#Helptext1[0], Dest:=#LogBuffer[i][0], Offset:=0); // totale lengte tekstlijn              
          end_for;      
    end_if;
    

END_FUNCTION


FUNCTION VIRTUAL GLOBAL OperatorLogIn_Teller::TaskOnOff::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	TaskOnOff := input;
	
  
  
  result := TaskOnOff;

END_FUNCTION
