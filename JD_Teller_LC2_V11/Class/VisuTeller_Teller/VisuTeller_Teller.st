//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "VisuTeller_Teller"
	Revision           = "1.0"
	GUID               = "{33B8CF8D-56BD-4FF5-99C2-A0DFBBF1BA79}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "200 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(486,120)">
	<Channels>
		<Server Name="Classserver" GUID="{6CECA0D1-5788-4E68-9732-BA910ECB1854}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="i2SenCnt" GUID="{FFF76A63-5DE8-44E3-AECA-19E26B5DA4B6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Servicemenu instelling&#13;&#10;&#13;&#10;Met de waarde kan het aantal telsensors worden ingesteld.&#13;&#10;&#13;&#10;&#13;&#10;Bereik&#13;&#10;&#13;&#10;0:&#13;&#10;Alleen SensorL wordt gebruikt bij type 1 t/m 5, behalve type 3.&#13;&#10;&#13;&#10;1:&#13;&#10;Zowel Sensor L en Sensor R worden gebruikt bij type 1t/m 5, behalve type 3.&#13;&#10;&#13;&#10;"/>
		<Server Name="iBoxlengte" GUID="{64B3474C-BC32-4171-AC7E-0A162D8342DC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Operatorinstelling&#13;&#10;&#13;&#10;Dit een afstandswaarde welke door de geselecteerde fotocel wordt gezien&#13;&#10;Bereik:&#13;&#10;Minimaal: iStart+iLengte&#13;&#10;Maximaal: 2000&#13;&#10;&#13;&#10;Eenheid:&#13;&#10;in mm (milimeters)&#13;&#10;&#13;&#10;Werking ter info:&#13;&#10;Om een doos te &apos;zien&apos; is een afstand belangrijk&#13;&#10;Als de fotocel een doos detecteert dan sluit hij &#13;&#10;zijn ogen totdat de waarde van iBoxlengte is bereikt&#13;&#10;Mocht de fotocel daarna niets meer zien kan pas een &#13;&#10;volgende doos worden gedetecteerd.&#13;&#10;&#13;&#10;"/>
		<Server Name="iBoxLengte_Max" GUID="{83DBC025-3414-4051-90B5-D29D59FB3BFD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iBoxLengte_Min" GUID="{300D6A67-E8D6-4FDA-8481-7C86C5FAA17D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iHeadnr" GUID="{95C2C6A6-7FCA-46CC-A8AE-9C9D2C89CBF9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Servicemenu instelling&#13;&#10;&#13;&#10;Keuze welke oHeadnr0X wordt aangestuurd in de TellerClass&#13;&#10;bereik: 1 t/m 8&#13;&#10;&#13;&#10;Voorbeeld:&#13;&#10;Waarde=1 correspondeert met oHeadnr01 in TellerClass&#13;&#10;Waarde=2 correspondeert met oHeadnr02 in TellerClass&#13;&#10;..&#13;&#10;Waarde=8 correspondeert met oHeadnr08 in TellerClass&#13;&#10;&#13;&#10;&#13;&#10;"/>
		<Server Name="iKopAfvalinMs" GUID="{8E7D54A3-1FEA-4E0F-B4A6-51971204BF5F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Met deze waarde kan de afvalvertaging&#13;&#10;van de kop worden gecorrigeerd.&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m 100 (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;ms (miliseconden)"/>
		<Server Name="iKopOffsetL" GUID="{AD21DBA2-29E7-4D1D-B87B-9B95662A7738}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Deze waarde geeft de afstand tussen&#13;&#10;de fotocel en de uitgang aan.&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m oneindig (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;mm (milimeter)&#13;&#10;&#13;&#10;iKopOffset L is de afstand tussen de&#13;&#10;iSensorLinks (waarde = 1) en alle uitgangen&#13;&#10;behalve de straighter"/>
		<Server Name="iKopOffsetR" GUID="{C37CD072-58DC-4363-A6C5-75F671C582C8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Deze waarde geeft de afstand tussen&#13;&#10;de fotocel en de uitgang aan.&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m oneindig (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;mm (milimeter)&#13;&#10;&#13;&#10;iKopOffsetR is de afstand tussen de&#13;&#10;iSensorRechts (waarde = 2) en alle uitgangen&#13;&#10;behalve de straighter"/>
		<Server Name="iKopOffsetSTR" GUID="{6BC5A13C-2B2F-4246-A9A2-9B46761FB2EF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Deze waarde geeft de afstand tussen&#13;&#10;de fotocel en de uitgang aan.&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m oneindig (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;mm (milimeter)&#13;&#10;&#13;&#10;iKopOffsetSTR is de afstand tussen de&#13;&#10;iSensorStr (waarde = 3) en de straighter"/>
		<Server Name="iKopOpkominMs" GUID="{34C76DC7-E49B-4767-8BA8-29717F5066B1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Met deze waarde kan de opkomvertaging&#13;&#10;van de kop worden gecorrigeerd.&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m 100 (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;ms (miliseconden)"/>
		<Server Name="iLengte" GUID="{06AEFD31-0C51-4EE2-887E-35334F38D64A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iLengte_Max" GUID="{2132E53F-BF21-426B-B65E-DB2316063400}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iLengte_Min" GUID="{BCBBBC70-51B8-4F0D-ADFC-4E9B31DC7C4D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iMinSpeed" GUID="{06F0E203-F1C2-4661-9683-E838D7A8DA76}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Service instelling&#13;&#10;&#13;&#10;Mocht de machinesnelheid (in m/min) &#13;&#10;onder deze waarde komen dan wordt de uitgang&#13;&#10;afgeschakeld. &#13;&#10;&#13;&#10;&#13;&#10;Bereik: &#13;&#10;0 t/m 100 (vooralsnog)&#13;&#10;Eenheid: &#13;&#10;ms (miliseconden)"/>
		<Server Name="iOnOff" GUID="{ED9F9FA9-AEF1-4E38-88A5-B8193A46F39D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Operatorinstelling&#13;&#10;&#13;&#10;Met deze waarde wordt de kop in- of uitgeschakeld.&#13;&#10;Bereik:&#13;&#10;0: off&#13;&#10;1: on&#13;&#10;&#13;&#10;"/>
		<Server Name="iPakket1" GUID="{22737B9D-9707-416C-8801-57DC444F9B60}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iPakket1SET" GUID="{3A543448-99A8-47CB-BCCD-5EF61AF4F7BB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iPakket2" GUID="{5F7CCFD1-9182-4252-9261-BD6BE9BAEA08}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iPakket2SET" GUID="{9BC43B4E-D3E8-4D78-A6E2-6DDF4E1057C3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iSensor" GUID="{0CD45D66-267C-4F89-B528-455C60DBC4DC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Operator instelling:&#13;&#10;&#13;&#10;Met deze instelling kan de trigger fotocel&#13;&#10;worden geselecteerd&#13;&#10;&#13;&#10;Bereik 1, 2 ,3&#13;&#10;&#13;&#10;Voor alle uitgangen behalve de straighter:&#13;&#10;1: sensor Links&#13;&#10;2: sensor Rechts  &#13;&#10;   &#13;&#10;Alleen voor de straighter aansturing:&#13;&#10;3: sensor Straighter"/>
		<Server Name="iStart" GUID="{16CFFEDA-ADF6-4711-8472-89F098A7D3BC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iStart_Max" GUID="{7E45A47F-A9B1-4882-AAC4-B313EC823E79}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iStart_Min" GUID="{888FEB48-E25B-47B1-989D-4E07848F160A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="iTest" GUID="{A7E106A2-3059-450D-9E52-92ED9B07A972}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Operatorinstelling&#13;&#10;&#13;&#10;Met iTest kan de OHeadnr0X manueel worden &#13;&#10;bediend.&#13;&#10;Bereik: 0,1&#13;&#10;&#13;&#10;-Werking ter info: (voor de visualisatie niet relevant) &#13;&#10;&#13;&#10;De iTest werkt alleen als oSpeed (Server TellerClass &#13;&#10;welke de snelheid van de machine aangeeft) &lt;= iMinSpeed&#13;&#10;(welke nog wordt beschreven)&#13;&#10;&#13;&#10;Als de oSpeed weer groter wordt dan MinSpeed&#13;&#10;wordt de waarde van iTest automatisch weer 0!&#13;&#10;&#13;&#10;&#13;&#10; &#13;&#10;   "/>
		<Server Name="iType" GUID="{4385005A-079E-4052-8D7F-96F8DAD4A05E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Servicemenu instelling&#13;&#10;&#13;&#10;Met de waarde van deze server kan de &#13;&#10;de kop worden gespecificeerd.&#13;&#10;&#13;&#10;Bereik&#13;&#10;&#13;&#10;0:&#13;&#10;De kop wordt niet weergegeven op het scherm&#13;&#10;Dus niet gebruikt.&#13;&#10;&#13;&#10;&#13;&#10;1:&#13;&#10;Toepassing als kicker&#13;&#10;-Pakketteller graag visualiseren&#13;&#10;-Sensor straigher kan niet worden geselecteerd en &#13;&#10; iKopOffsetSTR ook niet&#13;&#10;-iMinSpeed in service menu (advies waarde: &gt; 0)&#13;&#10;&#13;&#10;2:&#13;&#10;Toepassing als sprayer&#13;&#10;-Pakketteller graag visualiseren&#13;&#10;-Sensor straigher kan niet worden geselecteerd en &#13;&#10; iKopOffsetSTR ook niet&#13;&#10;-iMinSpeed in service menu (advies waarde: &gt; 0)&#13;&#10;&#13;&#10;3:&#13;&#10;Toepassing als conveyor aansturing&#13;&#10;&#13;&#10;-Pakketteller niet visualiseren (staat al op 1)&#13;&#10;-Sensor straigher kan niet worden geselecteerd en &#13;&#10; iKopOffsetSTR ook niet.&#13;&#10;-iMinSpeed in service menu (advies waarde &gt; 0)&#13;&#10;-iStart wel visualiseren! (idee Jasper)&#13;&#10;&#13;&#10;&#13;&#10;4:&#13;&#10;Toepassing als LSU&#13;&#10;&#13;&#10;-Pakketteller niet visualiseren (staat al op 1)&#13;&#10;-Sensor straigher kan niet worden geselecteerd en &#13;&#10; iKopOffsetSTR ook niet.&#13;&#10;-iMinSpeed in service menu (advies waarde: 0)&#13;&#10;&#13;&#10;&#13;&#10;5:&#13;&#10;Toepassing als Straighter&#13;&#10;&#13;&#10;-Pakketteller niet visualiseren (staat al op 1)&#13;&#10;-Geen sensorkeuze (iSensor staat op 3)&#13;&#10; Alleen iKopOffsetSTR instelbaar.&#13;&#10;-iMinSpeed in service menu (advies waarde: 0)"/>
		<Server Name="oError" GUID="{33A41A27-71CB-46DB-8A40-5FFCC1C848AD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="oOutputHW" GUID="{58801528-B58F-46AD-BBA1-EF38248575CC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Operator signalering&#13;&#10;&#13;&#10;Deze waarde geeft de status van de uitgang aan&#13;&#10;Bereik:&#13;&#10;0: Off&#13;&#10;1: on&#13;&#10;&#13;&#10;"/>
		<Server Name="oSensorHW" GUID="{70BD10CD-A64B-4156-953F-E8828ED887A5}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Operator signalering&#13;&#10;&#13;&#10;&#13;&#10;Deze uitgang geeft de status van de &#13;&#10;geselecteerde sensor aan.&#13;&#10;Bereik:&#13;&#10;0: off&#13;&#10;1: on&#13;&#10;"/>
		<Server Name="Present" GUID="{63476753-5258-4040-82B4-90CE7AF27344}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="cData" Required="false" Internal="false"/>
		<Client Name="cHeadNr" Required="true" Internal="false"/>
		<Client Name="cType" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="SV"/>
		<Dokumentation Revision="1.0" Date="2014-09-23" Author="SV" Company="JD" Description="Kopie van VisuTeller. TaskOnOff server verijderd. TaskOnOff code verwijderd."/>
	</RevDoku>
</Class>
*)
VisuTeller_Teller : CLASS
  //Servers:
	Classserver 	: SvrChCmd_DINT;
	iHeadnr 	: SvrCh_DINT;
	Present 	: SvrCh_DINT;
	iType 	: SvrCh_DINT;
	iOnOff 	: SvrCh_DINT;
	iTest 	: SvrCh_DINT;
	iSensor 	: SvrCh_DINT;
	i2SenCnt 	: SvrCh_DINT;
	oSensorHW 	: SvrCh_DINT;
	oOutputHW 	: SvrCh_DINT;
	iKopOffsetL 	: SvrCh_DINT;
	iKopOffsetR 	: SvrCh_DINT;
	iKopOffsetSTR 	: SvrCh_DINT;
	iKopOpkominMs 	: SvrCh_DINT;
	iKopAfvalinMs 	: SvrCh_DINT;
	iMinSpeed 	: SvrCh_DINT;
	iBoxlengte 	: SvrCh_DINT;
	iStart 	: SvrCh_DINT;
	iLengte 	: SvrCh_DINT;
	oError 	: SvrCh_DINT;
	iPakket1SET 	: SvrCh_DINT;
	iPakket1 	: SvrCh_DINT;
	iPakket2SET 	: SvrCh_DINT;
	iPakket2 	: SvrCh_DINT;
	iBoxLengte_Max 	: SvrCh_DINT;
	iBoxLengte_Min 	: SvrCh_DINT;
	iStart_Max 	: SvrCh_DINT;
	iStart_Min 	: SvrCh_DINT;
	iLengte_Max 	: SvrCh_DINT;
	iLengte_Min 	: SvrCh_DINT;
  //Clients:
	cData 	: CltCh_DINT;
	cHeadNr 	: CltCh_DINT;
	cType 	: CltCh_DINT;
  //Variables:
		Kopdata 	: ^tKop;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL Starting
		VAR_INPUT
			In 	: DINT;
		END_VAR
		VAR_OUTPUT
			Out 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Present::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iOnOff::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iTest::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iSensor::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL i2SenCnt::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL oSensorHW::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL oOutputHW::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iKopOffsetL::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iKopOffsetR::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iKopOffsetSTR::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iKopOpkominMs::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iKopAfvalinMs::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iMinSpeed::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iBoxlengte::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iBoxlengte::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iStart::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iLengte::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL oError::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket1SET::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket1::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket2SET::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL iPakket2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB VisuTeller_Teller::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_VISUTELLER_TELLER
1$UINT, 0$UINT, (SIZEOF(::VisuTeller_Teller))$UINT, 
30$UINT, 3$UINT, 0$UINT, 
TO_UDINT(589051502), "VisuTeller_Teller", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::VisuTeller_Teller.Classserver.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3145829044), "Classserver", 
(::VisuTeller_Teller.iHeadnr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2151938299), "iHeadnr", 
(::VisuTeller_Teller.Present.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3271118861), "Present", 
(::VisuTeller_Teller.iType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(147761316), "iType", 
(::VisuTeller_Teller.iOnOff.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2057821258), "iOnOff", 
(::VisuTeller_Teller.iTest.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1550811521), "iTest", 
(::VisuTeller_Teller.iSensor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2973998657), "iSensor", 
(::VisuTeller_Teller.i2SenCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2112812101), "i2SenCnt", 
(::VisuTeller_Teller.oSensorHW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(28908395), "oSensorHW", 
(::VisuTeller_Teller.oOutputHW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2478257061), "oOutputHW", 
(::VisuTeller_Teller.iKopOffsetL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1181773381), "iKopOffsetL", 
(::VisuTeller_Teller.iKopOffsetR.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3162460966), "iKopOffsetR", 
(::VisuTeller_Teller.iKopOffsetSTR.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(706080597), "iKopOffsetSTR", 
(::VisuTeller_Teller.iKopOpkominMs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4026014199), "iKopOpkominMs", 
(::VisuTeller_Teller.iKopAfvalinMs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2626506503), "iKopAfvalinMs", 
(::VisuTeller_Teller.iMinSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4231128611), "iMinSpeed", 
(::VisuTeller_Teller.iBoxlengte.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2939198502), "iBoxlengte", 
(::VisuTeller_Teller.iStart.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(932878885), "iStart", 
(::VisuTeller_Teller.iLengte.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1913220094), "iLengte", 
(::VisuTeller_Teller.oError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(593989830), "oError", 
(::VisuTeller_Teller.iPakket1SET.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3521588198), "iPakket1SET", 
(::VisuTeller_Teller.iPakket1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(776951796), "iPakket1", 
(::VisuTeller_Teller.iPakket2SET.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3276964872), "iPakket2SET", 
(::VisuTeller_Teller.iPakket2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3074819662), "iPakket2", 
(::VisuTeller_Teller.iBoxLengte_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2932162565), "iBoxLengte_Max", 
(::VisuTeller_Teller.iBoxLengte_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2462613340), "iBoxLengte_Min", 
(::VisuTeller_Teller.iStart_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(314694732), "iStart_Max", 
(::VisuTeller_Teller.iStart_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(785179413), "iStart_Min", 
(::VisuTeller_Teller.iLengte_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(189306869), "iLengte_Max", 
(::VisuTeller_Teller.iLengte_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(927312044), "iLengte_Min", 
//Clients:
(::VisuTeller_Teller.cData.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1666389071), "cData", 
(::VisuTeller_Teller.cHeadNr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(607365045), "cHeadNr", 
(::VisuTeller_Teller.cType.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1115598853), "cType", 
END_FUNCTION


#define USER_CNT_VisuTeller_Teller 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_VisuTeller_Teller] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION VisuTeller_Teller::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_VisuTeller_Teller, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	Classserver.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Classserver.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iHeadnr.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iHeadnr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Present.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Present::Write() );
	IF Present.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iOnOff.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iOnOff::Write() );
	IF iOnOff.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iTest.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iTest::Write() );
	IF iTest.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iSensor.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iSensor::Write() );
	IF iSensor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	i2SenCnt.pMeth			:= StoreMethod( #M_RD_DIRECT(), #i2SenCnt::Write() );
	IF i2SenCnt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	oSensorHW.pMeth			:= StoreMethod( #oSensorHW::Read(), #M_NO_F() );
	IF oSensorHW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	oOutputHW.pMeth			:= StoreMethod( #oOutputHW::Read(), #M_NO_F() );
	IF oOutputHW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iKopOffsetL.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iKopOffsetL::Write() );
	IF iKopOffsetL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iKopOffsetR.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iKopOffsetR::Write() );
	IF iKopOffsetR.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iKopOffsetSTR.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iKopOffsetSTR::Write() );
	IF iKopOffsetSTR.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iKopOpkominMs.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iKopOpkominMs::Write() );
	IF iKopOpkominMs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iKopAfvalinMs.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iKopAfvalinMs::Write() );
	IF iKopAfvalinMs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iMinSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iMinSpeed::Write() );
	IF iMinSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iBoxlengte.pMeth			:= StoreMethod( #iBoxlengte::Read(), #iBoxlengte::Write() );
	IF iBoxlengte.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iStart.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iStart::Write() );
	IF iStart.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iLengte.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iLengte::Write() );
	IF iLengte.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	oError.pMeth			:= StoreMethod( #oError::Read(), #M_NO_F() );
	IF oError.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iPakket1SET.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iPakket1SET::Write() );
	IF iPakket1SET.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iPakket1.pMeth			:= StoreMethod( #iPakket1::Read(), #iPakket1::Write() );
	IF iPakket1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iPakket2SET.pMeth			:= StoreMethod( #M_RD_DIRECT(), #iPakket2SET::Write() );
	IF iPakket2SET.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iPakket2.pMeth			:= StoreMethod( #iPakket2::Read(), #iPakket2::Write() );
	IF iPakket2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION




FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::Init

if  _FirstScan = 1 then

    iHeadnr := cHeadNr;
    
    //aantal Headnummers begrenzen
    if    iHeadnr < 1 then
          iHeadnr :=1;
    elsif iHeadnr >8 then
          iHeadnr := 8;
    end_if;
        
        
        
        
        
    Kopdata:=(cData.Read())$^tKop;
    Kopdata^.iBoxLengte_Max[iHeadnr] := 2000;
    Kopdata^.iBoxLengte_Min[iHeadnr] := 0; 
    Kopdata^.iStart_Max[iHeadnr] := 2000; 
    Kopdata^.iStart_Min[iHeadnr] := 0; 
    Kopdata^.iLengte_Max[iHeadnr] := 2000; 
    Kopdata^.iLengte_Min[iHeadnr] := 0; 
    
    iBoxLengte_Max := Kopdata^.iBoxLengte_Max[iHeadnr];
    iBoxLengte_Min := Kopdata^.iBoxLengte_Min[iHeadnr];
    iStart_Max := Kopdata^.iStart_Max[iHeadnr];
    iStart_Min := Kopdata^.iStart_Min[iHeadnr];
    iLengte_Max := Kopdata^.iLengte_Max[iHeadnr];
    iLengte_Min := Kopdata^.iLengte_Min[iHeadnr];
  
    iType := cType;

    // waardes begrenzen      
    if      iType < 0 then
            iType := 0;
    elsif   iType >5 then
            iType :=5;
    end_if;  
    
    //Bij type conveyor, lsu en stopper pakketteller op 1 zetten.
    if      iType =3 | 
            iType =4 | 
            iType =5  then
            iPakket1SET := 1;
            iPakket1SET.Write(iPakket1SET);
            iPakket2SET := 0;
            iPakket2SET.Write(iPakket2SET);
    end_if;  
    
    if      itype >= 1 & itype <= 4 then
            //Hoeveel fotocellen? tbv de counter -> Links of alleen rechts
            if    i2SenCnt = 0 then
                  iSensor := 1;
                  iSensor.Write(iSensor);
            else
                    if    iSensor < 1 then
                          iSensor := 1;
                          iSensor.Write(iSensor);
                    elsif iSensor > 2  then
                          iSensor := 2;
                          iSensor.Write(iSensor);
                    end_if;     
            end_if;  
            iKopOffsetSTR.Write(input:=0);
            
    //Type 5:Stopper/Straighter
    elsif   itype = 5  then
            iKopOffsetL.Write(input:=0);
            iKopOffsetR.Write(input:=0);
            iSensor := 3;
            iSensor.Write(iSensor);               
    end_if;
      
    if      iType =3 then
            iLengte_Max:=5000;  
            iLengte_Max.Write(iLengte_Max);
            iKopOpkominMs :=0;
            iKopOpkominMs.Write(input:=iKopOpkominMs);
            iKopAfvalinMs :=0;
            iKopAfvalinMs.Write(input:=iKopAfvalinMs);
    else
            iLengte_Max:=2000;            
            iLengte_Max.Write(iLengte_Max);
    end_if;          
    
    
    if      iType =4 | iType =5  then
            iMinSpeed := 0;
            iMinSpeed.Write(input:=0);
    end_if;
    
    

    Kopdata^.iType[iHeadnr] := iType;    
    
    Present.Write(input:=Kopdata^.Present[iHeadnr]);
    iMinSpeed.Write(input:=Kopdata^.MinSpeed[iHeadnr]);
    iOnOff.Write(input:=Kopdata^.OnOff[iHeadnr]);  
    iTest.Write(input:=Kopdata^.Test[iHeadnr]);
    iSensor.Write(input:=Kopdata^.Sensor[iHeadnr]);
    i2SenCnt.Write(input:=Kopdata^.i2SensorCNT[iHeadnr]);
    iKopOffsetL.Write(input:=Kopdata^.OffsetL[iHeadnr]);
    iKopOffsetR.Write(input:=Kopdata^.OffsetR[iHeadnr]);
    iKopOffsetSTR.Write(input:=Kopdata^.OffsetSTR[iHeadnr]);
    iKopOpkominMs.Write(input:=Kopdata^.TopkomInMs[iHeadnr]);
    iKopAfvalinMs.Write(input:=Kopdata^.TafvalInMs[iHeadnr]);
    iBoxlengte.Write(input:=Kopdata^.Boxlengte[iHeadnr]);
    iStart.Write(input:=Kopdata^.Start[iHeadnr]);
    iLengte.Write(input:=Kopdata^.Lengte[iHeadnr]);
    iPakket1SET.Write(input:=Kopdata^.Pakket1SET[iHeadnr]);
    iPakket1.Write(input:=Kopdata^.Pakket1[iHeadnr]);
    iPakket2SET.Write(input:=Kopdata^.Pakket2SET[iHeadnr]);
    iPakket2.Write(input:=Kopdata^.Pakket2[iHeadnr]);    
    

end_if;




END_FUNCTION



FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
   
  
      oSensorHW.Read();
      iBoxlengte.Read();
      oError.Read();
      iPakket1.Read();
      iPakket2.Read();
      oOutputHW.Read();
 
      // 20140827 DW 
      i2SenCnt := Kopdata^.i2SensorCNT[iHeadnr];
 

 
 
 state := READY;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iTest::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iTest := input;
  Kopdata^.Test[iHeadnr]:=iTest;
 	result := iTest;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iSensor::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iSensor := input;
  
  if      itype >= 1 & itype <= 4 then
          //Hoeveel fotocellen? tbv de counter -> Links of alleen rechts
          if    i2SenCnt = 0 then
                iSensor := 1;
          else
                  if    iSensor < 1 then
                        iSensor := 1;
                  elsif iSensor > 2  then
                        iSensor := 2;
                  end_if;     
          end_if;        
  //Type 5:Stopper/Straighter
  elsif   itype = 5  then
          iSensor := 3;           
  end_if;
  
  Kopdata^.Sensor[iHeadnr] := iSensor;
 	result := iSensor;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::oSensorHW::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  oSensorHW := Kopdata^.SensorHW[iHeadnr];
	output := oSensorHW;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::oError::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  oError := Kopdata^.Error[iHeadnr];
	output := oError;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iKopOffsetL::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iKopOffsetL := input;
  Kopdata^.OffsetL[iHeadnr] := iKopOffsetL;
 	result := iKopOffsetL;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iKopOffsetR::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iKopOffsetR := input;
  Kopdata^.OffsetR[iHeadnr] := iKopOffsetR;
 	result := iKopOffsetR;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iKopOffsetSTR::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iKopOffsetSTR := input;
  Kopdata^.OffsetSTR[iHeadnr] := iKopOffsetSTR;
 	result := iKopOffsetSTR;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iKopOpkominMs::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iKopOpkominMs := input;
  Kopdata^.TopkomInMs[iHeadnr] := iKopOpkominMs;
 	result := iKopOpkominMs;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iKopAfvalinMs::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iKopAfvalinMs := input;
  Kopdata^.TafvalInMs[iHeadnr] := iKopAfvalinMs;
 	result := iKopAfvalinMs;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iMinSpeed::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iMinSpeed := input;
  Kopdata^.MinSpeed[iHeadnr] := iMinSpeed;
 	result := iMinSpeed;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iBoxlengte::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  iBoxlengte := Kopdata^.Boxlengte[iHeadnr];
	output := iBoxlengte;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iBoxlengte::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iBoxlengte := input;
  
  //start en lengte spoor kan nooit groter zijn dan de boxlengte, behalve bij type conveyor.
  if      iType = 1 | 
          iType =2 | 
          iType = 4 | 
          iType = 5 then
          if      iStart > iBoxlengte then
                  iStart := iBoxlengte;
                  iStart.Write(input:=iStart);
          elsif   iLengte > iBoxlengte then
                  iLengte := iBoxlengte;
                  iLengte.Write(input:=iLengte);
          end_if;
  end_if;  
  
  Kopdata^.Boxlengte[iHeadnr] := iBoxlengte;
 	result := iBoxlengte;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iStart::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iStart := input;
  
    //start en lengte spoor kan nooit groter zijn dan de boxlengte, behalve bij type conveyor.
  if      iType = 1 | 
          iType =2 | 
          iType = 4 | 
          iType = 5 then
          if      iStart > iBoxlengte then
                  iStart := iBoxlengte;
          elsif   iLengte > iBoxlengte then
                  iLengte := iBoxlengte;
                  iLengte.Write(input:=iLengte);
          end_if;
  end_if; 
  
  
  
  Kopdata^.Start[iHeadnr] := iStart;
 	result := iStart;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iLengte::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iLengte := input;
  
  //start en lengte spoor kan nooit groter zijn dan de boxlengte, behalve bij type conveyor.
  if      iType = 1 | 
          iType =2 | 
          iType = 4 | 
          iType = 5 then
          if      iStart > iBoxlengte then
                  iStart := iBoxlengte;
                  iStart.Write(input:=iStart);
          elsif   iLengte > iBoxlengte then
                  iLengte := iBoxlengte;
          end_if;
  end_if;   
  
  Kopdata^.Lengte[iHeadnr] := iLengte;
 	result := iLengte;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  iPakket1 := Kopdata^.Pakket1[iHeadnr];
	output := iPakket1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket1::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iPakket1 := input;
  
  if    iPakket1 > iPakket1SET then
        iPakket1 := 0; // iPakket1SET;
  end_if;    
  
  Kopdata^.Pakket1[iHeadnr] := iPakket1;
 	result := iPakket1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  iPakket2 := Kopdata^.Pakket2[iHeadnr];
	output := iPakket2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iPakket2 := input;
  if    iPakket2 > iPakket2SET then
        iPakket2 := 0; // iPakket2SET;
  end_if;  
  
  Kopdata^.Pakket2[iHeadnr] := iPakket2;
 	result := iPakket2;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket1SET::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iPakket1SET := input;
  //pakketteller configureren
  if    iPakket1SET <= 0 then
        iPakket1SET := 1;
  end_if;  

  if      iType =3 | 
          iType =4 | 
          iType =5  then
          iPakket1SET := 1;
  end_if; 


  Kopdata^.Pakket1SET[iHeadnr] := iPakket1SET;
 	result := iPakket1SET;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iPakket2SET::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	iPakket2SET := input;
  if    iPakket2SET < 0 then
        iPakket2SET := 0;
  end_if; 
  
  if      iType =3 | 
          iType =4 | 
          iType =5  then
          iPakket2SET := 0;
  end_if; 
  
  
  Kopdata^.Pakket2SET[iHeadnr] := iPakket2SET;
 	result := iPakket2SET;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::oOutputHW::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR


  oOutputHW := Kopdata^.OutputHW[iHeadnr];
	output := oOutputHW;
  
  
END_FUNCTION











FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::iOnOff::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR


	iOnOff := input;
  if  iOnOff < 0 | iOnOff > 1 then
      iOnOff := 0;
  end_if;    
  Kopdata^.OnOff[iHeadnr] := iOnOff;
 	result := iOnOff;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::i2SenCnt::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	i2SenCnt := input;
  if      i2SenCnt < 0 then
          i2SenCnt := 0;       // 1 sensor links
  elsif   i2SenCnt > 1  then
          i2SenCnt := 1;       // 2 sensoren links en rechts 
  end_if;  

  Kopdata^.i2SensorCNT[iHeadnr] := i2SenCnt;
 	result := i2SenCnt;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VisuTeller_Teller::Present::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Present := input;
  if    Present <> 1 then
        Present := 0;
  end_if;
  
  Kopdata^.Present[iHeadnr] := Present;

	result := Present;

END_FUNCTION
