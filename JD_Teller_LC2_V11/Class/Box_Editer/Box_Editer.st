//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Box_Editer"
	Revision           = "1.7"
	GUID               = "{F93FAED3-747C-4B4B-91B7-945C57ABFAE6}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(750,1860)">
	<Channels>
		<Server Name="ClassSvr" GUID="{5407852E-3D3C-4DD9-AE0B-E27EDB3D63DA}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Parameter_Ok" GUID="{71657C57-4D99-450F-AC8A-BB115AEADDB8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Visu&#13;&#10;&#13;&#10;Als een doos berekend wordt dan wordt &#13;&#10;er gecontroleerd of de parameters kloppen&#13;&#10;&#13;&#10;Bij&#13;&#10;0: Fout&#13;&#10;1: Goed&#13;&#10;&#13;&#10;De servers T_Status, en verder geven de foute waarden per parameter aan&#13;&#10;"/>
		<Server Name="Presets_MinMax" GUID="{A8864CFF-187B-4D7C-8951-8BF0F8CA1170}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ResetValues" GUID="{3221CB5B-C011-4570-AE0C-3522CD9C4404}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_BoxMogelijkopMachine" GUID="{E014D1BE-35D2-4220-9404-ECDF0C5F1AC0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Is deze doos te draaien op de machine?&#13;&#10;&#13;&#10;0: nee&#13;&#10;1: ja&#13;&#10;"/>
		<Server Name="s_BoxType" GUID="{DE24F3C6-1CB2-492D-88A6-4FA0C24B5464}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="s_Calc_Box" GUID="{05C26B7B-B61B-4CF3-B52A-752B491C2A52}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Doosnaam" GUID="{8191C556-9FF1-4D50-BDF4-206B7FAE896E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_MaxLength" GUID="{E2CBE7E1-AC18-40EA-A4FF-356B1C8CA74E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MaxWidth" GUID="{955AD520-AB04-4D21-AB7A-95CEF9AFDD51}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Offset" GUID="{BD168BD0-679B-40F8-BDA0-8EC1092AFEB3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Offset_Max" GUID="{1104585D-1590-471D-A770-1082FBED3939}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Offset_Min" GUID="{574C983D-120C-480F-890A-84DCA73629F2}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Refresh_Values" GUID="{FDDFD6F4-3660-415E-A820-6130DFAE857E}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_T" GUID="{C6E1D6CE-577C-47B5-A4EE-E503926FEFB6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_T_Max" GUID="{17057BF3-55C9-458E-B796-C256F3FACD25}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_T_Min" GUID="{DB20B03B-4C33-451A-A901-B3D1D6EDE100}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_U" GUID="{39B6DE4B-FD64-40F6-9896-FC0CB2C63769}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_U_Max" GUID="{8EB25596-2B19-4E2A-B54E-BD3772D1D26D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_U_Min" GUID="{D6EC4B1A-7EFE-4FC2-8D5A-77AEF1F4A725}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_V" GUID="{8887C300-A5D2-42FB-B2B8-B4D23C189CD2}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_V_Max" GUID="{6EDEEBC6-424A-499A-83EB-67D83EFCBC11}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_V_Min" GUID="{AAD6F2B7-6DF2-4489-BF12-F50D9B56FCD7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_W" GUID="{610F44FC-BA53-4F5C-A1B9-61EF2871C055}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_W_Max" GUID="{90C43CBF-8EEE-418C-B7FF-7C8CBF3E1559}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_W_Min" GUID="{396FA8B9-DD49-4F57-8D7D-D07E7200F2C5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_X" GUID="{D184C040-3084-4B15-9CB2-9F6E258AF5F9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_X_Max" GUID="{600D9AD3-F541-4594-9E39-DFFD6385C863}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_X_Min" GUID="{FBEEA7FE-B62E-4EE6-9E03-3A07CB411D67}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Y" GUID="{87B69487-5BA6-4BBE-849B-693102706B5D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Y_Max" GUID="{5E187E6A-1ABC-45EA-877A-371CD72AC09E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Y_Min" GUID="{26D7A4F4-1264-4CD3-9D65-5D7601B0DCBE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Z" GUID="{1EF2BE9B-134E-4EC8-B3D1-CCB4A276AA41}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Z_Max" GUID="{626675C6-2800-4412-995A-03F80B7EFA85}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Z_Min" GUID="{6021FB89-E104-4CF7-84F8-B33D0A5EE867}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="T_Status" GUID="{0E7D6AB7-42AA-4FFF-867D-C02538BCDC11}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="U_Status" GUID="{1D15E291-C0F2-4E52-B8F0-185514F52982}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="V_Status" GUID="{222ACFCA-B2EB-46F1-9DF6-96B80CDE4A99}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="W_Status" GUID="{8F612B54-B406-4C1B-875F-29B87F882304}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="X_Status" GUID="{009D7220-82EA-436E-BB22-783B2F7248A0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Y_Status" GUID="{A068F179-8493-436A-962D-24349F3901DB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Z_Status" GUID="{24B14F2B-68A7-4B64-A4CD-9A98E918E358}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="c_DoosData" Required="true" Internal="false"/>
		<Client Name="c_Mask_Out" Required="true" Internal="false"/>
		<Client Name="c_Refresh_Preview" Required="true" Internal="false"/>
		<Client Name="c_Refresh_Values01" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values02" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values03" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values04" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values05" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values06" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values07" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values08" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values09" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values10" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values11" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values12" Required="false" Internal="false"/>
		<Client Name="c_Refresh_Values13" Required="true" Internal="false"/>
		<Client Name="c_Refresh_Values14" Required="true" Internal="false"/>
		<Client Name="c_UpdatePrefold" Required="true" Internal="false"/>
		<Client Name="c_WriteCalc" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="J van Diggelen"/>
		<Dokumentation Revision="1.7" Date="2014-04-22" Author="J van Diggelen" Company="JD" Description="Doos14 toegevoegd"/>
		<Dokumentation Revision="1.6" Date="2014-01-27" Author="J van Diggelen" Company="JD" Description="Mask wordt uitgestuurd"/>
		<Dokumentation Revision="1.5" Date="2013-09-21" Author="J van Diggelen" Company="JD" Description="Warning parameter never used verwijderd"/>
		<Dokumentation Revision="1.4" Date="2013-08-21" Author="J van Diggelen" Company="JD" Description="client aanpassing ivm prefold knop"/>
		<Dokumentation Revision="1.3" Date="2012-08-28" Author="J van Diggelen" Company="JD" Description="-Doostype 13 toegevoegd"/>
		<Dokumentation Revision="1.2" Date="2012-08-02" Author="J van Diggelen" Company="JD" Description="-Extra server aangemaakt ResetValues Dit om bij nieuwe doos de doosdata op 0 te zetten"/>
		<Dokumentation Revision="1.1" Date="2012-01-30" Author="J van Diggelen" Company="JD" Description="-Bij boxtype 0 wordt er een Maximale length van 2000 in de init ingevoerd. &#13;&#10;Dit om bij de lijm een spoor in te kunnen geven."/>
		<Dokumentation Revision="1.0" Date="2011-12-06" Author="J van Diggelen" Company="JD" Description="-Boxeditor is uitgebreid zodat er per type doos de service instellingen kan worden ingegeven"/>
	</RevDoku>
</Class>
*)
Box_Editer : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	s_Doosnaam 	: SvrCh_tDoosnaam;
	s_BoxType 	: SvrCh_DINT;
	s_BoxMogelijkopMachine 	: SvrCh_DINT;
	Presets_MinMax 	: SvrCh_tModel;
	s_T 	: SvrCh_DINT;
	s_U 	: SvrCh_DINT;
	s_V 	: SvrCh_DINT;
	s_W 	: SvrCh_DINT;
	s_X 	: SvrCh_DINT;
	s_Y 	: SvrCh_DINT;
	s_Z 	: SvrCh_DINT;
	s_Offset 	: SvrCh_DINT;
	s_MaxLength 	: SvrCh_DINT;
	s_MaxWidth 	: SvrCh_DINT;
	s_T_Max 	: SvrCh_DINT;
	s_T_Min 	: SvrCh_DINT;
	s_U_Max 	: SvrCh_DINT;
	s_U_Min 	: SvrCh_DINT;
	s_V_Max 	: SvrCh_DINT;
	s_V_Min 	: SvrCh_DINT;
	s_W_Max 	: SvrCh_DINT;
	s_W_Min 	: SvrCh_DINT;
	s_X_Max 	: SvrCh_DINT;
	s_X_Min 	: SvrCh_DINT;
	s_Y_Max 	: SvrCh_DINT;
	s_Y_Min 	: SvrCh_DINT;
	s_Z_Max 	: SvrCh_DINT;
	s_Z_Min 	: SvrCh_DINT;
	s_Offset_Max 	: SvrCh_DINT;
	s_Offset_Min 	: SvrCh_DINT;
	s_Refresh_Values 	: SvrCh_DINT;
	s_Calc_Box 	: SvrCh_DINT;
	Parameter_Ok 	: SvrCh_DINT;
	T_Status 	: SvrCh_DINT;
	U_Status 	: SvrCh_DINT;
	V_Status 	: SvrCh_DINT;
	W_Status 	: SvrCh_DINT;
	X_Status 	: SvrCh_DINT;
	Y_Status 	: SvrCh_DINT;
	Z_Status 	: SvrCh_DINT;
	ResetValues 	: SvrCh_DINT;
  //Clients:
	c_DoosData 	: CltChCmd_RAMex;
	c_Refresh_Preview 	: CltCh_DINT;
	c_Refresh_Values01 	: CltCh_DINT;
	c_Refresh_Values02 	: CltCh_DINT;
	c_Refresh_Values03 	: CltCh_DINT;
	c_Refresh_Values04 	: CltCh_DINT;
	c_Refresh_Values05 	: CltCh_DINT;
	c_Refresh_Values06 	: CltCh_DINT;
	c_Refresh_Values07 	: CltCh_DINT;
	c_Refresh_Values08 	: CltCh_DINT;
	c_Refresh_Values09 	: CltCh_DINT;
	c_Refresh_Values10 	: CltCh_DINT;
	c_Refresh_Values11 	: CltCh_DINT;
	c_Refresh_Values12 	: CltCh_DINT;
	c_Refresh_Values13 	: CltCh_DINT;
	c_Refresh_Values14 	: CltCh_DINT;
	c_WriteCalc 	: CltCh_DINT;
	c_UpdatePrefold 	: CltCh_DINT;
	c_Mask_Out 	: CltCh_DINT;
  //Variables:
		DoosData 	: ^tDoosParameters;
		i 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION Refesh;
	
	FUNCTION VIRTUAL GLOBAL s_BoxType::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_BoxMogelijkopMachine::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Presets_MinMax::Write
		VAR_INPUT
			input (EAX) 	: tModel;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: tModel;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_T::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_U::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_V::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_W::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_X::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Y::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Z::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Offset::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_MaxLength::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_MaxWidth::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_T_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_T_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_U_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_U_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_V_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_V_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_W_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_W_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_X_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_X_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Y_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Y_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Z_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Z_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Offset_Max::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Offset_Min::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Refresh_Values::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Calc_Box::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ResetValues::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RAMex


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Box_Editer::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_BOX_EDITER
1$UINT, 7$UINT, (SIZEOF(::Box_Editer))$UINT, 
42$UINT, 19$UINT, 0$UINT, 
TO_UDINT(1553235205), "Box_Editer", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Box_Editer.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Box_Editer.s_Doosnaam.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1777833007), "s_Doosnaam", 
(::Box_Editer.s_BoxType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2670114069), "s_BoxType", 
(::Box_Editer.s_BoxMogelijkopMachine.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(869001277), "s_BoxMogelijkopMachine", 
(::Box_Editer.Presets_MinMax.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3869069269), "Presets_MinMax", 
(::Box_Editer.s_T.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3231620493), "s_T", 
(::Box_Editer.s_U.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3080301851), "s_U", 
(::Box_Editer.s_V.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(781253793), "s_V", 
(::Box_Editer.s_W.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1503120439), "s_W", 
(::Box_Editer.s_X.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3374895526), "s_X", 
(::Box_Editer.s_Y.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3190808880), "s_Y", 
(::Box_Editer.s_Z.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(656846986), "s_Z", 
(::Box_Editer.s_Offset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1931878119), "s_Offset", 
(::Box_Editer.s_MaxLength.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1481879144), "s_MaxLength", 
(::Box_Editer.s_MaxWidth.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(286754931), "s_MaxWidth", 
(::Box_Editer.s_T_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3638843800), "s_T_Max", 
(::Box_Editer.s_T_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3840501441), "s_T_Min", 
(::Box_Editer.s_U_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3850661928), "s_U_Max", 
(::Box_Editer.s_U_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3649654641), "s_U_Min", 
(::Box_Editer.s_V_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2720271096), "s_V_Max", 
(::Box_Editer.s_V_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2653500833), "s_V_Min", 
(::Box_Editer.s_W_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2672042824), "s_W_Max", 
(::Box_Editer.s_W_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2739477521), "s_W_Min", 
(::Box_Editer.s_X_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(487896217), "s_X_Max", 
(::Box_Editer.s_X_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(555322304), "s_X_Min", 
(::Box_Editer.s_Y_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(544513321), "s_Y_Max", 
(::Box_Editer.s_Y_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(477733488), "s_Y_Min", 
(::Box_Editer.s_Z_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1742006265), "s_Z_Max", 
(::Box_Editer.s_Z_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1541003424), "s_Z_Min", 
(::Box_Editer.s_Offset_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(293088672), "s_Offset_Max", 
(::Box_Editer.s_Offset_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(762647289), "s_Offset_Min", 
(::Box_Editer.s_Refresh_Values.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(692359299), "s_Refresh_Values", 
(::Box_Editer.s_Calc_Box.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3435414657), "s_Calc_Box", 
(::Box_Editer.Parameter_Ok.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(399273521), "Parameter_Ok", 
(::Box_Editer.T_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1542043698), "T_Status", 
(::Box_Editer.U_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2537797804), "U_Status", 
(::Box_Editer.V_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(432848719), "V_Status", 
(::Box_Editer.W_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3580280785), "W_Status", 
(::Box_Editer.X_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(205958525), "X_Status", 
(::Box_Editer.Y_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3236736483), "Y_Status", 
(::Box_Editer.Z_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1315154432), "Z_Status", 
(::Box_Editer.ResetValues.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3043184560), "ResetValues", 
//Clients:
(::Box_Editer.c_DoosData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(535256988), "c_DoosData", TO_UDINT(933570811), "RAMex", 1$UINT, 16$UINT, 
(::Box_Editer.c_Refresh_Preview.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2826035342), "c_Refresh_Preview", 
(::Box_Editer.c_Refresh_Values01.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(21170598), "c_Refresh_Values01", 
(::Box_Editer.c_Refresh_Values02.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2555009052), "c_Refresh_Values02", 
(::Box_Editer.c_Refresh_Values03.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4014827658), "c_Refresh_Values03", 
(::Box_Editer.c_Refresh_Values04.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1898577193), "c_Refresh_Values04", 
(::Box_Editer.c_Refresh_Values05.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(103730623), "c_Refresh_Values05", 
(::Box_Editer.c_Refresh_Values06.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2670173189), "c_Refresh_Values06", 
(::Box_Editer.c_Refresh_Values07.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3894455443), "c_Refresh_Values07", 
(::Box_Editer.c_Refresh_Values08.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2023731458), "c_Refresh_Values08", 
(::Box_Editer.c_Refresh_Values09.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(261652884), "c_Refresh_Values09", 
(::Box_Editer.c_Refresh_Values10.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1868499057), "c_Refresh_Values10", 
(::Box_Editer.c_Refresh_Values11.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(408434919), "c_Refresh_Values11", 
(::Box_Editer.c_Refresh_Values12.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2169596253), "c_Refresh_Values12", 
(::Box_Editer.c_Refresh_Values13.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4132854219), "c_Refresh_Values13", 
(::Box_Editer.c_Refresh_Values14.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1748159592), "c_Refresh_Values14", 
(::Box_Editer.c_WriteCalc.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4034750134), "c_WriteCalc", 
(::Box_Editer.c_UpdatePrefold.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(377140744), "c_UpdatePrefold", 
(::Box_Editer.c_Mask_Out.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2371029367), "c_Mask_Out", 
END_FUNCTION


#define USER_CNT_Box_Editer 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Box_Editer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Box_Editer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Box_Editer, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_BoxType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_BoxType::Write() );
	IF s_BoxType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_BoxMogelijkopMachine.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_BoxMogelijkopMachine::Write() );
	IF s_BoxMogelijkopMachine.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Presets_MinMax.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Presets_MinMax::Write() );
	IF Presets_MinMax.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_T.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_T::Write() );
	IF s_T.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_U.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_U::Write() );
	IF s_U.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_V.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_V::Write() );
	IF s_V.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_W.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_W::Write() );
	IF s_W.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_X.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_X::Write() );
	IF s_X.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Y.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Y::Write() );
	IF s_Y.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Z.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Z::Write() );
	IF s_Z.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Offset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Offset::Write() );
	IF s_Offset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MaxLength.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_MaxLength::Write() );
	IF s_MaxLength.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MaxWidth.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_MaxWidth::Write() );
	IF s_MaxWidth.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_T_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_T_Max::Write() );
	IF s_T_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_T_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_T_Min::Write() );
	IF s_T_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_U_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_U_Max::Write() );
	IF s_U_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_U_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_U_Min::Write() );
	IF s_U_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_V_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_V_Max::Write() );
	IF s_V_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_V_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_V_Min::Write() );
	IF s_V_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_W_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_W_Max::Write() );
	IF s_W_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_W_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_W_Min::Write() );
	IF s_W_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_X_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_X_Max::Write() );
	IF s_X_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_X_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_X_Min::Write() );
	IF s_X_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Y_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Y_Max::Write() );
	IF s_Y_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Y_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Y_Min::Write() );
	IF s_Y_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Z_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Z_Max::Write() );
	IF s_Z_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Z_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Z_Min::Write() );
	IF s_Z_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Offset_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Offset_Max::Write() );
	IF s_Offset_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Offset_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Offset_Min::Write() );
	IF s_Offset_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Refresh_Values.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Refresh_Values::Write() );
	IF s_Refresh_Values.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Calc_Box.pMeth			:= StoreMethod( #M_RD_DIRECT(), #s_Calc_Box::Write() );
	IF s_Calc_Box.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetValues.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ResetValues::Write() );
	IF ResetValues.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//Er is in de pointer variabele doosdata een array structuur gemaakt om bij elk type doos de minimale en maximale
//waardes in een service scherm te veranderen. 







FUNCTION VIRTUAL GLOBAL Box_Editer::Init

  if c_DoosData.GetSize() <> sizeof(tDoosParameters) then
     c_DoosData.SetSize(udSize:=sizeof(tDoosParameters));
  end_if;
          
  if _FirstScan = 1 then
            
  DoosData := (c_DoosData.GetDataPtr())$^tDoosParameters;
//     s_BoxType := 0;
//     DoosData^.Doostype :=0;       
//     s_BoxType.Write(0);

  s_BoxType.Write(input:=s_BoxType); 

  s_T:=DoosData^.T;
  c_Mask_Out.Write(input:=s_T);
  s_U:=DoosData^.U;
  s_V:=DoosData^.V;
  s_W:=DoosData^.W;
  s_X:=DoosData^.X;   
  s_Y:=DoosData^.Y;
  s_Z:=DoosData^.Z;
  s_Offset:=DoosData^.Offset; 
 
  if s_MaxLength <= 0 then
     s_MaxLength := (2000);
  end_if;


     
  end_if;
 

END_FUNCTION



FUNCTION VIRTUAL GLOBAL Box_Editer::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR



	state := READY;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL Box_Editer::s_BoxType::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_BoxType := input;
  
  // doostype moet tussen 0 en 14 liggen
  if    s_BoxType <0 then
        s_BoxType :=0;
  elsif s_BoxType >14 then
        s_BoxType :=14;
  end_if;

 	result := s_BoxType;

  //Nummerieke doostype
  DoosData^.Doostype := s_BoxType;
  c_UpdatePrefold.Write(input:=1);
  //Doostype
  if     s_BoxType = 0 then
         s_Doosnaam := No_box;  
  elsif  s_BoxType = 1 then
         s_Doosnaam := Langsnaad;
  elsif  s_BoxType = 2 then 
         s_Doosnaam := Driepunt;  
  elsif  s_BoxType = 3 then 
         s_Doosnaam := Driepunt_Vakverdeling;  
  elsif  s_BoxType = 4 then 
         s_Doosnaam := Vierpunt_Infold;  
  elsif  s_BoxType = 5 then 
         s_Doosnaam := Vierpunt_Outfold;  
  elsif  s_BoxType = 6 then 
         s_Doosnaam := Vierpunt_Deksel;        
  elsif  s_BoxType = 7 then 
         s_Doosnaam := Vierpunt_Dubbele_Wand;  
  elsif  s_BoxType = 8 then 
         s_Doosnaam := Zespunt_In_In;  
  elsif  s_BoxType = 9 then 
         s_Doosnaam := Zespunt_In_Out;           
  elsif  s_BoxType = 10 then 
         s_Doosnaam := Zespunt_In_In_Gespiegeld;  
  elsif  s_BoxType = 11 then 
         s_Doosnaam := Driepunt_Gespiegeld;
  elsif  s_BoxType = 12 then 
         s_Doosnaam := Driepunt;  
  elsif  s_BoxType = 13 then 
         s_Doosnaam := Langsnaad2;          
  elsif  s_BoxType = 14 then 
         s_Doosnaam := Driepunt2;           
  end_if;
  
  
 

  
  //Serverwaardes schrijven met variabelen voor type doos 
  if s_BoxType <> 0 then
    s_MaxLength := DoosData^.MinMax[s_BoxType].Max_Invoer_Lengte;
    s_MaxWidth  := DoosData^.MinMax[s_BoxType].Max_Invoer_Breedte;
    s_BoxMogelijkopMachine := DoosData^.MinMax[s_BoxType].BoxMogelijk;
    s_T_Max     := DoosData^.MinMax[s_BoxType].T_Max;
    s_T_Min     := DoosData^.MinMax[s_BoxType].T_Min;
    s_U_Max     := DoosData^.MinMax[s_BoxType].U_Max;
    s_U_Min     := DoosData^.MinMax[s_BoxType].U_Min;
    s_V_Min     := DoosData^.MinMax[s_BoxType].V_Min;
    s_V_Max     := DoosData^.MinMax[s_BoxType].V_Max;
    s_W_Max     := DoosData^.MinMax[s_BoxType].W_Max;
    s_W_Min     := DoosData^.MinMax[s_BoxType].W_Min;
    s_X_Max     := DoosData^.MinMax[s_BoxType].X_Max;
    s_X_Min     := DoosData^.MinMax[s_BoxType].X_Min;
    s_Y_Max     := DoosData^.MinMax[s_BoxType].Y_Max;
    s_Y_Min     := DoosData^.MinMax[s_BoxType].Y_Min;
    s_Z_Max     := DoosData^.MinMax[s_BoxType].Z_Max;
    s_Z_Min     := DoosData^.MinMax[s_BoxType].Z_Min;
    s_Offset_Max:= DoosData^.MinMax[s_BoxType].Offset_Max;
    s_Offset_Min:= DoosData^.MinMax[s_BoxType].Offset_Min;
  end_if;



END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_BoxMogelijkopMachine::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_BoxMogelijkopMachine := input;
  DoosData^.MinMax[s_BoxType].BoxMogelijk := to_bool(s_BoxMogelijkopMachine);
  
  if      s_BoxType = 1 then
          c_Refresh_Values01.Write(input:=1);
  elsif   s_BoxType = 2 then
          c_Refresh_Values02.Write(input:=1);
  elsif   s_BoxType = 3 then
          c_Refresh_Values03.Write(input:=1); 
  elsif   s_BoxType = 4 then
          c_Refresh_Values04.Write(input:=1); 
  elsif   s_BoxType = 5 then
          c_Refresh_Values05.Write(input:=1);  
  elsif   s_BoxType = 6 then
          c_Refresh_Values06.Write(input:=1);
  elsif   s_BoxType = 7 then
          c_Refresh_Values07.Write(input:=1);
  elsif   s_BoxType = 8 then
          c_Refresh_Values08.Write(input:=1);
  elsif   s_BoxType = 9 then
          c_Refresh_Values09.Write(input:=1); 
  elsif   s_BoxType = 10 then
          c_Refresh_Values10.Write(input:=1);
  elsif   s_BoxType = 11 then
          c_Refresh_Values11.Write(input:=1);
  elsif   s_BoxType = 12 then
          c_Refresh_Values12.Write(input:=1);
  elsif   s_BoxType = 13 then
          c_Refresh_Values13.Write(input:=1);  
  elsif   s_BoxType = 14 then
          c_Refresh_Values14.Write(input:=1);            
  end_if;    

 	result := s_BoxMogelijkopMachine;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_T::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_T := input;
  DoosData^.T := s_T;
  c_Mask_Out.Write(input:=s_T);
 	result := s_T;
  
  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_U::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_U := input;
  DoosData^.U := s_U;
 	result := s_U;

  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_V::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_V := input;
 	DoosData^.V := s_V;
  result := s_V;

  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_W::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_W := input;
  DoosData^.W := s_W;
 	result := s_W;

  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_X::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_X := input;
  DoosData^.X := s_X;
  result := s_X;
  
  c_Refresh_Preview.Write(input:=1);  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Y::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Y := input;
  DoosData^.Y := s_Y;
 	result := s_Y;

  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Z::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Z := input;
  DoosData^.Z := s_Z;
 	result := s_Z;
  
  c_Refresh_Preview.Write(input:=1);  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Offset::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Offset := input;
  DoosData^.Offset := s_Offset;
 	result := s_Offset;
  
  c_Refresh_Preview.Write(input:=1);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_MaxLength::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_MaxLength := input;
  DoosData^.MinMax[s_BoxType].Max_Invoer_Lengte := s_MaxLength;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_MaxLength;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_MaxWidth::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_MaxWidth := input; 
  DoosData^.MinMax[s_BoxType].Max_Invoer_Breedte := s_MaxWidth;  
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_MaxWidth;

END_FUNCTION







FUNCTION VIRTUAL GLOBAL Box_Editer::s_T_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_T_Max := input;
  DoosData^.MinMax[s_BoxType].T_Max:= s_T_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven 
 	result := s_T_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_T_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_T_Min := input;
  DoosData^.MinMax[s_BoxType].T_Min:= s_T_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven 
 	result := s_T_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_U_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_U_Max := input;
  DoosData^.MinMax[s_BoxType].U_Max:=s_U_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven 
 	result := s_U_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_U_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_U_Min := input;
  DoosData^.MinMax[s_BoxType].U_Min:= s_U_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_U_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_V_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_V_Max := input;
  DoosData^.MinMax[s_BoxType].V_Max:=s_V_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_V_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_V_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_V_Min := input;
  DoosData^.MinMax[s_BoxType].V_Min:=s_V_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_V_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_W_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_W_Max := input;
  DoosData^.MinMax[s_BoxType].W_Max:=s_W_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_W_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_W_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_W_Min := input;
  DoosData^.MinMax[s_BoxType].W_Min:=s_W_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_W_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_X_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_X_Max := input;
  DoosData^.MinMax[s_BoxType].X_Max:=s_X_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_X_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_X_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_X_Min := input;
  DoosData^.MinMax[s_BoxType].X_Min:=s_X_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_X_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Y_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Y_Max := input;
  DoosData^.MinMax[s_BoxType].Y_Max:=s_Y_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_Y_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Y_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Y_Min := input;
  DoosData^.MinMax[s_BoxType].Y_Min:= s_Y_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven 
 	result := s_Y_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Z_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Z_Max := input;
  DoosData^.MinMax[s_BoxType].Z_Max:= s_Z_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_Z_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Z_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Z_Min := input;
  DoosData^.MinMax[s_BoxType].Z_Min:= s_Z_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_Z_Min;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Offset_Max::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Offset_Max := input;
  DoosData^.MinMax[s_BoxType].Offset_Max:= s_Offset_Max;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_Offset_Max;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Offset_Min::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Offset_Min := input;
  DoosData^.MinMax[s_BoxType].Offset_Min:= s_Offset_Min;
  Refesh(); //Refresh de MinMax classes door met de client te schrijven
 	result := s_Offset_Min;

END_FUNCTION

FUNCTION Box_Editer::Refesh

  if      s_BoxType = 1 then
          c_Refresh_Values01.Write(input:=1);
  elsif   s_BoxType = 2 then
          c_Refresh_Values02.Write(input:=1);
  elsif   s_BoxType = 3 then
          c_Refresh_Values03.Write(input:=1); 
  elsif   s_BoxType = 4 then
          c_Refresh_Values04.Write(input:=1); 
  elsif   s_BoxType = 5 then
          c_Refresh_Values05.Write(input:=1);  
  elsif   s_BoxType = 6 then
          c_Refresh_Values06.Write(input:=1);
  elsif   s_BoxType = 7 then
          c_Refresh_Values07.Write(input:=1);
  elsif   s_BoxType = 8 then
          c_Refresh_Values08.Write(input:=1);
  elsif   s_BoxType = 9 then
          c_Refresh_Values09.Write(input:=1); 
  elsif   s_BoxType = 10 then
          c_Refresh_Values10.Write(input:=1);
  elsif   s_BoxType = 11 then
          c_Refresh_Values11.Write(input:=1);
  elsif   s_BoxType = 12 then
          c_Refresh_Values12.Write(input:=1);   
  elsif   s_BoxType = 13 then
          c_Refresh_Values13.Write(input:=1);          
  elsif   s_BoxType = 14 then
          c_Refresh_Values14.Write(input:=1);            
  end_if;


END_FUNCTION



FUNCTION VIRTUAL GLOBAL Box_Editer::s_Refresh_Values::Write

	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Refresh_Values := input;
  s_Refresh_Values := 0;
  s_BoxType.Write(s_BoxType);
 	result := s_Refresh_Values;


END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::s_Calc_Box::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	s_Calc_Box := input;
  s_Calc_Box := 0;
  
  Parameter_Ok := 0;
  T_Status := 1;
  U_Status := 1;
  V_Status := 1;
  W_Status := 1;
  X_Status := 1;
  Y_Status := 1;
  Z_Status := 1;
  
  
  
    //langsnaad
  if    Doosdata^.Doostype = 1 then  
        
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;


  //3-punt
  elsif Doosdata^.Doostype = 2 then
        

        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;
  
  
  
  //3-punt vakverdeling  
  elsif Doosdata^.Doostype = 3 then  
  
  
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;  
  
  //4-punt infold
  elsif Doosdata^.Doostype = 4 then
       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;   
   

  //4-punt outfold  
  elsif Doosdata^.Doostype = 5 then
  
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;   
  
  //4-punt met deksel 
  elsif Doosdata^.Doostype = 6 then
   
        
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;  
        

  
  //4-punt dubbele wand
  elsif Doosdata^.Doostype = 7 then
        
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (4*Doosdata^.X + Doosdata^.Y) > Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;         
  
  //6-punt in/in
  elsif Doosdata^.Doostype = 8 then
             
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (3*Doosdata^.X + 2*Doosdata^.Y) > Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if; 
  
  //6-punt in/out  
  elsif Doosdata^.Doostype = 9 then             

        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (3*Doosdata^.X + 2*Doosdata^.Y) > Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if; 
  
  //6-punt in/in  
  elsif Doosdata^.Doostype = 10 then
  
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (3*Doosdata^.X + 2*Doosdata^.Y) > Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;  
  
  //3-punt (gespiegeld)
  elsif Doosdata^.Doostype = 11 then  

        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if; 
  
  
  //3-punt (Storaenzo Jonkoping)
  elsif Doosdata^.Doostype = 12 then
        

        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;
 
    //langsnaad2
  elsif Doosdata^.Doostype = 13 then  
        
        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              T_Status := 0;
              V_Status := 0;
        end_if;


        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if; 
        
  //3-punt2 (SK Soest)
  elsif Doosdata^.Doostype = 14 then  

        if    Doosdata^.X >= Doosdata^.W then
              X_Status := 0;
              W_Status := 0;
        end_if;
        if    Doosdata^.Y >= Doosdata^.W then
              Y_Status := 0;
              W_Status := 0;
        end_if;      
              
        if    (2*Doosdata^.X + 2*Doosdata^.Y) >= Doosdata^.W then
              X_Status := 0;
              Y_Status := 0;
              W_Status := 0;
        end_if;       
              
        if    (2*Doosdata^.U) >= Doosdata^.T then
              T_Status := 0;
              U_Status := 0;
        end_if;

        if    (2*Doosdata^.V) >= Doosdata^.T then
              V_Status := 0;
              U_Status := 0;
        end_if;

        if    Doosdata^.Z > 150 then
              Z_Status := 0;
        end_if;
        
        if    T_Status = 1 &
              U_Status = 1 &
              V_Status = 1 &
              W_Status = 1 &
              X_Status = 1 &
              Y_Status = 1 &
              Z_Status = 1 then
              Parameter_Ok := 1;
        end_if;         

 
  end_if;
  
  
  if  Parameter_Ok = 1 then
      c_Mask_Out.Write(input:=Doosdata^.T);
      c_WriteCalc.Write(1);
  end_if;    
  

 	result := s_Calc_Box;

END_FUNCTION








FUNCTION VIRTUAL GLOBAL Box_Editer::Presets_MinMax::Write
	VAR_INPUT
		input (EAX) 	: tModel;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: tModel;
	END_VAR

	Presets_MinMax := input;
  
  if    Presets_MinMax =  m1250 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 1250;
        
              //langsnaad 1250
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 1250 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 200; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 200;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt vakverdeling 1250 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 400;
                  DoosData^.MinMax[i].X_Max := 500;
                  DoosData^.MinMax[i].X_Min := 110;
                  DoosData^.MinMax[i].Y_Max := 500;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt infold 1250
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
  
            
            //4-punt outfold 1250 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 1250
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt dubbele wand 1250
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/in 1250
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/out 1250  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0;      
            
            //6-punt in/in 1250 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 80;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1100;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 150;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 680;
                  DoosData^.MinMax[i].Y_Min := 130;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0;     
            
            //3-punt (gespiegeld) 1250
            elsif i = 11 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 200; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 200;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            
            //3-punt (Storaenzo Jonkoping) 1250
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 200; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 200;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0;

            //langsnaad2 1250
            elsif i = 13 then 
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0; 
                  
            //3-punt2 1250
            elsif i = 14 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 70;
                  DoosData^.MinMax[i].U_Max := 200; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 200;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1250;
                  DoosData^.MinMax[i].W_Min := 270;
                  DoosData^.MinMax[i].X_Max := 450;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 450;
                  DoosData^.MinMax[i].Y_Min := 70;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 625;
                  DoosData^.MinMax[i].Offset_Min := 0;                  
            
            end_if;        
        end_for;
  end_if;
  
  
  if    Presets_MinMax =  m1450 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 1450;
        
              //langsnaad 1450
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 1450 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt vakverdeling 1450 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 200;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1300;
                  DoosData^.MinMax[i].W_Min := 400;
                  DoosData^.MinMax[i].X_Max := 500;
                  DoosData^.MinMax[i].X_Min := 110;
                  DoosData^.MinMax[i].Y_Max := 500;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt infold 1450
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            //4-punt outfold 1450 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 1450
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1280;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0;   
            
            //4-punt dubbele wand 1450
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1280;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/in 1450
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1280;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/out 1450  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1280;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0;     
            
            //6-punt in/in 1450 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1280;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 980;
                  DoosData^.MinMax[i].Y_Min := 155;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0;    
            
            //3-punt (gespiegeld) 1450
            elsif i = 11 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            
            //3-punt (Storaenzo Jonkoping) 1450
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
           
           
           //langsnaad2 1450
            elsif i = 13 then            
           
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0;            
           
            //3-punt2 1450
            elsif i = 14 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 100;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1450;
                  DoosData^.MinMax[i].W_Min := 320;
                  DoosData^.MinMax[i].X_Max := 525;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 525;
                  DoosData^.MinMax[i].Y_Min := 75;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 725;
                  DoosData^.MinMax[i].Offset_Min := 0; 
                       
           end_if;        
        end_for;
  end_if;  
  
  
  if    Presets_MinMax =  m1700 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 1700;
        
              //langsnaad 1700
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 540;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 1700 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 640;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt vakverdeling 1700 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 320;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1500;
                  DoosData^.MinMax[i].W_Min := 400;
                  DoosData^.MinMax[i].X_Max := 640;
                  DoosData^.MinMax[i].X_Min := 110;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt infold 1700
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt outfold 1700 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 1700
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1580;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt dubbele wand 1700
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1580;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/in 1700
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1580;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/out 1700  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1580;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0;        
            
            //6-punt in/in 1700 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1580;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 185;
                  DoosData^.MinMax[i].Z_Max := 3000;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0;    
            
            //3-punt (gespiegeld) 1700
            elsif i = 11 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 640;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            
            //3-punt (Storaenzo Jonkoping) 1700
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 640;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //langsnaad2 1700
            elsif i = 13 then              
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 540;
                  DoosData^.MinMax[i].X_Min := 40;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0;             
            
            //3-punt2 1700
            elsif i = 14 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 250; 
                  DoosData^.MinMax[i].U_Min := 40; 
                  DoosData^.MinMax[i].V_Max := 250;
                  DoosData^.MinMax[i].V_Min := 40;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 380;
                  DoosData^.MinMax[i].X_Max := 640;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 640;
                  DoosData^.MinMax[i].Y_Min := 90;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 850;
                  DoosData^.MinMax[i].Offset_Min := 0;             
            end_if;        
        end_for;
  end_if;   
  
  
  if    Presets_MinMax =  m1900 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 1900;
        
              //langsnaad 1900
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 1900 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt vakverdeling 1900 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 320;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1700;
                  DoosData^.MinMax[i].W_Min := 500;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 150;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 100;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt infold 1900
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //4-punt outfold 1900 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 1900
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1770;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //4-punt dubbele wand 1900
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1770;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //6-punt in/in 1900
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1770;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/out 1900  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1770;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;      
            
            //6-punt in/in 1900 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 1770;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            //3-punt (gespiegeld) 1900
            elsif i = 11 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            
            //3-punt (Storaenzo Jonkoping) 1900
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0; 
                  
                  
                  
            //langsnaad2 1900
            elsif i = 13 then                
           
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;            
           
            //3-punt2 1900
            elsif i = 14 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 740;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 740;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 950;
                  DoosData^.MinMax[i].Offset_Min := 0;            
           end_if;        
        end_for;
  end_if;   
  
  if    Presets_MinMax =  m2300 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 2300;
        
              //langsnaad 2300
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 2300 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            //3-punt vakverdeling 2300 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 320;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 1900;
                  DoosData^.MinMax[i].W_Min := 500;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 150;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 100;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            //4-punt infold 2300
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //4-punt outfold 2300 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1180;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 2300
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2170;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //4-punt dubbele wand 2300
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2170;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //6-punt in/in 2300
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2170;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;
            
            //6-punt in/out 2300  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2170;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;        
            
            //6-punt in/in 2300 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2170;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt (gespiegeld) 2300
            elsif i = 11 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;   
            
            
            //3-punt (Storaenzo Jonkoping) 2300
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;  
          
            //langsnaad2 2300
            elsif i = 13 then                
          
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;           
          
            //3-punt2 2300
            elsif i = 14 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 50; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 50;
                  DoosData^.MinMax[i].W_Max := 2300;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 820;
                  DoosData^.MinMax[i].X_Min := 50;
                  DoosData^.MinMax[i].Y_Max := 820;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;             
          end_if;        
        end_for;
  end_if;     
  
  
  if    Presets_MinMax =  m2800 then
  
  
        for i:= 1 to 14 do
        
            DoosData^.MinMax[i].Max_Invoer_Lengte  := 2000;
            DoosData^.MinMax[i].Max_Invoer_Breedte := 2800;
        
              //langsnaad 2800
            if    i = 1 then  

                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 0;
                  DoosData^.MinMax[i].V_Min := 0;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0; 

            //3-punt 2800 
            elsif i = 2 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 80;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //3-punt vakverdeling 2800 
            elsif i = 3 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 320;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 30; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30;
                  DoosData^.MinMax[i].W_Max := 2400;
                  DoosData^.MinMax[i].W_Min := 500;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 150;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 100;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;   
            
            //4-punt infold 2800
            elsif i = 4 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;  
            
            //4-punt outfold 2800 
            elsif i = 5 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 0;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt met deksel 2800
            elsif i = 6 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2670;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //4-punt dubbele wand 2800
            elsif i = 7 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2670;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/in 2800
            elsif i = 8 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2670;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            //6-punt in/out 2800  
            elsif i = 9 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2670;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;       
            
            //6-punt in/in 2800 
            elsif i = 10 then
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 150;
                  DoosData^.MinMax[i].U_Max := 300;
                  DoosData^.MinMax[i].U_Min := 30;
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 30; 
                  DoosData^.MinMax[i].W_Max := 2670;
                  DoosData^.MinMax[i].W_Min := 0;
                  DoosData^.MinMax[i].X_Max := 300;
                  DoosData^.MinMax[i].X_Min := 30;
                  DoosData^.MinMax[i].Y_Max := 1480;
                  DoosData^.MinMax[i].Y_Min := 250;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1150;
                  DoosData^.MinMax[i].Offset_Min := 0;    
            
            //3-punt (gespiegeld) 2800
            elsif i = 11 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 80;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0; 
            
            
            //3-punt (Storaenzo Jonkoping) 2800
            elsif i = 12 then      
                  
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 80;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0;  
                  
            //langsnaad2 2800
            elsif i = 13 then                    
               
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 80;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0;                
               
            //3-punt2 2800
            elsif i = 14 then  
            
                  DoosData^.MinMax[i].T_Max := 2000;
                  DoosData^.MinMax[i].T_Min := 160;
                  DoosData^.MinMax[i].U_Max := 300; 
                  DoosData^.MinMax[i].U_Min := 80; 
                  DoosData^.MinMax[i].V_Max := 300;
                  DoosData^.MinMax[i].V_Min := 80;
                  DoosData^.MinMax[i].W_Max := 2800;
                  DoosData^.MinMax[i].W_Min := 510;
                  DoosData^.MinMax[i].X_Max := 1000;
                  DoosData^.MinMax[i].X_Min := 80;
                  DoosData^.MinMax[i].Y_Max := 1000;
                  DoosData^.MinMax[i].Y_Min := 150;
                  DoosData^.MinMax[i].Z_Max := 300;
                  DoosData^.MinMax[i].Z_Min := 0;
                  DoosData^.MinMax[i].Offset_Max := 1400;
                  DoosData^.MinMax[i].Offset_Min := 0;                
            end_if;        
        end_for;
  end_if;     

  c_Refresh_Values01.Write (c_Refresh_Values01);
  c_Refresh_Values02.Write (c_Refresh_Values02);
  c_Refresh_Values03.Write (c_Refresh_Values03);
  c_Refresh_Values04.Write (c_Refresh_Values04);
  c_Refresh_Values05.Write (c_Refresh_Values05);
  c_Refresh_Values06.Write (c_Refresh_Values06);
  c_Refresh_Values07.Write (c_Refresh_Values07);
  c_Refresh_Values08.Write (c_Refresh_Values08);
  c_Refresh_Values09.Write (c_Refresh_Values09);
  c_Refresh_Values10.Write (c_Refresh_Values10);
  c_Refresh_Values11.Write (c_Refresh_Values11);
  c_Refresh_Values12.Write (c_Refresh_Values12);  
  c_Refresh_Values13.Write (c_Refresh_Values13);   
  c_Refresh_Values14.Write (c_Refresh_Values14);
  
  
  
  
 	result := Presets_MinMax;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Box_Editer::ResetValues::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ResetValues := input;
  
  //Reset van de doosparameters
  
  s_T := 0;
  s_U := 0;
  s_V := 0;
  s_W := 0;
  s_X := 0;
  s_Y := 0;
  s_Z := 0;  
  
 	result := ResetValues;

END_FUNCTION



