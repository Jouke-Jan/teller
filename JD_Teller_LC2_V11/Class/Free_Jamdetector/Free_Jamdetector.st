//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Free_Jamdetector"
	Revision           = "1.1"
	GUID               = "{0C03302D-04BB-4826-AAFB-F99EF923FF8E}"
	RealtimeTask       = "true"
	DefRealtime        = "1 ms"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,900)">
	<Channels>
		<Server Name="iEncDiv" GUID="{4775D22B-84E9-46B2-9BEC-919D2EADA452}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="SS"/>
		<Server Name="iEncMulti" GUID="{B455D788-54AF-4104-851E-4861DD35F9F5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="SS"/>
		<Server Name="iJamBoxlength" GUID="{6895F1B6-D6CD-4697-892A-846A2384BA44}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iJamBoxlength_Max" GUID="{D1A00821-ECD2-4D1B-AA5B-14D6DBCF9433}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iJamBoxlength_Min" GUID="{5F3A768E-D4FE-4306-828F-8C290657DFAF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iJamReset" GUID="{AF50F784-2D70-49D6-9042-4FA92D6C9772}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="iMinSpot" GUID="{87A55795-E62C-404B-8E3E-440A0C9BFDE8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="SS&#13;&#10;"/>
		<Server Name="iSExtraBox" GUID="{81051343-BF09-4183-8194-2D13EB2224A6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="oJamDet" GUID="{EFD569EB-883D-46B3-9845-30D837B6280E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="oSensorHW" GUID="{EF7C5D67-9D94-4857-AF56-ADF6B14026E2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS"/>
		<Server Name="oSpeed" GUID="{473CE993-ED6B-441A-8596-2E7C522398DB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS"/>
		<Server Name="Server0" GUID="{D1D38536-5252-412B-941E-19B84191CB4C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TaskOnOff" GUID="{433FA15B-651C-4A1A-8BD2-E4B95204405C}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="vSection" GUID="{47281753-CD08-4195-AB94-5BDC55EDD534}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="vUnit" GUID="{A265D4A4-4865-4F99-9DA8-BFE66B6B5076}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="iEncoder" Required="false" Internal="false"/>
		<Client Name="iSensor" Required="false" Internal="false"/>
		<Client Name="rEncdiv" Required="true" Internal="true"/>
		<Client Name="rEncmulti" Required="true" Internal="true"/>
		<Client Name="rJamBoxlength" Required="true" Internal="true"/>
		<Client Name="rMinSpot" Required="true" Internal="true"/>
		<Client Name="rSExtraBox" Required="true" Internal="true"/>
		<Client Name="rvSection" Required="true" Internal="true"/>
		<Client Name="rvUnit" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="JD" Author="JVD"/>
		<Dokumentation Revision="1.1" Date="2013-09-21" Author="JVD" Company="JD" Description="Return state opgelost"/>
		<Dokumentation Revision="1.0" Date="2012-07-04" Author="JVD" Company="JD" Description="Taskmanager included"/>
	</RevDoku>
	<Network Name="Free_Jamdetector">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "rEncdiv"
				GUID       = "{46EC4A12-4DAD-41E2-8243-4AE95FDE271E}"
				Class      = "Ram"
				Position   = "(270,450)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rEncmulti"
				GUID       = "{FE2BEF0A-7856-4DF9-AE36-CD6D76323935}"
				Class      = "Ram"
				Position   = "(270,300)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rJamBoxlength"
				GUID       = "{31DAB27E-9DE2-4850-BF2A-30F6BC1BE1E1}"
				Class      = "Ram"
				Position   = "(270,750)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rMinSpot"
				GUID       = "{8DC1F09E-DB9D-4112-80E5-512620AC7DA2}"
				Class      = "Ram"
				Position   = "(270,150)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rSExtraBox"
				GUID       = "{590E9B1C-ECC5-42C1-AE4B-3D1173379A23}"
				Class      = "Ram"
				Position   = "(270,600)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rvSection"
				GUID       = "{375C1530-FCD7-4150-AAC4-AE9DF5E2023D}"
				Class      = "Ram"
				Position   = "(270,900)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "rvUnit"
				GUID       = "{70BF0170-1BBA-4B0A-817C-0D30596176C6}"
				Class      = "Ram"
				Position   = "(270,1050)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.rEncmulti" Destination="rEncmulti.Data"/>
			<Connection Source="this.rEncdiv" Destination="rEncdiv.Data"/>
			<Connection Source="this.rJamBoxlength" Destination="rJamBoxlength.Data"/>
			<Connection Source="this.rvSection" Destination="rvSection.Data"/>
			<Connection Source="this.rvUnit" Destination="rvUnit.Data"/>
			<Connection Source="this.rMinSpot" Destination="rMinSpot.Data"/>
			<Connection Source="this.rSExtraBox" Destination="rSExtraBox.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
Free_Jamdetector : CLASS
  //Servers:
	Server0 	: SvrChCmd_DINT;
	TaskOnOff 	: SvrCh_DINT;
	iMinSpot 	: SvrCh_DINT;
	oSensorHW 	: SvrCh_DINT;
	oSpeed 	: SvrCh_DINT;
	iEncMulti 	: SvrCh_DINT;
	iEncDiv 	: SvrCh_DINT;
	iSExtraBox 	: SvrCh_DINT;
	oJamDet 	: SvrCh_DINT;
	iJamReset 	: SvrCh_DINT;
	iJamBoxlength 	: SvrCh_DINT;
	vSection 	: SvrCh_DINT;
	vUnit 	: SvrCh_DINT;
	iJamBoxlength_Min 	: SvrCh_DINT;
	iJamBoxlength_Max 	: SvrCh_DINT;
  //Clients:
	rEncmulti 	: CltChCmd_Ram;
	rEncdiv 	: CltChCmd_Ram;
	rMinSpot 	: CltChCmd_Ram;
	iEncoder 	: CltCh_DINT;
	iSensor 	: CltCh_DINT;
	rSExtraBox 	: CltChCmd_Ram;
	rJamBoxlength 	: CltChCmd_Ram;
	rvSection 	: CltChCmd_Ram;
	rvUnit 	: CltChCmd_Ram;
  //Variables:
		Enc 	: Encoder1;
		sensor 	: tSensor;
		Jam 	: tJam;
		OSpeedie 	: tOspeed;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RtWork
		VAR_INPUT
			EAX 	: UDINT := EAX;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Free_Jamdetector::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FREE_JAMDETECTOR
1$UINT, 1$UINT, (SIZEOF(::Free_Jamdetector))$UINT, 
15$UINT, 9$UINT, 0$UINT, 
TO_UDINT(1512452008), "Free_Jamdetector", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Free_Jamdetector.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
(::Free_Jamdetector.TaskOnOff.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3088116079), "TaskOnOff", 
(::Free_Jamdetector.iMinSpot.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(391898945), "iMinSpot", 
(::Free_Jamdetector.oSensorHW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(28908395), "oSensorHW", 
(::Free_Jamdetector.oSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1906102849), "oSpeed", 
(::Free_Jamdetector.iEncMulti.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2623171893), "iEncMulti", 
(::Free_Jamdetector.iEncDiv.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2837987425), "iEncDiv", 
(::Free_Jamdetector.iSExtraBox.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(748054598), "iSExtraBox", 
(::Free_Jamdetector.oJamDet.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(463079756), "oJamDet", 
(::Free_Jamdetector.iJamReset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(473207368), "iJamReset", 
(::Free_Jamdetector.iJamBoxlength.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3273551080), "iJamBoxlength", 
(::Free_Jamdetector.vSection.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2033286819), "vSection", 
(::Free_Jamdetector.vUnit.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3122393997), "vUnit", 
(::Free_Jamdetector.iJamBoxlength_Min.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4271747558), "iJamBoxlength_Min", 
(::Free_Jamdetector.iJamBoxlength_Max.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3264253631), "iJamBoxlength_Max", 
//Clients:
(::Free_Jamdetector.rEncmulti.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2999955865), "rEncmulti", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.rEncdiv.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3438381141), "rEncdiv", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.rMinSpot.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(915065404), "rMinSpot", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.iEncoder.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3545101083), "iEncoder", 
(::Free_Jamdetector.iSensor.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2973998657), "iSensor", 
(::Free_Jamdetector.rSExtraBox.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4091023961), "rSExtraBox", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.rJamBoxlength.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2429580689), "rJamBoxlength", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.rvSection.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2797526164), "rvSection", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::Free_Jamdetector.rvUnit.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2361199823), "rvUnit", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_Free_Jamdetector 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Free_Jamdetector] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Free_Jamdetector::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Free_Jamdetector, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	vmt.CmdTable.RtWork		:= #RtWork();
	Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TaskOnOff.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TaskOnOff.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iMinSpot.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iMinSpot.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iEncMulti.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iEncMulti.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iEncDiv.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iEncDiv.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iSExtraBox.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iSExtraBox.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iJamReset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iJamReset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iJamBoxlength.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iJamBoxlength.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	vSection.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF vSection.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	vUnit.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF vUnit.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iJamBoxlength_Min.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iJamBoxlength_Min.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	iJamBoxlength_Max.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF iJamBoxlength_Max.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//************************************************************************




FUNCTION VIRTUAL GLOBAL Free_Jamdetector::Init

		
	if _firstscan then


//    //geheugen uitlezen 
      rEncmulti := rEncmulti.Read();
      rEncdiv := rEncdiv.Read();
      rMinSpot := rMinSpot.Read();
      rSExtraBox := rSExtraBox.Read();
      rJamBoxlength := rJamBoxlength.Read();
      rvSection := rvSection.Read();
      rvUnit := rvUnit.Read();
      
      iEncMulti.Write(rEncmulti);
      iEncDiv.Write(rEncdiv);
      iMinSpot.Write(rMinSpot);
      iSExtraBox.Write(rSExtraBox);
      iJamBoxlength.Write(rJamBoxlength);
      vSection.Write(rvSection);
      vUnit.Write(rvUnit);
      iJamBoxlength_Max:=2000;
      iJamBoxlength_Min:=0;    
      
	end_if;

END_FUNCTION 





FUNCTION VIRTUAL GLOBAL Free_Jamdetector::RtWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR


//Als in de machine setup de functie is geselelecteerd wordt de code uitgevoerd
  if  TaskOnOff then  

        
//inlezen van de sensors 
  

            iSensor := iSensor.Read();
            oSensorHW :=iSensor;
            oSensorHW.Write(iSensor);


//Divider mag niet 0 zijn!
        if iEncDiv = 0 then  
           iEncDiv:=1;
        end_if;


//inlezen van de encoder

          iEncoder:=iEncoder.Read();
          
          Enc.EncoderDelta := iEncoder - Enc.EncoderOld;
          Enc.EncoderOld := iEncoder;
          
          Enc.Multi := iEncMulti;
          Enc.Divider := iEncDiv;
     
          Enc.SpeedDelta := ((Enc.EncoderDelta * encres * enc.Multi) / enc.Divider); 

//one shot op de ingang

          case Sensor.MinimaalSSW of

          0:
            if  iSensor = 1 then
                Sensor.MinimaleCounter:=0;
                Sensor.Din:=0;
                Sensor.MinimaalSSW+=1;
            end_if;

          1:

            Sensor.MinimaleCounter+= Enc.SpeedDelta;
           
            if  Sensor.MinimaleCounter > (iMinSpot * encres) then
                if  iSensor = 1 then
                    Sensor.Din:=1;  
                    Sensor.MinimaalSSW+=1;  
                else
                    Sensor.MinimaalSSW:=0;
                end_if;
                
            end_if;

          2: 
                Sensor.Din:=0;
            if  iSensor = 0 then
                Sensor.MinimaalSSW:=0;
            end_if;

          end_case;

//Jam
              

             if iJamBoxlength <> 0 then
                 
                  case Jam.CaseJam of
                        
                  0: //controleren of aan de snipper beveiliging is voldaan 
                     if Sensor.Din then                
                        Jam.CaseJam += 1;
                        Jam.JamPos :=  iMinSpot * encres;
                     end_if;
                     
                     
                  1: //Controle op Jamdetect
                     //Kijken of de sensor hoog is na de ingestelde Boxlengte en extra waarde
                              
                        Jam.JamPos += Enc.SpeedDelta;
                        Jam.JamBoxlength := (iJamBoxlength + iSExtraBox) * encres;     
                                                               
                         if   Jam.JamPos > Jam.JamBoxlength then //De Jampos loopt nu mee 
                            if   iSensor then       
                                Jam.JamDetection := 1;
                                oJamdet := jam.Jamdetection;
                                oJamdet.Write(oJamdet);                                   
                                Jam.CaseJam += 1;
                            else                                //Geen Jamdetect!!
                                Jam.JamDetection := 0;   //Geen Jamdetect, terug naar stap 0 en wachten op een nieuwe doos
                                oJamdet := jam.Jamdetection;
                                oJamdet.Write(oJamdet); 
                                Jam.CaseJam := 0;
                            end_if; 
                               
                          
                         end_if;
                  
                  2:  //Jam, reset is nodig om verder te gaan.
                     oJamdet.Write(jam.Jamdetection);
                     
                     if iJamReset then
                        Jam.JamDetection := 0;
                        oJamdet := jam.Jamdetection;
                        oJamdet.Write(oJamdet);                                          
                        Jam.CaseJam:=0;
                        Jam.Jampos:=0;
                     end_if;

                    
         
                   end_case;  
              end_if;



  end_if;

  state := READY;
END_FUNCTION //VIRTUAL GLOBAL Infeed::RtWork



FUNCTION VIRTUAL GLOBAL Free_Jamdetector::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
   

//Als in de machine setup de functie is geselelecteerd wordt de code uitgevoerd
  if  TaskOnOff then    
   //Servers in Ram opslaan
       
      iEncMulti := iEncMulti.Read();
      rEncmulti.Write(iEncMulti);
      iEncDiv:=iEncDiv.Read();
      rEncdiv.Write(iEncDiv);
      iMinSpot := iMinSpot.Read();
      rMinSpot.Write(iMinSpot);
      iSExtraBox := iSExtraBox.Read();
      rSExtraBox.Write(iSExtraBox);
      iJamBoxlength := iJamBoxlength.Read();
      rJamBoxlength.Write(iJamBoxlength);
      vSection := vSection.Read();
      rvSection.Write(vSection);
      vUnit := vUnit.Read();
      rvUnit.Write(vUnit);
      
      
      
        
          OSpeedie.EncIn :=iEncoder.Read();
          ospeedie.EncDelta := OSpeedie.EncIn - OSpeedie.EncOud;
          OSpeedie.EncOud := OSpeedie.EncIn;
          oSpeed := to_dint((to_Real(ospeedie.EncDelta) * 60 * To_Real(iEncMulti)) / (to_Real(iEncDiv)*50)); 
      
      
      
      
      
      
      
      
      
      
      
      
      
      //oSpeed := ((enc.SpeedDelta  * 60) / encres);   //mm/ms  vermenigvuldigen met 60000 / 1000
      
  end_if;    
      
	state := READY;

END_FUNCTION




