//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Visu_Jam"
	Revision           = "0.0"
	GUID               = "{E43DC52A-EB84-4751-96B0-EB769C71DB75}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,360)">
	<Channels>
		<Server Name="ClassSvr" GUID="{D52B1B33-217B-4299-9386-2905C80B408D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="JamBoxLength" GUID="{16B8D378-32E0-4513-9AF1-7FE683AB3177}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="oJamdetect" GUID="{36EB2308-ED1B-451B-85DF-C728B10D2CBA}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="OnOff" GUID="{8815147C-473E-4DF5-8360-6A7EB6D5E388}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="oSensorHW" GUID="{3D3F05E7-AF80-44A1-9809-1F4099E55426}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SensorNrInMachine" GUID="{45857AD1-4361-4FBF-A146-02AB28444859}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Status" GUID="{DE54719D-183F-4D52-9267-3B90CAAD8E31}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="TeachIn_Length" GUID="{E99F1C6D-EDCC-4E38-AA9D-CA9C5B64F43F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="c_JamData" Required="true" Internal="false"/>
		<Client Name="c_SensorNr" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Visu_Jam : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Status 	: SvrCh_tJamStatus;
	SensorNrInMachine 	: SvrCh_DINT;
	OnOff 	: SvrCh_DINT;
	oSensorHW 	: SvrCh_DINT;
	JamBoxLength 	: SvrCh_DINT;
	TeachIn_Length 	: SvrCh_DINT;
	oJamdetect 	: SvrCh_DINT;
  //Clients:
	c_JamData 	: CltChCmd_RAMex;
	c_SensorNr 	: CltCh_DINT;
  //Variables:
		JamData 	: ^tJamDetect;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Status::Read
		VAR_OUTPUT
			output (EAX) 	: tJamStatus;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SensorNrInMachine::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL OnOff::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL oSensorHW::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL JamBoxLength::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL JamBoxLength::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TeachIn_Length::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RAMex


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Visu_Jam::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_VISU_JAM
0$UINT, 0$UINT, (SIZEOF(::Visu_Jam))$UINT, 
8$UINT, 2$UINT, 0$UINT, 
TO_UDINT(1383955435), "Visu_Jam", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Visu_Jam.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Visu_Jam.Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2348327578), "Status", 
(::Visu_Jam.SensorNrInMachine.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1926205408), "SensorNrInMachine", 
(::Visu_Jam.OnOff.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(621859152), "OnOff", 
(::Visu_Jam.oSensorHW.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(28908395), "oSensorHW", 
(::Visu_Jam.JamBoxLength.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2376562502), "JamBoxLength", 
(::Visu_Jam.TeachIn_Length.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4249082006), "TeachIn_Length", 
(::Visu_Jam.oJamdetect.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2262477502), "oJamdetect", 
//Clients:
(::Visu_Jam.c_JamData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3006162123), "c_JamData", TO_UDINT(933570811), "RAMex", 1$UINT, 16$UINT, 
(::Visu_Jam.c_SensorNr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4215786088), "c_SensorNr", 
END_FUNCTION


#define USER_CNT_Visu_Jam 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Visu_Jam] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Visu_Jam::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Visu_Jam, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Status.pMeth			:= StoreMethod( #Status::Read(), #M_NO_F() );
	IF Status.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SensorNrInMachine.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SensorNrInMachine::Write() );
	IF SensorNrInMachine.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OnOff.pMeth			:= StoreMethod( #M_RD_DIRECT(), #OnOff::Write() );
	IF OnOff.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	oSensorHW.pMeth			:= StoreMethod( #oSensorHW::Read(), #M_NO_F() );
	IF oSensorHW.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	JamBoxLength.pMeth			:= StoreMethod( #JamBoxLength::Read(), #JamBoxLength::Write() );
	IF JamBoxLength.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TeachIn_Length.pMeth			:= StoreMethod( #TeachIn_Length::Read(), #M_NO_F() );
	IF TeachIn_Length.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Visu_Jam::Init
  
  
  
  if      c_JamData.GetSize() <> sizeof(tJamDetect) then
          c_JamData.SetSize(udSize:=sizeof(tJamDetect));
  end_if;

  if      _FirstScan then
          JamData := (c_JamData.GetDataPtr())$^tJamDetect; 
          OnOff.Write(input:=JamData^.OnOff[c_SensorNr]);
          JamBoxLength.Write(input:=JamData^.JamBoxlength[c_SensorNr]);
          SensorNrInMachine.Write(input:=JamData^.SensorNrInMachine[c_SensorNr]);
  end_if;  
  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR



  JamBoxLength.Read();
  TeachIn_Length.Read();
  Status.Read();
  oSensorHW.Read();
  
  if  Status = Jam_Detect then
      oJamdetect := 1;
  else
      oJamdetect := 0;
  end_if;

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::Status::Read
	VAR_OUTPUT
		output (EAX) 	: tJamStatus;
	END_VAR


  Status :=  JamData^.Status[c_SensorNr];
	output := Status;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::JamBoxLength::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  JamBoxLength := JamData^.JamBoxlength[c_SensorNr];
	output := JamBoxLength;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::TeachIn_Length::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  TeachIn_Length := JamData^.TeachInLength[c_SensorNr];
	output := TeachIn_Length;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::OnOff::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	OnOff := input;
  
  if OnOff < 0 | OnOff > 1 then
     OnOff := 0; 
  end_if;

  JamData^.OnOff[c_SensorNr] := OnOff;
  if    JamData^.Status[c_SensorNr] = Turned_Off & JamBoxLength > 0 & OnOff then
        JamData^.Status[c_SensorNr] := Normal_Operation;
  elsif (JamData^.NrOfJamSensors >= c_SensorNr) & (JamBoxlength = 0 | OnOff = 0)  then
        JamData^.Status[c_SensorNr] := Turned_Off;                     
  end_if;  
  
 	result := OnOff;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::JamBoxLength::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	JamBoxLength := input;
  if    JamBoxLength < 0 then
        JamBoxLength := 0;
  elsif JamBoxLength > 2000 then    //eventueel aanpassen aan max t waarde boxeditor!!!!
        JamBoxLength := 2000;  
  end_if;
  
  if    JamData^.Status[c_SensorNr] = Turned_Off & JamBoxLength > 0 & OnOff then
        JamData^.Status[c_SensorNr] := Normal_Operation;
  elsif (JamData^.NrOfJamSensors >= c_SensorNr) & (JamBoxlength = 0 | OnOff = 0)  then
        JamData^.Status[c_SensorNr] := Turned_Off;                     
  end_if;


  JamData^.JamBoxlength[c_SensorNr] := JamBoxLength;  
 	result := JamBoxLength;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL Visu_Jam::oSensorHW::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  oSensorHW := JamData^.Sensor[c_SensorNr];
	output := oSensorHW;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Visu_Jam::SensorNrInMachine::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	SensorNrInMachine := input;
  if  SensorNrInMachine < 0 then
      SensorNrInMachine := 0;
  elsif SensorNrInMachine > 100 then
        SensorNrInMachine := 100; 
  end_if;
  JamData^.SensorNrInMachine[c_SensorNr] := SensorNrInMachine;
  
 	result := SensorNrInMachine;

END_FUNCTION
