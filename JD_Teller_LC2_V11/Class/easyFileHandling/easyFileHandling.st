//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "easyFileHandling"
	Revision           = "0.0"
	GUID               = "{F0C4CF50-D541-46C6-B1C8-942AE74BEE49}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(660,600)">
	<Channels>
		<Server Name="ExtensionFilterStr" GUID="{A407604A-9EDC-4268-B16C-79C2A50DFC30}" Class="String" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="FileSelectedOK" GUID="{EB809E1C-9ABF-41B0-8B38-5C7E70E5C234}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="FileStr" GUID="{814D9456-C1CD-437A-BE6D-7D6D4B380DDE}" Class="String" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="PathStr" GUID="{91F43FA0-33C1-4977-BD0A-BED2720B0D99}" Class="String" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="toOpenFileSt" GUID="{5A1C6E48-2836-4CEF-A6DC-9FD6F4CE3CC5}" Class="String" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Client Name="ExtensionFilter" Required="false" Internal="true"/>
		<Client Name="FileString" Required="false" Internal="true"/>
		<Client Name="PathString" Required="false" Internal="true"/>
		<Client Name="toOpenFileStr" Required="true" Internal="true"/>
	</Channels>
	<Network Name="easyFileHandling">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{76B5D453-1C45-4FE0-AD74-5013CF3059C7}"
				Class      = "easyFileList"
				Position   = "(1201,120)"
				Visualized = "false">
				<Channels>
					<Server Name="DirectoryBack"/>
					<Server Name="Entries"/>
					<Server Name="Refresh"/>
					<Server Name="RefreshFiles"/>
					<Server Name="Server0"/>
					<Client Name="cToolCatLoadInfo"/>
					<Client Name="ExtensionFilter"/>
					<Client Name="FileIO"/>
					<Client Name="FileString"/>
					<Client Name="LineWidth" Value="0"/>
					<Client Name="Lse"/>
					<Client Name="PathString"/>
					<Client Name="toOpenFileString"/>
					<Client Name="VerticalLevel"/>
				</Channels>
			</Object>
			<Object
				Name       = "ExtensionFilter"
				GUID       = "{63A1AAB4-6980-4820-9615-36684566A090}"
				Class      = "String"
				Position   = "(60,990)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "FileString"
				GUID       = "{6DB441E4-FBD2-412A-A048-9F75E74EC257}"
				Class      = "String"
				Position   = "(60,840)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "PathString"
				GUID       = "{F3620573-6E2A-462D-8E75-ECABC3221832}"
				Class      = "String"
				Position   = "(60,690)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "toOpenFileStr"
				GUID       = "{A3C6CBB7-8E6D-4E98-ABFF-713F408BC074}"
				Class      = "String"
				Position   = "(60,1200)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="_base.PathString" Destination="PathString.Data" Vertices="(1201,450),(780,450),(780,780),(376,780),"/>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(1673,210),(1501,210),"/>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(1673,270),(1501,270),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(1201,210),(38,210),"/>
			<Connection Source="_base.FileString" Destination="FileString.Data" Vertices="(1201,510),(840,510),(840,930),(376,930),"/>
			<Connection Source="this.Entries" Destination="_base.Entries" Vertices="(1673,330),(1501,330),"/>
			<Connection Source="_base.FileIO" Destination="this.FileIO" Vertices="(1201,390),(1170,390),(1170,270),(38,270),"/>
			<Connection Source="this.PathStr" Destination="PathString.Data" Vertices="(1673,510),(1530,510),(1530,780),(376,780),"/>
			<Connection Source="this.FileStr" Destination="FileString.Data" Vertices="(1673,570),(1560,570),(1560,930),(660,930),(376,930),"/>
			<Connection Source="_base.ExtensionFilter" Destination="ExtensionFilter.Data" Vertices="(1201,570),(900,570),(900,1080),(376,1080),"/>
			<Connection Source="this.ExtensionFilterStr" Destination="ExtensionFilter.Data" Vertices="(1673,630),(1590,630),(1590,1080),(376,1080),"/>
			<Connection Source="this.toOpenFileStr" Destination="toOpenFileStr.Data"/>
			<Connection Source="_base.toOpenFileString" Destination="toOpenFileStr.Data" Vertices="(1201,630),(690,630),(690,1290),(376,1290),"/>
			<Connection Source="this.toOpenFileSt" Destination="toOpenFileStr.Data" Vertices="(1673,690),(1620,690),(1620,1290),(376,1290),"/>
			<Connection Source="this.DirectoryBack" Destination="_base.DirectoryBack" Vertices="(1673,390),(1501,390),"/>
			<Connection Source="this.RefreshFiles" Destination="_base.RefreshFiles" Vertices="(1673,450),(1501,450),"/>
			<Connection Source="_base.cToolCatLoadInfo" Destination="this.cToolCatLoadInfo" Vertices="(1201,690),(1140,690),(1140,330),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using easyFileList

easyFileHandling : CLASS
: easyFileList
  //Servers:
	PathStr 	: SvrChCmd_UDINT;
	FileStr 	: SvrChCmd_UDINT;
	ExtensionFilterStr 	: SvrChCmd_UDINT;
	toOpenFileSt 	: SvrChCmd_UDINT;
	FileSelectedOK 	: SvrCh_UDINT;
  //Clients:
	virtual PathString 	: CltChCmd_String;
	virtual FileString 	: CltChCmd_String;
	virtual ExtensionFilter 	: CltChCmd_String;
	toOpenFileStr 	: CltChCmd_String;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL ReadFiles;
	
	FUNCTION VIRTUAL GLOBAL PathStr::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL PathStr::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FileStr::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FileStr::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ExtensionFilterStr::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ExtensionFilterStr::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL toOpenFileSt::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL toOpenFileSt::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FileSelectedOK::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB easyFileHandling::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_EASYFILEHANDLING
0$UINT, 0$UINT, (SIZEOF(::easyFileHandling))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3571405469), "easyFileHandling", //Class
TO_UDINT(3455067800), "easyFileList", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::easyFileHandling.PathStr.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3704016568), "PathStr", 
(::easyFileHandling.FileStr.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2522997183), "FileStr", 
(::easyFileHandling.ExtensionFilterStr.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1839553675), "ExtensionFilterStr", 
(::easyFileHandling.toOpenFileSt.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3209917790), "toOpenFileSt", 
(::easyFileHandling.FileSelectedOK.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1734389864), "FileSelectedOK", 
//Clients:
(::easyFileHandling.PathString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3933989844), "PathString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::easyFileHandling.FileString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3046830909), "FileString", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::easyFileHandling.ExtensionFilter.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(626381598), "ExtensionFilter", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::easyFileHandling.toOpenFileStr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3674992851), "toOpenFileStr", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_easyFileHandling 24

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_easyFileHandling] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION easyFileHandling::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= easyFileList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_easyFileHandling;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[23]		:= #ReadFiles();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, PathStr.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #PathStr::Read();
	vmt.CmdTable.Write		:= #PathStr::Write();
	PathStr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF PathStr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, FileStr.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #FileStr::Read();
	vmt.CmdTable.Write		:= #FileStr::Write();
	FileStr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF FileStr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ExtensionFilterStr.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ExtensionFilterStr::Read();
	vmt.CmdTable.Write		:= #ExtensionFilterStr::Write();
	ExtensionFilterStr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ExtensionFilterStr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, toOpenFileSt.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #toOpenFileSt::Read();
	vmt.CmdTable.Write		:= #toOpenFileSt::Write();
	toOpenFileSt.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF toOpenFileSt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FileSelectedOK.pMeth			:= StoreMethod( #FileSelectedOK::Read(), #M_WR_DIRECT() );
	IF FileSelectedOK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION




FUNCTION VIRTUAL GLOBAL easyFileHandling::PathStr::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	PathStr := PathString.Data.Read();
	output := PathStr;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::PathStr::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	PathStr := input;
 	result := PathString.Data.Write(PathStr);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::FileStr::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	FileStr := FileString.Data.Read();
	output := FileStr$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::FileStr::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	FileStr := input;
 	result := FileString.Data.Write(FileStr);

END_FUNCTION





FUNCTION VIRTUAL GLOBAL easyFileHandling::ExtensionFilterStr::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ExtensionFilterStr := ExtensionFilter.Data.Read();
	output := ExtensionFilterStr$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::ExtensionFilterStr::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ExtensionFilterStr$UDINT := input;
 	result := ExtensionFilter.Data.Write(ExtensionFilterStr);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::toOpenFileSt::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	toOpenFileSt := toOpenFileStr.Data.Read();
	output := toOpenFileSt$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::toOpenFileSt::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR
  
	toOpenFileSt := input;
 	result := toOpenFileStr.Data.Write(toOpenFileSt);

END_FUNCTION



FUNCTION VIRTUAL GLOBAL easyFileHandling::Init


  StartPathLen := PathString.GetLength();
  PathString.ReadDataOff(udOff:=0, pData:=#StartPath[0], udMax:=StartPathLen);
  StartPath[StartPathLen] :=0;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::ReadFiles
  easyFileList::ReadFiles();
  InsertCmd(Cmd_Redraw, 0, 0);
END_FUNCTION


FUNCTION VIRTUAL GLOBAL easyFileHandling::FileSelectedOK::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

//  FileSelectedOK := toOpenFileStr.GetLength()>1;
  
//	if toOpenFileStr.GetLength()>1 then
//    FileSelectedOK:=1;
//  else
//    FileSelectedOK:=0;
//  end_if;

FileSelectedOK := toOpenFileStr.GetLength();
   
	output := FileSelectedOK;

END_FUNCTION
