//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_FirstAlarm"
	Revision           = "2.0"
	GUID               = "{8D19830D-A000-4B4D-ABF1-599AFA5C7825}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(422,120)">
	<Channels>
		<Server Name="ActAlarmNr" GUID="{C49D05E2-0494-4CC4-90A6-32D1A543963E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AlarmTakt" GUID="{8D531753-9606-4FE8-986E-C23BD42F6A1C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="SortAlgoHist" Required="true" Internal="false"/>
		<Client Name="SortAlgoTemp" Required="true" Internal="false"/>
	</Channels>
	<Network Name="_FirstAlarm">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{57DD2EC3-98AE-4E38-8F84-999EB1669EF2}"
				Class      = "_HotAlarm"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Server0"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _HotAlarm

_FirstAlarm : CLASS
: _HotAlarm
  //Servers:
	ActAlarmNr 	: SvrCh_DINT;
	AlarmTakt 	: SvrCh_DINT;
  //Clients:
	SortAlgoTemp 	: CltCh_DINT;
	SortAlgoHist 	: CltCh_DINT;
  //Variables:
		pms 	: ^_MEM_SINGLEALARM;
		no 	: _UDWORD;
		nn 	: UDINT;
		nnn 	: UDINT;
		psa 	: ^_SINGLEALARM;
		txt 	: ^_CHAR;
		FirstTime 	: DINT;
		TimeMarkTakt 	: UDINT;
  //Functions:
				//! <Function Comment="[#ENGLISH]&#13;&#10;this method is called everytime when system wants to redraw the io&#13;&#10;&#13;&#10;pio ....... pointer to io information&#13;&#10;pr ........ pointer to result information&#13;&#10;pv ........ pointer to io variableinformation&#13;&#10;input ..... _TRUE it&apos;s an input / _FALSE it&apos;s an output&#13;&#10;&#13;&#10;for the returnstatement there are 3 different possibilities&#13;&#10;_IDLE ..... the system should goon like it is (system goes on)&#13;&#10;_IDIDIT ... i did it (system is ready)&#13;&#10;_IFAILED .. i tried to do my best, but i failed (system is ready)&#13;&#10;&#13;&#10;if you want to draw the io let&apos;s return _IDIDIT&#13;&#10;" Name="Draw"/>
	FUNCTION __CDECL VIRTUAL GLOBAL Draw
		VAR_INPUT
			pio 	: ^_IO;
			pr 	: ^_RESULT;
			pv 	: ^_VARIABLE;
			input 	: BOOL;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DOIT;
		END_VAR;
				//! <Function Comment="[#ENGLISH]&#13;&#10;this method is called everytime when system wants to get data for defined io.&#13;&#10;&#13;&#10;pr ........ pointer to result information&#13;&#10;pio ....... pointer to io information&#13;&#10;pv ........ pointer to io variableinformation&#13;&#10;input ..... _TRUE it&apos;s an input / _FALSE it&apos;s an output&#13;&#10;&#13;&#10;for the returnstatement there are 3 different possibilities&#13;&#10;_IDLE ..... the system should goon like it is (system goes on)&#13;&#10;_IDIDIT ... i did it (system is ready)&#13;&#10;_IFAILED .. i tried to do my best, but i failed (system is ready)&#13;&#10;&#13;&#10;if you want to do it let&apos;s return _IDIDIT and initialize the  structure _RESULT&#13;&#10;" Name="GetData"/>
	FUNCTION __CDECL VIRTUAL GLOBAL GetData
		VAR_INPUT
			pr 	: ^_RESULT;
			pio 	: ^_IO;
			pv 	: ^_VARIABLE;
			input 	: BOOL;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DOIT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _FirstAlarm::@CT_
0$UINT,
2#0100000000000010$UINT, //TY__FIRSTALARM
2$UINT, 0$UINT, (SIZEOF(::_FirstAlarm))$UINT, 
2$UINT, 2$UINT, 0$UINT, 
TO_UDINT(3063702709), "_FirstAlarm", //Class
TO_UDINT(3509550928), "_HotAlarm", 0$UINT, 1$UINT, //Baseclass
//Servers:
(::_FirstAlarm.ActAlarmNr.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2838333660), "ActAlarmNr", 
(::_FirstAlarm.AlarmTakt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(406315936), "AlarmTakt", 
//Clients:
(::_FirstAlarm.SortAlgoTemp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1430223589), "SortAlgoTemp", 
(::_FirstAlarm.SortAlgoHist.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2512818272), "SortAlgoHist", 
END_FUNCTION


#define USER_CNT__FirstAlarm 17

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__FirstAlarm] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _FirstAlarm::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _HotAlarm::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__FirstAlarm;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #Draw();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetData();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION __CDECL VIRTUAL GLOBAL _FirstAlarm::Draw
	VAR_INPUT
		pio 	: ^_IO;
		pr 	: ^_RESULT;
		pv 	: ^_VARIABLE;
		input 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode (EAX) 	: _DOIT;
	END_VAR


VAR
//  pms   : ^_MEM_SINGLEALARM;
//	psa   : ^_SINGLEALARM; 
//	txt   : ^_CHAR;  
	st    : BOOL; 
//	no    : UDINT; 
END_VAR


  if FirstTime = 0 then
    SortAlgoTemp := 2;
    SortAlgoHist := 2;
    SortAlgoTemp.Write (SortAlgoTemp);
    SortAlgoHist.Write (SortAlgoHist);
    FirstTime := 1;
  end_if;  

  st  := _FALSE; 
  pms := get_MEM_SINGLEALARM(_FALSE); 
  no  := no_RINGBUFFER(#pms^.ringbuffer); 
  nnn := 0;

  while(nnn < no) do
    nnn += 1; 
    psa := pms^.ptr + rpos_RINGBUFFER(#pms^.ringbuffer, nn) * sizeof(_SINGLEALARM); 
	if(psa^.state <> 0) then
      txt := create_alarmtext(psa, _FALSE, NIL);
	  if(txt <> NIL) then
	    actalarmNR := psa^.no;
      nnn := nn;  // stoppen !!
      no := nnn; 
	    st := _TRUE; 
      end_if; 
    else
    	nn += 1;
	end_if; 
  end_while; 
  
    Graphic.Putimage(#pio^.image, DEFKOORD, DEFKOORD);
  if(st = _FALSE) then
    nn := 0; // Opnieuw als er geen alarmen meer zijn  !!
    actalarmNR := -1;
  else
    OutMultiTextAlign(txt, pio^.fillchr, #pio^.space, pio^.font, pio^.attrib, pio^.frametype, pio^.coltxt, pio^.colback, pio^.colframe, sizeof(_CHAR));
  end_if; 


  retcode := _IDIDIT;   

 

END_FUNCTION


FUNCTION __CDECL VIRTUAL GLOBAL _FirstAlarm::GetData
	VAR_INPUT
		pr 	: ^_RESULT;
		pio 	: ^_IO;
		pv 	: ^_VARIABLE;
		input 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode (EAX) 	: _DOIT;
	END_VAR
  
   pms := get_MEM_SINGLEALARM(FALSE);
  pr^.ftype := RES_NUMERIC;
  pr^.rmin  := pms^.xchange;
  pr^.rmax  := pms^.xchange;
  pr^.value := pms^.xchange;
  pr^.ptr   := #pr^.value$void;

  retcode := _IDIDIT;

    
// #PVO  090624    
  if ActAlarmNr >= 0 then
    if ops.tAbsolute - TimeMarkTakt > 500 then  // alarm signal 500ms on - - - 500ms off
      AlarmTakt := (AlarmTakt = 0);
      TimeMarkTakt := ops.tAbsolute;
    end_if;  
  else
    AlarmTakt := 0;
    TimeMarkTakt := ops.tAbsolute;
  end_if;  
  


END_FUNCTION
